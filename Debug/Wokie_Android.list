
Wokie_Android.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  08015110  08015110  00025110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015914  08015914  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  08015914  08015914  00025914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801591c  0801591c  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801591c  0801591c  0002591c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015920  08015920  00025920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  08015924  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a710  2000036c  08015c90  0003036c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000aa7c  08015c90  0003aa7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003bed6  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ba6  00000000  00000000  0006c272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024f8  00000000  00000000  00072e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022b8  00000000  00000000  00075310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b09c  00000000  00000000  000775c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c7ae  00000000  00000000  000a2664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efbd1  00000000  00000000  000cee12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001be9e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b22c  00000000  00000000  001bea38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000036c 	.word	0x2000036c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080150f8 	.word	0x080150f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000370 	.word	0x20000370
 80001cc:	080150f8 	.word	0x080150f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <PWM_Initialize>:
#include "dcMotor.h"

	/* @brief: Initialize the PWM Channels
	 * @return: NOTHING*/
void PWM_Initialize(dcMotor_t motor)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);		//Drum Motor
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	4814      	ldr	r0, [pc, #80]	; (800104c <PWM_Initialize+0x60>)
 8000ffa:	f007 fbc5 	bl	8008788 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);		//Spare Motor
 8000ffe:	210c      	movs	r1, #12
 8001000:	4812      	ldr	r0, [pc, #72]	; (800104c <PWM_Initialize+0x60>)
 8001002:	f007 fbc1 	bl	8008788 <HAL_TIM_PWM_Start>
	TIM1->CCR2 = 0;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <PWM_Initialize+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR4 = 0;
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <PWM_Initialize+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(DRUM_DC_INB_GPIO_Port, DRUM_DC_INB_Pin, RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001018:	480e      	ldr	r0, [pc, #56]	; (8001054 <PWM_Initialize+0x68>)
 800101a:	f004 fbe3 	bl	80057e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRUM_DC_INA_GPIO_Port, DRUM_DC_INA_Pin, RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <PWM_Initialize+0x68>)
 8001026:	f004 fbdd 	bl	80057e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPARE_DC_EN_GPIO_Port, SPARE_DC_EN_Pin, RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <PWM_Initialize+0x68>)
 8001032:	f004 fbd7 	bl	80057e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPARE_DC_ENB_GPIO_Port, SPARE_DC_ENB_Pin, RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <PWM_Initialize+0x68>)
 800103e:	f004 fbd1 	bl	80057e4 <HAL_GPIO_WritePin>
		TIM1->CCR4 = 0;
//		TIM1->CCR3 = 0;
		HAL_GPIO_WritePin(SPARE_DC_EN_GPIO_Port, SPARE_DC_EN_Pin, RESET);
//		HAL_GPIO_WritePin(SPARE_DC_ENB_GPIO_Port, SPARE_DC_ENB_Pin, RESET);
	}*/
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20008fb8 	.word	0x20008fb8
 8001050:	40010000 	.word	0x40010000
 8001054:	40021000 	.word	0x40021000

08001058 <dcMotorSetPWM>:
 * 			 direction->The direction of the motor
 * 			 motor-> Motor to rotate, options are drumDCMotor motor, spareDCMotor motor
 * @return: NOTHING
 * */
void dcMotorSetPWM(float pwmValue, dcMotor_t motor,  motorDirection_t direction)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001062:	4603      	mov	r3, r0
 8001064:	460a      	mov	r2, r1
 8001066:	70fb      	strb	r3, [r7, #3]
 8001068:	4613      	mov	r3, r2
 800106a:	70bb      	strb	r3, [r7, #2]
	if(direction == CLOCKWISE)
 800106c:	78bb      	ldrb	r3, [r7, #2]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d129      	bne.n	80010c6 <dcMotorSetPWM+0x6e>
	{
		if(motor == drumDCMotor)
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d114      	bne.n	80010a2 <dcMotorSetPWM+0x4a>
#if BTN7960_DRIVER_EN == 1
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, SET);
			TIM1->CCR1 = 0;
			TIM1->CCR2 = pwmValue;
#elif VNH_DRIVER_ENABLE == 1
			HAL_GPIO_WritePin(DRUM_DC_INA_GPIO_Port, DRUM_DC_INA_Pin, RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107e:	482a      	ldr	r0, [pc, #168]	; (8001128 <dcMotorSetPWM+0xd0>)
 8001080:	f004 fbb0 	bl	80057e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRUM_DC_INB_GPIO_Port, DRUM_DC_INB_Pin, SET);
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108a:	4827      	ldr	r0, [pc, #156]	; (8001128 <dcMotorSetPWM+0xd0>)
 800108c:	f004 fbaa 	bl	80057e4 <HAL_GPIO_WritePin>
			TIM1->CCR2 = pwmValue;
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <dcMotorSetPWM+0xd4>)
 8001092:	edd7 7a01 	vldr	s15, [r7, #4]
 8001096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800109a:	ee17 2a90 	vmov	r2, s15
 800109e:	639a      	str	r2, [r3, #56]	; 0x38
//			HAL_GPIO_WritePin(SPARE_DC_ENB_GPIO_Port, SPARE_DC_ENB_Pin, RESET);
//			TIM1->CCR3 = pwmValue;
			TIM1->CCR4 = pwmValue;
		}
	}
}
 80010a0:	e03d      	b.n	800111e <dcMotorSetPWM+0xc6>
		else if(motor == spareDCMotor)
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d13a      	bne.n	800111e <dcMotorSetPWM+0xc6>
			HAL_GPIO_WritePin(SPARE_DC_EN_GPIO_Port, SPARE_DC_EN_Pin, RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ae:	481e      	ldr	r0, [pc, #120]	; (8001128 <dcMotorSetPWM+0xd0>)
 80010b0:	f004 fb98 	bl	80057e4 <HAL_GPIO_WritePin>
			TIM1->CCR4 = pwmValue;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <dcMotorSetPWM+0xd4>)
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010be:	ee17 2a90 	vmov	r2, s15
 80010c2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010c4:	e02b      	b.n	800111e <dcMotorSetPWM+0xc6>
	else if(direction == ANTICLOCKWISE)
 80010c6:	78bb      	ldrb	r3, [r7, #2]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d128      	bne.n	800111e <dcMotorSetPWM+0xc6>
		if(motor == drumDCMotor)
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d114      	bne.n	80010fc <dcMotorSetPWM+0xa4>
			HAL_GPIO_WritePin(DRUM_DC_INA_GPIO_Port, DRUM_DC_INA_Pin, SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d8:	4813      	ldr	r0, [pc, #76]	; (8001128 <dcMotorSetPWM+0xd0>)
 80010da:	f004 fb83 	bl	80057e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRUM_DC_INB_GPIO_Port, DRUM_DC_INB_Pin, RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e4:	4810      	ldr	r0, [pc, #64]	; (8001128 <dcMotorSetPWM+0xd0>)
 80010e6:	f004 fb7d 	bl	80057e4 <HAL_GPIO_WritePin>
			TIM1->CCR2 = pwmValue;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <dcMotorSetPWM+0xd4>)
 80010ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f4:	ee17 2a90 	vmov	r2, s15
 80010f8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80010fa:	e010      	b.n	800111e <dcMotorSetPWM+0xc6>
		else if(motor == spareDCMotor)
 80010fc:	78fb      	ldrb	r3, [r7, #3]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d10d      	bne.n	800111e <dcMotorSetPWM+0xc6>
			HAL_GPIO_WritePin(SPARE_DC_EN_GPIO_Port, SPARE_DC_EN_Pin, SET);
 8001102:	2201      	movs	r2, #1
 8001104:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <dcMotorSetPWM+0xd0>)
 800110a:	f004 fb6b 	bl	80057e4 <HAL_GPIO_WritePin>
			TIM1->CCR4 = pwmValue;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <dcMotorSetPWM+0xd4>)
 8001110:	edd7 7a01 	vldr	s15, [r7, #4]
 8001114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001118:	ee17 2a90 	vmov	r2, s15
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000

08001130 <clearErrorCounts>:
void errorHandleTask(void *argument);

/* USER CODE BEGIN PFP */

void clearErrorCounts(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
//	 timerCnt.errorConfirmationCnt = 0;
	 timerCnt.speedSensorErrorCnt = 0;
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <clearErrorCounts+0x2c>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
	 timerCnt.temperatureSensorErrorCnt = 0;
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <clearErrorCounts+0x2c>)
 800113c:	2200      	movs	r2, #0
 800113e:	705a      	strb	r2, [r3, #1]
	 timerCnt.inductionBoardErrorCnt = 0;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <clearErrorCounts+0x2c>)
 8001142:	2200      	movs	r2, #0
 8001144:	709a      	strb	r2, [r3, #2]
	 timerCnt.inductionErrorCnt = 0;
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <clearErrorCounts+0x2c>)
 8001148:	2200      	movs	r2, #0
 800114a:	70da      	strb	r2, [r3, #3]
	 timerCnt.stopErrorCnt = 0;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <clearErrorCounts+0x2c>)
 800114e:	2200      	movs	r2, #0
 8001150:	809a      	strh	r2, [r3, #4]
}
 8001152:	bf00      	nop
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	20008c70 	.word	0x20008c70

08001160 <clearErrors>:
void clearErrors(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	 processError.temperatureSensorError = 0;
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <clearErrors+0x3c>)
 8001166:	7813      	ldrb	r3, [r2, #0]
 8001168:	f36f 0341 	bfc	r3, #1, #1
 800116c:	7013      	strb	r3, [r2, #0]
	 processError.speedSensorError = 0;
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <clearErrors+0x3c>)
 8001170:	7813      	ldrb	r3, [r2, #0]
 8001172:	f36f 0300 	bfc	r3, #0, #1
 8001176:	7013      	strb	r3, [r2, #0]
	 processError.inductionBoardError = 0;
 8001178:	4a08      	ldr	r2, [pc, #32]	; (800119c <clearErrors+0x3c>)
 800117a:	7813      	ldrb	r3, [r2, #0]
 800117c:	f36f 0382 	bfc	r3, #2, #1
 8001180:	7013      	strb	r3, [r2, #0]
	 processError.processStopError = 0;
 8001182:	4a06      	ldr	r2, [pc, #24]	; (800119c <clearErrors+0x3c>)
 8001184:	7893      	ldrb	r3, [r2, #2]
 8001186:	f36f 0300 	bfc	r3, #0, #1
 800118a:	7093      	strb	r3, [r2, #2]
	 processError.errorNumberAndroid = 0;
 800118c:	4b03      	ldr	r3, [pc, #12]	; (800119c <clearErrors+0x3c>)
 800118e:	2200      	movs	r2, #0
 8001190:	705a      	strb	r2, [r3, #1]
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	20008c3c 	.word	0x20008c3c

080011a0 <clearProcessVariables>:
void clearProcessVariables(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
	 androidProcessStruct.temperatureAutoMode = 0;
 80011a4:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <clearProcessVariables+0x38>)
 80011a6:	7813      	ldrb	r3, [r2, #0]
 80011a8:	f36f 0341 	bfc	r3, #1, #1
 80011ac:	7013      	strb	r3, [r2, #0]
	 androidProcessStruct.sendTempAckOnce = 0;
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <clearProcessVariables+0x38>)
 80011b0:	7813      	ldrb	r3, [r2, #0]
 80011b2:	f36f 0382 	bfc	r3, #2, #1
 80011b6:	7013      	strb	r3, [r2, #0]
	 androidProcessStruct.manualMode =0;
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <clearProcessVariables+0x38>)
 80011ba:	7813      	ldrb	r3, [r2, #0]
 80011bc:	f36f 03c3 	bfc	r3, #3, #1
 80011c0:	7013      	strb	r3, [r2, #0]
	 androidProcessStruct.startofCooking =0;
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <clearProcessVariables+0x38>)
 80011c4:	7813      	ldrb	r3, [r2, #0]
 80011c6:	f36f 0300 	bfc	r3, #0, #1
 80011ca:	7013      	strb	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20008c54 	.word	0x20008c54

080011dc <Send_Response>:
/* @brief:  Send Acknowledment Response to USB
 * @params: id->Message ID
 * 			data->Data or Message
 * @return: NOTHING*/
void  Send_Response(uint8_t msgId ,uint8_t data)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
	memset(msg,0,64);
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	2100      	movs	r1, #0
 80011f0:	480b      	ldr	r0, [pc, #44]	; (8001220 <Send_Response+0x44>)
 80011f2:	f00f fb2b 	bl	801084c <memset>
	msg[0] = 0x13;
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <Send_Response+0x44>)
 80011f8:	2213      	movs	r2, #19
 80011fa:	701a      	strb	r2, [r3, #0]
	msg[1] = msgId;
 80011fc:	4a08      	ldr	r2, [pc, #32]	; (8001220 <Send_Response+0x44>)
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	7053      	strb	r3, [r2, #1]
	msg[2] = data;
 8001202:	4a07      	ldr	r2, [pc, #28]	; (8001220 <Send_Response+0x44>)
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	7093      	strb	r3, [r2, #2]
	msg[63] = 0x12;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <Send_Response+0x44>)
 800120a:	2212      	movs	r2, #18
 800120c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	CDC_Transmit_FS(msg,64);
 8001210:	2140      	movs	r1, #64	; 0x40
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <Send_Response+0x44>)
 8001214:	f00e fe78 	bl	800ff08 <CDC_Transmit_FS>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20008d84 	.word	0x20008d84

08001224 <Send_Status_Wait_ACK>:

void  Send_Status_Wait_ACK()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	memset(msg,0,64);
 800122a:	2240      	movs	r2, #64	; 0x40
 800122c:	2100      	movs	r1, #0
 800122e:	481f      	ldr	r0, [pc, #124]	; (80012ac <Send_Status_Wait_ACK+0x88>)
 8001230:	f00f fb0c 	bl	801084c <memset>
	msg[0] = 0x13;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <Send_Status_Wait_ACK+0x88>)
 8001236:	2213      	movs	r2, #19
 8001238:	701a      	strb	r2, [r3, #0]
	msg[1] = STATUS_ID;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <Send_Status_Wait_ACK+0x88>)
 800123c:	2205      	movs	r2, #5
 800123e:	705a      	strb	r2, [r3, #1]
	msg[2] = 2;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <Send_Status_Wait_ACK+0x88>)
 8001242:	2202      	movs	r2, #2
 8001244:	709a      	strb	r2, [r3, #2]
	msg[3] = (int)avgTemperature;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <Send_Status_Wait_ACK+0x8c>)
 8001248:	edd3 7a00 	vldr	s15, [r3]
 800124c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001250:	edc7 7a01 	vstr	s15, [r7, #4]
 8001254:	793a      	ldrb	r2, [r7, #4]
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <Send_Status_Wait_ACK+0x88>)
 8001258:	70da      	strb	r2, [r3, #3]
	msg[4] = ((int)avgTemperature >> 8);
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <Send_Status_Wait_ACK+0x8c>)
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001264:	ee17 3a90 	vmov	r3, s15
 8001268:	121b      	asrs	r3, r3, #8
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <Send_Status_Wait_ACK+0x88>)
 800126e:	711a      	strb	r2, [r3, #4]
	msg[5] = avg_speed;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <Send_Status_Wait_ACK+0x90>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800127a:	edc7 7a01 	vstr	s15, [r7, #4]
 800127e:	793b      	ldrb	r3, [r7, #4]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <Send_Status_Wait_ACK+0x88>)
 8001284:	715a      	strb	r2, [r3, #5]
	msg[6] = 0;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <Send_Status_Wait_ACK+0x88>)
 8001288:	2200      	movs	r2, #0
 800128a:	719a      	strb	r2, [r3, #6]
	msg[7] = 0;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <Send_Status_Wait_ACK+0x88>)
 800128e:	2200      	movs	r2, #0
 8001290:	71da      	strb	r2, [r3, #7]
	msg[63] = 0x12;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <Send_Status_Wait_ACK+0x88>)
 8001294:	2212      	movs	r2, #18
 8001296:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	CDC_Transmit_FS(msg,64);
 800129a:	2140      	movs	r1, #64	; 0x40
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <Send_Status_Wait_ACK+0x88>)
 800129e:	f00e fe33 	bl	800ff08 <CDC_Transmit_FS>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20008d84 	.word	0x20008d84
 80012b0:	200003e0 	.word	0x200003e0
 80012b4:	200003f4 	.word	0x200003f4

080012b8 <Send_Status_data>:

void  Send_Status_data()
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
	memset(msg,0,64);
 80012be:	2240      	movs	r2, #64	; 0x40
 80012c0:	2100      	movs	r1, #0
 80012c2:	4820      	ldr	r0, [pc, #128]	; (8001344 <Send_Status_data+0x8c>)
 80012c4:	f00f fac2 	bl	801084c <memset>
	msg[0] = 0x13;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <Send_Status_data+0x8c>)
 80012ca:	2213      	movs	r2, #19
 80012cc:	701a      	strb	r2, [r3, #0]
	msg[1] = STATUS_ID;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <Send_Status_data+0x8c>)
 80012d0:	2205      	movs	r2, #5
 80012d2:	705a      	strb	r2, [r3, #1]
	msg[2] = 1;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <Send_Status_data+0x8c>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	709a      	strb	r2, [r3, #2]
	msg[3] = (int)avgTemperature;
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <Send_Status_data+0x90>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80012e8:	793a      	ldrb	r2, [r7, #4]
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <Send_Status_data+0x8c>)
 80012ec:	70da      	strb	r2, [r3, #3]
	msg[4] = ((int)avgTemperature >> 8);
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <Send_Status_data+0x90>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f8:	ee17 3a90 	vmov	r3, s15
 80012fc:	121b      	asrs	r3, r3, #8
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b10      	ldr	r3, [pc, #64]	; (8001344 <Send_Status_data+0x8c>)
 8001302:	711a      	strb	r2, [r3, #4]
	msg[5] = avg_speed;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <Send_Status_data+0x94>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800130e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001312:	793b      	ldrb	r3, [r7, #4]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <Send_Status_data+0x8c>)
 8001318:	715a      	strb	r2, [r3, #5]
	msg[6] = 0;
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <Send_Status_data+0x8c>)
 800131c:	2200      	movs	r2, #0
 800131e:	719a      	strb	r2, [r3, #6]
	msg[7] = 0;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <Send_Status_data+0x8c>)
 8001322:	2200      	movs	r2, #0
 8001324:	71da      	strb	r2, [r3, #7]
	msg[63] = 0x12;
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <Send_Status_data+0x8c>)
 8001328:	2212      	movs	r2, #18
 800132a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	osDelay(20);
 800132e:	2014      	movs	r0, #20
 8001330:	f00c f88e 	bl	800d450 <osDelay>
	CDC_Transmit_FS(msg,64);
 8001334:	2140      	movs	r1, #64	; 0x40
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <Send_Status_data+0x8c>)
 8001338:	f00e fde6 	bl	800ff08 <CDC_Transmit_FS>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20008d84 	.word	0x20008d84
 8001348:	200003e0 	.word	0x200003e0
 800134c:	200003f4 	.word	0x200003f4

08001350 <Send_Standby_Status>:


void  Send_Standby_Status()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	memset(msg,0,64);
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	2100      	movs	r1, #0
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <Send_Standby_Status+0x54>)
 800135a:	f00f fa77 	bl	801084c <memset>

		msg[0] = 0x13;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <Send_Standby_Status+0x54>)
 8001360:	2213      	movs	r2, #19
 8001362:	701a      	strb	r2, [r3, #0]
		msg[1] = STATUS_ID;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <Send_Standby_Status+0x54>)
 8001366:	2205      	movs	r2, #5
 8001368:	705a      	strb	r2, [r3, #1]
		msg[2] = 2;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <Send_Standby_Status+0x54>)
 800136c:	2202      	movs	r2, #2
 800136e:	709a      	strb	r2, [r3, #2]
		msg[3] = 0xFF;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <Send_Standby_Status+0x54>)
 8001372:	22ff      	movs	r2, #255	; 0xff
 8001374:	70da      	strb	r2, [r3, #3]
		msg[4] = 0xFF;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <Send_Standby_Status+0x54>)
 8001378:	22ff      	movs	r2, #255	; 0xff
 800137a:	711a      	strb	r2, [r3, #4]
		msg[5] = 0xFF;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <Send_Standby_Status+0x54>)
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	715a      	strb	r2, [r3, #5]
		msg[6] = 0xFF;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <Send_Standby_Status+0x54>)
 8001384:	22ff      	movs	r2, #255	; 0xff
 8001386:	719a      	strb	r2, [r3, #6]
		msg[7] = 0;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <Send_Standby_Status+0x54>)
 800138a:	2200      	movs	r2, #0
 800138c:	71da      	strb	r2, [r3, #7]
		msg[63] = 0x12;
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <Send_Standby_Status+0x54>)
 8001390:	2212      	movs	r2, #18
 8001392:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	CDC_Transmit_FS(msg,64);
 8001396:	2140      	movs	r1, #64	; 0x40
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <Send_Standby_Status+0x54>)
 800139a:	f00e fdb5 	bl	800ff08 <CDC_Transmit_FS>
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20008d84 	.word	0x20008d84

080013a8 <Send_temp_Response>:

void  Send_temp_Response(uint8_t id ,uint8_t data,uint8_t info)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	460b      	mov	r3, r1
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	4613      	mov	r3, r2
 80013b8:	717b      	strb	r3, [r7, #5]
//	static int8_t temp = 100;
	memset(msg,0,64);
 80013ba:	2240      	movs	r2, #64	; 0x40
 80013bc:	2100      	movs	r1, #0
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <Send_temp_Response+0x4c>)
 80013c0:	f00f fa44 	bl	801084c <memset>
	msg[0] = 0x13;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <Send_temp_Response+0x4c>)
 80013c6:	2213      	movs	r2, #19
 80013c8:	701a      	strb	r2, [r3, #0]
	msg[1] = id;
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <Send_temp_Response+0x4c>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	7053      	strb	r3, [r2, #1]
	msg[2] = data;
 80013d0:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <Send_temp_Response+0x4c>)
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	7093      	strb	r3, [r2, #2]
	msg[3] = info;
 80013d6:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <Send_temp_Response+0x4c>)
 80013d8:	797b      	ldrb	r3, [r7, #5]
 80013da:	70d3      	strb	r3, [r2, #3]
	msg[63] = 0x12;
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <Send_temp_Response+0x4c>)
 80013de:	2212      	movs	r2, #18
 80013e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	CDC_Transmit_FS(msg,64);
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	4803      	ldr	r0, [pc, #12]	; (80013f4 <Send_temp_Response+0x4c>)
 80013e8:	f00e fd8e 	bl	800ff08 <CDC_Transmit_FS>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20008d84 	.word	0x20008d84

080013f8 <Send_Error_Msg>:

void  Send_Error_Msg(uint8_t errorNo)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	memset(msg,0,64);
 8001402:	2240      	movs	r2, #64	; 0x40
 8001404:	2100      	movs	r1, #0
 8001406:	480c      	ldr	r0, [pc, #48]	; (8001438 <Send_Error_Msg+0x40>)
 8001408:	f00f fa20 	bl	801084c <memset>
	msg[0] = 0x13;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <Send_Error_Msg+0x40>)
 800140e:	2213      	movs	r2, #19
 8001410:	701a      	strb	r2, [r3, #0]
	msg[1] = ERROR_ID;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <Send_Error_Msg+0x40>)
 8001414:	220a      	movs	r2, #10
 8001416:	705a      	strb	r2, [r3, #1]
	msg[2] = errorNo;
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <Send_Error_Msg+0x40>)
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	7093      	strb	r3, [r2, #2]
	msg[63] = 0x12;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <Send_Error_Msg+0x40>)
 8001420:	2212      	movs	r2, #18
 8001422:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	CDC_Transmit_FS(msg,64);
 8001426:	2140      	movs	r1, #64	; 0x40
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <Send_Error_Msg+0x40>)
 800142a:	f00e fd6d 	bl	800ff08 <CDC_Transmit_FS>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20008d84 	.word	0x20008d84

0800143c <Send_ADR_Cmd>:
/* @brief:  Send Acknowledment Response to USB
 * @params: id->Message ID
 * 			data->Data or Message
 * @return: NOTHING*/
void  Send_ADR_Cmd(void)
{
 800143c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800143e:	af00      	add	r7, sp, #0
	memcpy(msg,and_ack,64);
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <Send_ADR_Cmd+0x3c>)
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <Send_ADR_Cmd+0x40>)
 8001444:	4610      	mov	r0, r2
 8001446:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800144a:	4602      	mov	r2, r0
 800144c:	4619      	mov	r1, r3
 800144e:	f8d1 c000 	ldr.w	ip, [r1]
 8001452:	684e      	ldr	r6, [r1, #4]
 8001454:	688d      	ldr	r5, [r1, #8]
 8001456:	68c9      	ldr	r1, [r1, #12]
 8001458:	f8c2 c000 	str.w	ip, [r2]
 800145c:	6056      	str	r6, [r2, #4]
 800145e:	6095      	str	r5, [r2, #8]
 8001460:	60d1      	str	r1, [r2, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	3010      	adds	r0, #16
 8001466:	42a3      	cmp	r3, r4
 8001468:	d1ef      	bne.n	800144a <Send_ADR_Cmd+0xe>

	CDC_Transmit_FS(msg,64);
 800146a:	2140      	movs	r1, #64	; 0x40
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <Send_ADR_Cmd+0x3c>)
 800146e:	f00e fd4b 	bl	800ff08 <CDC_Transmit_FS>
}
 8001472:	bf00      	nop
 8001474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001476:	bf00      	nop
 8001478:	20008d84 	.word	0x20008d84
 800147c:	2000902c 	.word	0x2000902c

08001480 <stopHeaterBasedOnError>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void stopHeaterBasedOnError(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	if(processError.speedSensorError == 0 && processError.temperatureSensorError == 0 && processError.inductionBoardError == 0)
 8001484:	4b31      	ldr	r3, [pc, #196]	; (800154c <stopHeaterBasedOnError+0xcc>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d115      	bne.n	80014be <stopHeaterBasedOnError+0x3e>
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <stopHeaterBasedOnError+0xcc>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d10e      	bne.n	80014be <stopHeaterBasedOnError+0x3e>
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <stopHeaterBasedOnError+0xcc>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d107      	bne.n	80014be <stopHeaterBasedOnError+0x3e>
	{
		  processError.processStopError = 0;
 80014ae:	4a27      	ldr	r2, [pc, #156]	; (800154c <stopHeaterBasedOnError+0xcc>)
 80014b0:	7893      	ldrb	r3, [r2, #2]
 80014b2:	f36f 0300 	bfc	r3, #0, #1
 80014b6:	7093      	strb	r3, [r2, #2]
		  timerCnt.stopErrorCnt = 0;
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <stopHeaterBasedOnError+0xd0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	809a      	strh	r2, [r3, #4]
	}
	if(processError.speedSensorError == 1 || processError.temperatureSensorError == 1 || processError.inductionBoardError == 1)
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <stopHeaterBasedOnError+0xcc>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10d      	bne.n	80014e8 <stopHeaterBasedOnError+0x68>
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <stopHeaterBasedOnError+0xcc>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <stopHeaterBasedOnError+0x68>
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <stopHeaterBasedOnError+0xcc>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <stopHeaterBasedOnError+0x72>
	{
		processError.processStopError = 1;
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <stopHeaterBasedOnError+0xcc>)
 80014ea:	7893      	ldrb	r3, [r2, #2]
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	7093      	strb	r3, [r2, #2]
	}
	if(processError.processStopError == 1 && processError.errorNumberAndroid <= 15)
 80014f2:	4b16      	ldr	r3, [pc, #88]	; (800154c <stopHeaterBasedOnError+0xcc>)
 80014f4:	789b      	ldrb	r3, [r3, #2]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d019      	beq.n	8001534 <stopHeaterBasedOnError+0xb4>
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <stopHeaterBasedOnError+0xcc>)
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d815      	bhi.n	8001534 <stopHeaterBasedOnError+0xb4>
	{
		Send_Error_Msg(processError.errorNumberAndroid);
 8001508:	4b10      	ldr	r3, [pc, #64]	; (800154c <stopHeaterBasedOnError+0xcc>)
 800150a:	785b      	ldrb	r3, [r3, #1]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff73 	bl	80013f8 <Send_Error_Msg>
		dutyCycle = 0;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <stopHeaterBasedOnError+0xd4>)
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
		drumMotor = dcMotorInit;
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <stopHeaterBasedOnError+0xd8>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
		#if	BS84C12A_DRIVE_ENABLE == 1
			  if(displayData != 'X')
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <stopHeaterBasedOnError+0xdc>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b58      	cmp	r3, #88	; 0x58
 8001526:	d00f      	beq.n	8001548 <stopHeaterBasedOnError+0xc8>
			  {
				  dacSetVoltage(INDUCTION_OFF_COUNT, 0);
 8001528:	2100      	movs	r1, #0
 800152a:	f240 1099 	movw	r0, #409	; 0x199
 800152e:	f002 f861 	bl	80035f4 <dacSetVoltage>
			  if(displayData != 'X')
 8001532:	e009      	b.n	8001548 <stopHeaterBasedOnError+0xc8>
			  {
				 keyPressState = pressOnOff;
			  }
		#endif
	}
	else if(processError.errorNumberAndroid > 15)
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <stopHeaterBasedOnError+0xcc>)
 8001536:	785b      	ldrb	r3, [r3, #1]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d905      	bls.n	8001548 <stopHeaterBasedOnError+0xc8>
	{
		processError.processStopError = 0;
 800153c:	4a03      	ldr	r2, [pc, #12]	; (800154c <stopHeaterBasedOnError+0xcc>)
 800153e:	7893      	ldrb	r3, [r2, #2]
 8001540:	f36f 0300 	bfc	r3, #0, #1
 8001544:	7093      	strb	r3, [r2, #2]
	}
}
 8001546:	e7ff      	b.n	8001548 <stopHeaterBasedOnError+0xc8>
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20008c3c 	.word	0x20008c3c
 8001550:	20008c70 	.word	0x20008c70
 8001554:	20008cdc 	.word	0x20008cdc
 8001558:	20008c59 	.word	0x20008c59
 800155c:	20000389 	.word	0x20000389

08001560 <speedSensorErrorCheck>:
void speedSensorErrorCheck(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	  if(androidProcessStruct.startofCooking == 1)
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <speedSensorErrorCheck+0x60>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d014      	beq.n	800159c <speedSensorErrorCheck+0x3c>
	  {
		  if(timerCnt.speedSensorErrorCnt++ >= SENSOR_ERROR_CHECK_CNT)
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <speedSensorErrorCheck+0x64>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	b2d1      	uxtb	r1, r2
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <speedSensorErrorCheck+0x64>)
 800157c:	7011      	strb	r1, [r2, #0]
 800157e:	2b95      	cmp	r3, #149	; 0x95
 8001580:	d918      	bls.n	80015b4 <speedSensorErrorCheck+0x54>
		  {
			  avg_speed = 0;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <speedSensorErrorCheck+0x68>)
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
			  {
				 keyPressState = pressOnOff;
			  }
		#endif
	#endif
			  processError.errorNumberAndroid = speedSensorError;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <speedSensorErrorCheck+0x6c>)
 800158c:	220b      	movs	r2, #11
 800158e:	705a      	strb	r2, [r3, #1]
			  processError.speedSensorError = 1;
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <speedSensorErrorCheck+0x6c>)
 8001592:	7813      	ldrb	r3, [r2, #0]
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	7013      	strb	r3, [r2, #0]
		  if(timerCnt.speedSensorErrorCnt++ >= 80)
		  {
			  avg_speed = 0;
		  }
	  }
}
 800159a:	e00b      	b.n	80015b4 <speedSensorErrorCheck+0x54>
		  if(timerCnt.speedSensorErrorCnt++ >= 80)
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <speedSensorErrorCheck+0x64>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	b2d1      	uxtb	r1, r2
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <speedSensorErrorCheck+0x64>)
 80015a6:	7011      	strb	r1, [r2, #0]
 80015a8:	2b4f      	cmp	r3, #79	; 0x4f
 80015aa:	d903      	bls.n	80015b4 <speedSensorErrorCheck+0x54>
			  avg_speed = 0;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <speedSensorErrorCheck+0x68>)
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20008c54 	.word	0x20008c54
 80015c4:	20008c70 	.word	0x20008c70
 80015c8:	200003f4 	.word	0x200003f4
 80015cc:	20008c3c 	.word	0x20008c3c

080015d0 <parameterValueAssignment>:
/* @brief:  Function to assign the machine parameter values
 * @params: NOTHING
 * @return: NOTHING*/
void parameterValueAssignment(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
#if ANDROID_MC_SETTINGS == 1
	if(machineSettings.temperatureLevel1 == 0)
 80015d4:	4b87      	ldr	r3, [pc, #540]	; (80017f4 <parameterValueAssignment+0x224>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d103      	bne.n	80015e4 <parameterValueAssignment+0x14>
	{
		deltaTempStruct.deltaLevel1 = DEFAULT_DELTA_TEMP1;
 80015dc:	4b86      	ldr	r3, [pc, #536]	; (80017f8 <parameterValueAssignment+0x228>)
 80015de:	22af      	movs	r2, #175	; 0xaf
 80015e0:	805a      	strh	r2, [r3, #2]
 80015e2:	e003      	b.n	80015ec <parameterValueAssignment+0x1c>
	}
	else
	{
		deltaTempStruct.deltaLevel1 = machineSettings.temperatureLevel1;
 80015e4:	4b83      	ldr	r3, [pc, #524]	; (80017f4 <parameterValueAssignment+0x224>)
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	4b83      	ldr	r3, [pc, #524]	; (80017f8 <parameterValueAssignment+0x228>)
 80015ea:	805a      	strh	r2, [r3, #2]
	}
	if(machineSettings.temperatureLevel2 == 0)
 80015ec:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <parameterValueAssignment+0x224>)
 80015ee:	885b      	ldrh	r3, [r3, #2]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <parameterValueAssignment+0x2c>
	{
		deltaTempStruct.deltaLevel2 = DEFAULT_DELTA_TEMP2;
 80015f4:	4b80      	ldr	r3, [pc, #512]	; (80017f8 <parameterValueAssignment+0x228>)
 80015f6:	2278      	movs	r2, #120	; 0x78
 80015f8:	809a      	strh	r2, [r3, #4]
 80015fa:	e003      	b.n	8001604 <parameterValueAssignment+0x34>
	}
	else
	{
		deltaTempStruct.deltaLevel2 = machineSettings.temperatureLevel2;
 80015fc:	4b7d      	ldr	r3, [pc, #500]	; (80017f4 <parameterValueAssignment+0x224>)
 80015fe:	885a      	ldrh	r2, [r3, #2]
 8001600:	4b7d      	ldr	r3, [pc, #500]	; (80017f8 <parameterValueAssignment+0x228>)
 8001602:	809a      	strh	r2, [r3, #4]
	}
	if(machineSettings.temperatureLevel3 == 0)
 8001604:	4b7b      	ldr	r3, [pc, #492]	; (80017f4 <parameterValueAssignment+0x224>)
 8001606:	889b      	ldrh	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d103      	bne.n	8001614 <parameterValueAssignment+0x44>
	{
		deltaTempStruct.deltaLevel3 = DEFAULT_DELTA_TEMP3;
 800160c:	4b7a      	ldr	r3, [pc, #488]	; (80017f8 <parameterValueAssignment+0x228>)
 800160e:	225a      	movs	r2, #90	; 0x5a
 8001610:	80da      	strh	r2, [r3, #6]
 8001612:	e003      	b.n	800161c <parameterValueAssignment+0x4c>
	}
	else
	{
		deltaTempStruct.deltaLevel3 = machineSettings.temperatureLevel3;
 8001614:	4b77      	ldr	r3, [pc, #476]	; (80017f4 <parameterValueAssignment+0x224>)
 8001616:	889a      	ldrh	r2, [r3, #4]
 8001618:	4b77      	ldr	r3, [pc, #476]	; (80017f8 <parameterValueAssignment+0x228>)
 800161a:	80da      	strh	r2, [r3, #6]
	}
	if(machineSettings.temperatureLevel4 == 0)
 800161c:	4b75      	ldr	r3, [pc, #468]	; (80017f4 <parameterValueAssignment+0x224>)
 800161e:	88db      	ldrh	r3, [r3, #6]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d103      	bne.n	800162c <parameterValueAssignment+0x5c>
	{
		deltaTempStruct.deltaLevel4 = DEFAULT_DELTA_TEMP4;
 8001624:	4b74      	ldr	r3, [pc, #464]	; (80017f8 <parameterValueAssignment+0x228>)
 8001626:	2246      	movs	r2, #70	; 0x46
 8001628:	811a      	strh	r2, [r3, #8]
 800162a:	e003      	b.n	8001634 <parameterValueAssignment+0x64>
	}
	else
	{
		deltaTempStruct.deltaLevel4 = machineSettings.temperatureLevel4;
 800162c:	4b71      	ldr	r3, [pc, #452]	; (80017f4 <parameterValueAssignment+0x224>)
 800162e:	88da      	ldrh	r2, [r3, #6]
 8001630:	4b71      	ldr	r3, [pc, #452]	; (80017f8 <parameterValueAssignment+0x228>)
 8001632:	811a      	strh	r2, [r3, #8]
	}
	if(machineSettings.temperatureLevel5 == 0)
 8001634:	4b6f      	ldr	r3, [pc, #444]	; (80017f4 <parameterValueAssignment+0x224>)
 8001636:	891b      	ldrh	r3, [r3, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d103      	bne.n	8001644 <parameterValueAssignment+0x74>
	{
		deltaTempStruct.deltaLevel5 = DEFAULT_DELTA_TEMP5;
 800163c:	4b6e      	ldr	r3, [pc, #440]	; (80017f8 <parameterValueAssignment+0x228>)
 800163e:	2232      	movs	r2, #50	; 0x32
 8001640:	815a      	strh	r2, [r3, #10]
 8001642:	e003      	b.n	800164c <parameterValueAssignment+0x7c>
	}
	else
	{
		deltaTempStruct.deltaLevel5 = machineSettings.temperatureLevel5;
 8001644:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <parameterValueAssignment+0x224>)
 8001646:	891a      	ldrh	r2, [r3, #8]
 8001648:	4b6b      	ldr	r3, [pc, #428]	; (80017f8 <parameterValueAssignment+0x228>)
 800164a:	815a      	strh	r2, [r3, #10]
	}
	if(machineSettings.temperatureLevel6 == 0)
 800164c:	4b69      	ldr	r3, [pc, #420]	; (80017f4 <parameterValueAssignment+0x224>)
 800164e:	895b      	ldrh	r3, [r3, #10]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d103      	bne.n	800165c <parameterValueAssignment+0x8c>
	{
		deltaTempStruct.deltaLevel6 = DEFAULT_DELTA_TEMP6;
 8001654:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <parameterValueAssignment+0x228>)
 8001656:	2219      	movs	r2, #25
 8001658:	819a      	strh	r2, [r3, #12]
 800165a:	e003      	b.n	8001664 <parameterValueAssignment+0x94>
	}
	else
	{
		deltaTempStruct.deltaLevel6 = machineSettings.temperatureLevel6;
 800165c:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <parameterValueAssignment+0x224>)
 800165e:	895a      	ldrh	r2, [r3, #10]
 8001660:	4b65      	ldr	r3, [pc, #404]	; (80017f8 <parameterValueAssignment+0x228>)
 8001662:	819a      	strh	r2, [r3, #12]
	}
	if(machineSettings.temperatureLevel7 == 0)
 8001664:	4b63      	ldr	r3, [pc, #396]	; (80017f4 <parameterValueAssignment+0x224>)
 8001666:	899b      	ldrh	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d103      	bne.n	8001674 <parameterValueAssignment+0xa4>
	{
		deltaTempStruct.deltaLevel7 = DEFAULT_DELTA_TEMP7;
 800166c:	4b62      	ldr	r3, [pc, #392]	; (80017f8 <parameterValueAssignment+0x228>)
 800166e:	220c      	movs	r2, #12
 8001670:	81da      	strh	r2, [r3, #14]
 8001672:	e003      	b.n	800167c <parameterValueAssignment+0xac>
	}
	else
	{
		deltaTempStruct.deltaLevel7 = machineSettings.temperatureLevel7;
 8001674:	4b5f      	ldr	r3, [pc, #380]	; (80017f4 <parameterValueAssignment+0x224>)
 8001676:	899a      	ldrh	r2, [r3, #12]
 8001678:	4b5f      	ldr	r3, [pc, #380]	; (80017f8 <parameterValueAssignment+0x228>)
 800167a:	81da      	strh	r2, [r3, #14]
	}
	if(machineSettings.temperatureLevel8 == 0)
 800167c:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <parameterValueAssignment+0x224>)
 800167e:	89db      	ldrh	r3, [r3, #14]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d103      	bne.n	800168c <parameterValueAssignment+0xbc>
	{
		deltaTempStruct.deltaLevel8 = DEFAULT_DELTA_TEMP8;
 8001684:	4b5c      	ldr	r3, [pc, #368]	; (80017f8 <parameterValueAssignment+0x228>)
 8001686:	2206      	movs	r2, #6
 8001688:	821a      	strh	r2, [r3, #16]
 800168a:	e003      	b.n	8001694 <parameterValueAssignment+0xc4>
	}
	else
	{
		deltaTempStruct.deltaLevel8 = machineSettings.temperatureLevel8;
 800168c:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <parameterValueAssignment+0x224>)
 800168e:	89da      	ldrh	r2, [r3, #14]
 8001690:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <parameterValueAssignment+0x228>)
 8001692:	821a      	strh	r2, [r3, #16]
	}
	if(machineSettings.temperatureLevel9 == 0)
 8001694:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <parameterValueAssignment+0x224>)
 8001696:	8a1b      	ldrh	r3, [r3, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <parameterValueAssignment+0xd4>
	{
		deltaTempStruct.deltaLevel9 = DEFAULT_DELTA_TEMP9;
 800169c:	4b56      	ldr	r3, [pc, #344]	; (80017f8 <parameterValueAssignment+0x228>)
 800169e:	2203      	movs	r2, #3
 80016a0:	825a      	strh	r2, [r3, #18]
 80016a2:	e003      	b.n	80016ac <parameterValueAssignment+0xdc>
	}
	else
	{
		deltaTempStruct.deltaLevel9 = machineSettings.temperatureLevel9;
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <parameterValueAssignment+0x224>)
 80016a6:	8a1a      	ldrh	r2, [r3, #16]
 80016a8:	4b53      	ldr	r3, [pc, #332]	; (80017f8 <parameterValueAssignment+0x228>)
 80016aa:	825a      	strh	r2, [r3, #18]
//	deltaTempStruct.deltaLevel6 = machineSettings.temperatureLevel6;
//	deltaTempStruct.deltaLevel7 = machineSettings.temperatureLevel7;
//	deltaTempStruct.deltaLevel8 = machineSettings.temperatureLevel8;
//	deltaTempStruct.deltaLevel9 = machineSettings.temperatureLevel9;

	if(machineSettings.wattageLevel1 == 0)
 80016ac:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <parameterValueAssignment+0x224>)
 80016ae:	8a5b      	ldrh	r3, [r3, #18]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d103      	bne.n	80016bc <parameterValueAssignment+0xec>
	{
		deltaTempStruct.deltaWattageLevel1 = DEFAULT_DELTA_WATT1;
 80016b4:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <parameterValueAssignment+0x228>)
 80016b6:	2208      	movs	r2, #8
 80016b8:	829a      	strh	r2, [r3, #20]
 80016ba:	e003      	b.n	80016c4 <parameterValueAssignment+0xf4>
	}
	else
	{
		deltaTempStruct.deltaWattageLevel1 = machineSettings.wattageLevel1;
 80016bc:	4b4d      	ldr	r3, [pc, #308]	; (80017f4 <parameterValueAssignment+0x224>)
 80016be:	8a5a      	ldrh	r2, [r3, #18]
 80016c0:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <parameterValueAssignment+0x228>)
 80016c2:	829a      	strh	r2, [r3, #20]
	}
	if(machineSettings.wattageLevel2 == 0)
 80016c4:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <parameterValueAssignment+0x224>)
 80016c6:	8a9b      	ldrh	r3, [r3, #20]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d103      	bne.n	80016d4 <parameterValueAssignment+0x104>
	{
		deltaTempStruct.deltaWattageLevel2 = DEFAULT_DELTA_WATT2;
 80016cc:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <parameterValueAssignment+0x228>)
 80016ce:	2208      	movs	r2, #8
 80016d0:	82da      	strh	r2, [r3, #22]
 80016d2:	e003      	b.n	80016dc <parameterValueAssignment+0x10c>
	}
	else
	{
		deltaTempStruct.deltaWattageLevel2 = machineSettings.wattageLevel2;
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <parameterValueAssignment+0x224>)
 80016d6:	8a9a      	ldrh	r2, [r3, #20]
 80016d8:	4b47      	ldr	r3, [pc, #284]	; (80017f8 <parameterValueAssignment+0x228>)
 80016da:	82da      	strh	r2, [r3, #22]
	}
	if(machineSettings.wattageLevel3 == 0)
 80016dc:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <parameterValueAssignment+0x224>)
 80016de:	8adb      	ldrh	r3, [r3, #22]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <parameterValueAssignment+0x11c>
	{
		deltaTempStruct.deltaWattageLevel3 = DEFAULT_DELTA_WATT3;
 80016e4:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <parameterValueAssignment+0x228>)
 80016e6:	2208      	movs	r2, #8
 80016e8:	831a      	strh	r2, [r3, #24]
 80016ea:	e003      	b.n	80016f4 <parameterValueAssignment+0x124>
	}
	else
	{
		deltaTempStruct.deltaWattageLevel3 = machineSettings.wattageLevel3;
 80016ec:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <parameterValueAssignment+0x224>)
 80016ee:	8ada      	ldrh	r2, [r3, #22]
 80016f0:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <parameterValueAssignment+0x228>)
 80016f2:	831a      	strh	r2, [r3, #24]
	}
	if(machineSettings.wattageLevel4 == 0)
 80016f4:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <parameterValueAssignment+0x224>)
 80016f6:	8b1b      	ldrh	r3, [r3, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d103      	bne.n	8001704 <parameterValueAssignment+0x134>
	{
		deltaTempStruct.deltaWattageLevel4 = DEFAULT_DELTA_WATT4;
 80016fc:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <parameterValueAssignment+0x228>)
 80016fe:	2207      	movs	r2, #7
 8001700:	835a      	strh	r2, [r3, #26]
 8001702:	e003      	b.n	800170c <parameterValueAssignment+0x13c>
	}
	else
	{
		deltaTempStruct.deltaWattageLevel4 = machineSettings.wattageLevel4;
 8001704:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <parameterValueAssignment+0x224>)
 8001706:	8b1a      	ldrh	r2, [r3, #24]
 8001708:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <parameterValueAssignment+0x228>)
 800170a:	835a      	strh	r2, [r3, #26]
	}
	if(machineSettings.wattageLevel5 == 0)
 800170c:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <parameterValueAssignment+0x224>)
 800170e:	8b5b      	ldrh	r3, [r3, #26]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <parameterValueAssignment+0x14c>
	{
		deltaTempStruct.deltaWattageLevel5 = DEFAULT_DELTA_WATT5;
 8001714:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <parameterValueAssignment+0x228>)
 8001716:	2207      	movs	r2, #7
 8001718:	839a      	strh	r2, [r3, #28]
 800171a:	e003      	b.n	8001724 <parameterValueAssignment+0x154>
	}
	else
	{
		deltaTempStruct.deltaWattageLevel5 = machineSettings.wattageLevel5;
 800171c:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <parameterValueAssignment+0x224>)
 800171e:	8b5a      	ldrh	r2, [r3, #26]
 8001720:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <parameterValueAssignment+0x228>)
 8001722:	839a      	strh	r2, [r3, #28]
	}
	if(machineSettings.wattageLevel6 == 0)
 8001724:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <parameterValueAssignment+0x224>)
 8001726:	8b9b      	ldrh	r3, [r3, #28]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d103      	bne.n	8001734 <parameterValueAssignment+0x164>
	{
		deltaTempStruct.deltaWattageLevel6 = DEFAULT_DELTA_WATT6;
 800172c:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <parameterValueAssignment+0x228>)
 800172e:	2207      	movs	r2, #7
 8001730:	83da      	strh	r2, [r3, #30]
 8001732:	e003      	b.n	800173c <parameterValueAssignment+0x16c>
	}
	else
	{
		deltaTempStruct.deltaWattageLevel6 = machineSettings.wattageLevel6;
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <parameterValueAssignment+0x224>)
 8001736:	8b9a      	ldrh	r2, [r3, #28]
 8001738:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <parameterValueAssignment+0x228>)
 800173a:	83da      	strh	r2, [r3, #30]
	}
	if(machineSettings.wattageLevel7 == 0)
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <parameterValueAssignment+0x224>)
 800173e:	8bdb      	ldrh	r3, [r3, #30]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d103      	bne.n	800174c <parameterValueAssignment+0x17c>
	{
		deltaTempStruct.deltaWattageLevel7 = DEFAULT_DELTA_WATT7;
 8001744:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <parameterValueAssignment+0x228>)
 8001746:	2206      	movs	r2, #6
 8001748:	841a      	strh	r2, [r3, #32]
 800174a:	e003      	b.n	8001754 <parameterValueAssignment+0x184>
	}
	else
	{
		deltaTempStruct.deltaWattageLevel7 = machineSettings.wattageLevel7;
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <parameterValueAssignment+0x224>)
 800174e:	8bda      	ldrh	r2, [r3, #30]
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <parameterValueAssignment+0x228>)
 8001752:	841a      	strh	r2, [r3, #32]
	}
	if(machineSettings.wattageLevel8 == 0)
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <parameterValueAssignment+0x224>)
 8001756:	8c1b      	ldrh	r3, [r3, #32]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <parameterValueAssignment+0x194>
	{
		deltaTempStruct.deltaWattageLevel8 = DEFAULT_DELTA_WATT8;
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <parameterValueAssignment+0x228>)
 800175e:	2206      	movs	r2, #6
 8001760:	845a      	strh	r2, [r3, #34]	; 0x22
 8001762:	e003      	b.n	800176c <parameterValueAssignment+0x19c>
	}
	else
	{
		deltaTempStruct.deltaWattageLevel8 = machineSettings.wattageLevel8;
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <parameterValueAssignment+0x224>)
 8001766:	8c1a      	ldrh	r2, [r3, #32]
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <parameterValueAssignment+0x228>)
 800176a:	845a      	strh	r2, [r3, #34]	; 0x22
	}
	if(machineSettings.wattageLevel9 == 0)
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <parameterValueAssignment+0x224>)
 800176e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001770:	2b00      	cmp	r3, #0
 8001772:	d103      	bne.n	800177c <parameterValueAssignment+0x1ac>
	{
		deltaTempStruct.deltaWattageLevel9 = DEFAULT_DELTA_WATT9;
 8001774:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <parameterValueAssignment+0x228>)
 8001776:	2204      	movs	r2, #4
 8001778:	849a      	strh	r2, [r3, #36]	; 0x24
 800177a:	e003      	b.n	8001784 <parameterValueAssignment+0x1b4>
	}
	else
	{
		deltaTempStruct.deltaWattageLevel9 = machineSettings.wattageLevel9;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <parameterValueAssignment+0x224>)
 800177e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <parameterValueAssignment+0x228>)
 8001782:	849a      	strh	r2, [r3, #36]	; 0x24
	deltaTempStruct.deltaWattageLevel6 = machineSettings.wattageLevel6;
	deltaTempStruct.deltaWattageLevel7 = machineSettings.wattageLevel7;
	deltaTempStruct.deltaWattageLevel8 = machineSettings.wattageLevel8;
	deltaTempStruct.deltaWattageLevel9 = machineSettings.wattageLevel9;*/

	if(miscellaneousSetting.defaultTemperatureAckAuto == 0)
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <parameterValueAssignment+0x22c>)
 8001786:	88db      	ldrh	r3, [r3, #6]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d103      	bne.n	8001794 <parameterValueAssignment+0x1c4>
	{
		miscellaneousSetting.defaultTemperatureAckAuto = DEFAULT_TEMP_ACK_AUTO;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <parameterValueAssignment+0x22c>)
 800178e:	223c      	movs	r2, #60	; 0x3c
 8001790:	80da      	strh	r2, [r3, #6]
 8001792:	e003      	b.n	800179c <parameterValueAssignment+0x1cc>
	}
	else
	{
		miscellaneousSetting.defaultTemperatureAckAuto = miscellaneousSetting.defaultTemperatureAckAuto;
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <parameterValueAssignment+0x22c>)
 8001796:	88da      	ldrh	r2, [r3, #6]
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <parameterValueAssignment+0x22c>)
 800179a:	80da      	strh	r2, [r3, #6]
	}
	if(miscellaneousSetting.defaultTemperatureAckManual == 0)
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <parameterValueAssignment+0x22c>)
 800179e:	891b      	ldrh	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <parameterValueAssignment+0x1dc>
	{
		miscellaneousSetting.defaultTemperatureAckManual = DEFAULT_TEMP_ACK_MANUAL;
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <parameterValueAssignment+0x22c>)
 80017a6:	224b      	movs	r2, #75	; 0x4b
 80017a8:	811a      	strh	r2, [r3, #8]
 80017aa:	e003      	b.n	80017b4 <parameterValueAssignment+0x1e4>
	}
	else
	{
		miscellaneousSetting.defaultTemperatureAckManual = miscellaneousSetting.defaultTemperatureAckManual;
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <parameterValueAssignment+0x22c>)
 80017ae:	891a      	ldrh	r2, [r3, #8]
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <parameterValueAssignment+0x22c>)
 80017b2:	811a      	strh	r2, [r3, #8]
	}
//	machineSettings.defaultTemperatureAckAuto = machineSettings.defaultTemperatureAckAuto;
//	machineSettings.defaultTemperatureAckManual = machineSettings.defaultTemperatureAckManual;
	temperatureSensorOffset.positiveTemperatureOffsetValue = temperatureSensorOffset.positiveTemperatureOffsetValue;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <parameterValueAssignment+0x230>)
 80017b6:	881a      	ldrh	r2, [r3, #0]
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <parameterValueAssignment+0x230>)
 80017ba:	801a      	strh	r2, [r3, #0]
	temperatureSensorOffset.negativeTemperatureOffsetValue = temperatureSensorOffset.negativeTemperatureOffsetValue;
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <parameterValueAssignment+0x230>)
 80017be:	885a      	ldrh	r2, [r3, #2]
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <parameterValueAssignment+0x230>)
 80017c2:	805a      	strh	r2, [r3, #2]
	miscellaneousSetting.speedSensorEnable = miscellaneousSetting.speedSensorEnable;
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <parameterValueAssignment+0x22c>)
 80017c6:	895a      	ldrh	r2, [r3, #10]
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <parameterValueAssignment+0x22c>)
 80017ca:	815a      	strh	r2, [r3, #10]
	if(miscellaneousSetting.speedSensorCorrectionFactor == 0)
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <parameterValueAssignment+0x22c>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d103      	bne.n	80017dc <parameterValueAssignment+0x20c>
	{
		miscellaneousSetting.speedSensorCorrectionFactor = DEFAULT_SPEED_CORRECTION;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <parameterValueAssignment+0x22c>)
 80017d6:	2205      	movs	r2, #5
 80017d8:	801a      	strh	r2, [r3, #0]
 80017da:	e003      	b.n	80017e4 <parameterValueAssignment+0x214>
	}
	else
	{
		miscellaneousSetting.speedSensorCorrectionFactor = miscellaneousSetting.speedSensorCorrectionFactor;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <parameterValueAssignment+0x22c>)
 80017de:	881a      	ldrh	r2, [r3, #0]
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <parameterValueAssignment+0x22c>)
 80017e2:	801a      	strh	r2, [r3, #0]
	}
//	machineSettings.speedSensorCorrectionFactor = machineSettings.speedSensorCorrectionFactor;
	if(miscellaneousSetting.defaultMotorDutyCycleAuto == 0)
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <parameterValueAssignment+0x22c>)
 80017e6:	885b      	ldrh	r3, [r3, #2]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10b      	bne.n	8001804 <parameterValueAssignment+0x234>
	{
		miscellaneousSetting.defaultMotorDutyCycleAuto = DEFAULT_AUTO_DC_LEVEL;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <parameterValueAssignment+0x22c>)
 80017ee:	2203      	movs	r2, #3
 80017f0:	805a      	strh	r2, [r3, #2]
 80017f2:	e00b      	b.n	800180c <parameterValueAssignment+0x23c>
 80017f4:	20008bec 	.word	0x20008bec
 80017f8:	20008c14 	.word	0x20008c14
 80017fc:	20008c40 	.word	0x20008c40
 8001800:	20008c10 	.word	0x20008c10
	}
	else
	{
		miscellaneousSetting.defaultMotorDutyCycleAuto = miscellaneousSetting.defaultMotorDutyCycleAuto;
 8001804:	4b4e      	ldr	r3, [pc, #312]	; (8001940 <parameterValueAssignment+0x370>)
 8001806:	885a      	ldrh	r2, [r3, #2]
 8001808:	4b4d      	ldr	r3, [pc, #308]	; (8001940 <parameterValueAssignment+0x370>)
 800180a:	805a      	strh	r2, [r3, #2]
	}
	if(miscellaneousSetting.defaultMotorDutyCycleManual == 0)
 800180c:	4b4c      	ldr	r3, [pc, #304]	; (8001940 <parameterValueAssignment+0x370>)
 800180e:	889b      	ldrh	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d103      	bne.n	800181c <parameterValueAssignment+0x24c>
	{
		miscellaneousSetting.defaultMotorDutyCycleManual = DEFAULT_MANUAL_DC_LEVEL;
 8001814:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <parameterValueAssignment+0x370>)
 8001816:	2203      	movs	r2, #3
 8001818:	809a      	strh	r2, [r3, #4]
 800181a:	e003      	b.n	8001824 <parameterValueAssignment+0x254>
	}
	else
	{
		miscellaneousSetting.defaultMotorDutyCycleManual = miscellaneousSetting.defaultMotorDutyCycleManual;
 800181c:	4b48      	ldr	r3, [pc, #288]	; (8001940 <parameterValueAssignment+0x370>)
 800181e:	889a      	ldrh	r2, [r3, #4]
 8001820:	4b47      	ldr	r3, [pc, #284]	; (8001940 <parameterValueAssignment+0x370>)
 8001822:	809a      	strh	r2, [r3, #4]
	}
//	machineSettings.defaultMotorDutyCycleAuto = machineSettings.defaultMotorDutyCycleAuto;
//	machineSettings.defaultMotorDutyCycleManual = machineSettings.defaultMotorDutyCycleManual;


	if(miscellaneousSetting.endOfDayCleaningTime == 0)
 8001824:	4b46      	ldr	r3, [pc, #280]	; (8001940 <parameterValueAssignment+0x370>)
 8001826:	89db      	ldrh	r3, [r3, #14]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d103      	bne.n	8001834 <parameterValueAssignment+0x264>
	{
		miscellaneousSetting.endOfDayCleaningTime = DEFAULT_EOD_TIME / TIME_500MS_IN_SEC;
 800182c:	4b44      	ldr	r3, [pc, #272]	; (8001940 <parameterValueAssignment+0x370>)
 800182e:	225a      	movs	r2, #90	; 0x5a
 8001830:	81da      	strh	r2, [r3, #14]
 8001832:	e013      	b.n	800185c <parameterValueAssignment+0x28c>
	}
	else
	{
		miscellaneousSetting.endOfDayCleaningTime = (miscellaneousSetting.endOfDayCleaningTime / TIME_500MS_IN_SEC);
 8001834:	4b42      	ldr	r3, [pc, #264]	; (8001940 <parameterValueAssignment+0x370>)
 8001836:	89db      	ldrh	r3, [r3, #14]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe73 	bl	8000524 <__aeabi_i2d>
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b40      	ldr	r3, [pc, #256]	; (8001944 <parameterValueAssignment+0x374>)
 8001844:	f7ff f802 	bl	800084c <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f9aa 	bl	8000ba8 <__aeabi_d2uiz>
 8001854:	4603      	mov	r3, r0
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b39      	ldr	r3, [pc, #228]	; (8001940 <parameterValueAssignment+0x370>)
 800185a:	81da      	strh	r2, [r3, #14]
	}
	if(miscellaneousSetting.endOfRecipeCleaningTime == 0)
 800185c:	4b38      	ldr	r3, [pc, #224]	; (8001940 <parameterValueAssignment+0x370>)
 800185e:	899b      	ldrh	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <parameterValueAssignment+0x29c>
	{
		miscellaneousSetting.endOfRecipeCleaningTime = DEFAULT_EOR_TIME / TIME_500MS_IN_SEC;
 8001864:	4b36      	ldr	r3, [pc, #216]	; (8001940 <parameterValueAssignment+0x370>)
 8001866:	223c      	movs	r2, #60	; 0x3c
 8001868:	819a      	strh	r2, [r3, #12]
 800186a:	e013      	b.n	8001894 <parameterValueAssignment+0x2c4>
	}
	else
	{
		miscellaneousSetting.endOfRecipeCleaningTime = (miscellaneousSetting.endOfRecipeCleaningTime / TIME_500MS_IN_SEC);
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <parameterValueAssignment+0x370>)
 800186e:	899b      	ldrh	r3, [r3, #12]
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fe57 	bl	8000524 <__aeabi_i2d>
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <parameterValueAssignment+0x374>)
 800187c:	f7fe ffe6 	bl	800084c <__aeabi_ddiv>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff f98e 	bl	8000ba8 <__aeabi_d2uiz>
 800188c:	4603      	mov	r3, r0
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <parameterValueAssignment+0x370>)
 8001892:	819a      	strh	r2, [r3, #12]
	}
	if(miscellaneousSetting.cleanMotorSpeed == 0)
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <parameterValueAssignment+0x370>)
 8001896:	8a1b      	ldrh	r3, [r3, #16]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d103      	bne.n	80018a4 <parameterValueAssignment+0x2d4>
	{
		miscellaneousSetting.cleanMotorSpeed = DEFAULT_MOTOR_CLEANING;
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <parameterValueAssignment+0x370>)
 800189e:	2203      	movs	r2, #3
 80018a0:	821a      	strh	r2, [r3, #16]
 80018a2:	e003      	b.n	80018ac <parameterValueAssignment+0x2dc>
	}
	else
	{
		miscellaneousSetting.cleanMotorSpeed = miscellaneousSetting.cleanMotorSpeed;
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <parameterValueAssignment+0x370>)
 80018a6:	8a1a      	ldrh	r2, [r3, #16]
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <parameterValueAssignment+0x370>)
 80018aa:	821a      	strh	r2, [r3, #16]
//	machineSettings.endOfDayCleaningTime = (machineSettings.endOfDayCleaningTime / 0.5);
//	machineSettings.endOfRecipeCleaningTime = (machineSettings.endOfRecipeCleaningTime / 0.5);
//	machineSettings.cleanMotorSpeed = machineSettings.cleanMotorSpeed;


	if(miscellaneousSetting.speedSensorCorrectionFactor > 0)
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <parameterValueAssignment+0x370>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00c      	beq.n	80018ce <parameterValueAssignment+0x2fe>
	{
		speedCorrectionFactor = ((float) miscellaneousSetting.speedSensorCorrectionFactor / (float)10);
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <parameterValueAssignment+0x370>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018c0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80018c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c8:	4b1f      	ldr	r3, [pc, #124]	; (8001948 <parameterValueAssignment+0x378>)
 80018ca:	edc3 7a00 	vstr	s15, [r3]
	}
	if(miscellaneousSetting.defaultTemperatureAckAuto > 0)
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <parameterValueAssignment+0x370>)
 80018d0:	88db      	ldrh	r3, [r3, #6]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d016      	beq.n	8001904 <parameterValueAssignment+0x334>
	{
		temperatureACKAuto = ((float)miscellaneousSetting.defaultTemperatureAckAuto / (float)100);
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <parameterValueAssignment+0x370>)
 80018d8:	88db      	ldrh	r3, [r3, #6]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018e2:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800194c <parameterValueAssignment+0x37c>
 80018e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <parameterValueAssignment+0x380>)
 80018ec:	edc3 7a00 	vstr	s15, [r3]
		temperatureACKAuto = (1 - temperatureACKAuto);
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <parameterValueAssignment+0x380>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <parameterValueAssignment+0x380>)
 8001900:	edc3 7a00 	vstr	s15, [r3]
	}
	if(miscellaneousSetting.defaultTemperatureAckManual > 0)
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <parameterValueAssignment+0x370>)
 8001906:	891b      	ldrh	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d016      	beq.n	800193a <parameterValueAssignment+0x36a>
	{
		temperatureACKManual = ((float)miscellaneousSetting.defaultTemperatureAckManual / (float)100);
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <parameterValueAssignment+0x370>)
 800190e:	891b      	ldrh	r3, [r3, #8]
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001918:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800194c <parameterValueAssignment+0x37c>
 800191c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <parameterValueAssignment+0x384>)
 8001922:	edc3 7a00 	vstr	s15, [r3]
		temperatureACKManual = (1 - temperatureACKManual);
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <parameterValueAssignment+0x384>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <parameterValueAssignment+0x384>)
 8001936:	edc3 7a00 	vstr	s15, [r3]

	temperatureACKAuto = (1 - temperatureACKAuto);
	temperatureACKManual = (1 - temperatureACKManual);
#endif

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20008c40 	.word	0x20008c40
 8001944:	3fe00000 	.word	0x3fe00000
 8001948:	20009020 	.word	0x20009020
 800194c:	42c80000 	.word	0x42c80000
 8001950:	20009024 	.word	0x20009024
 8001954:	20009028 	.word	0x20009028

08001958 <getSpeed>:
/* @brief:  Function to return  the speed value after averaging
 * @params: NOTHING
 * @return: Speed value in RPM*/
#if SPEED_SENSOR_ENABLE == 1
float getSpeed(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
	const int tim_clock = 10000;										//Timer 3 configured for 1us resolution
 800195e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001962:	607b      	str	r3, [r7, #4]
	const int sec_value = 60;
 8001964:	233c      	movs	r3, #60	; 0x3c
 8001966:	603b      	str	r3, [r7, #0]
	sum_tick = 0;
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <getSpeed+0x6c>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
	avg_tick = 0;
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <getSpeed+0x70>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
	/* Convert the time tick value into frequency,
	 * avg_tick is the time difference period of  2 pulses. Since ticks are in resolution of 1us
	 * (1000000 / tick) -> frequency for 2 tooth
	 * F = (1000000/tick * 65)
	 * */
	gu32_Freq = ((float)(tim_clock)/(gu32_Ticks));						//Calculate the Frequency
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <getSpeed+0x74>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800198a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <getSpeed+0x78>)
 8001990:	edc3 7a00 	vstr	s15, [r3]
	speed_ic = (float)(gu32_Freq * sec_value) ;							//Calculate the speed value
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <getSpeed+0x78>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <getSpeed+0x7c>)
 80019aa:	edc3 7a00 	vstr	s15, [r3]
	return speed_ic;
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <getSpeed+0x7c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	ee07 3a90 	vmov	s15, r3
}
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	20000418 	.word	0x20000418
 80019c8:	2000041c 	.word	0x2000041c
 80019cc:	20000408 	.word	0x20000408
 80019d0:	20000410 	.word	0x20000410
 80019d4:	20000414 	.word	0x20000414

080019d8 <getWattageLevelCount_BS84C12A>:
  * @brief  Function to get the 12-bit dac value to be set for MCP7425
  * @params	level of wattage
  * @retval returns the 12-bit count to be set with DAC for Wattage level mapped with the table
  */
uint16_t getWattageLevelCount_BS84C12A(uint8_t level)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
	if(level >= 0 && level < 10)
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b09      	cmp	r3, #9
 80019e6:	d804      	bhi.n	80019f2 <getWattageLevelCount_BS84C12A+0x1a>
	{
		return wattageLevelDAC[level];
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <getWattageLevelCount_BS84C12A+0x34>)
 80019ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019f0:	e005      	b.n	80019fe <getWattageLevelCount_BS84C12A+0x26>
	}
	else if(level > 10)
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b0a      	cmp	r3, #10
 80019f6:	d901      	bls.n	80019fc <getWattageLevelCount_BS84C12A+0x24>
	{
		return 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <getWattageLevelCount_BS84C12A+0x26>
	}
	else
		return 0;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000000 	.word	0x20000000

08001a10 <getDisplayChar_BS84C12A>:
  * @brief  Function to get the character being displayed on the display
  * @params	charValue : value after getting the data from 7-segment display
  * @retval returns the character being display (or) value of Hex for characters
  */
uint8_t getDisplayChar_BS84C12A(uint8_t charValue)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
	if(charValue == ZERO_BS84C12A)
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2b3f      	cmp	r3, #63	; 0x3f
 8001a1e:	d107      	bne.n	8001a30 <getDisplayChar_BS84C12A+0x20>
	{
		if(bs84c12aInductionError == 1)
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <getDisplayChar_BS84C12A+0x11c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <getDisplayChar_BS84C12A+0x1c>
		{
			return 1;//Disk or Drive failure Error
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e079      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
		else
		{
			return '0';
 8001a2c:	2330      	movs	r3, #48	; 0x30
 8001a2e:	e077      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
	}
	else if(charValue == ONE_BS84C12A)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d107      	bne.n	8001a46 <getDisplayChar_BS84C12A+0x36>
	{
		if(bs84c12aInductionError == 1)
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <getDisplayChar_BS84C12A+0x11c>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <getDisplayChar_BS84C12A+0x32>
		{
			return 2;//Surface Sensor open/short ckt Error
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e06e      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
		else
		{
			return '1';
 8001a42:	2331      	movs	r3, #49	; 0x31
 8001a44:	e06c      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
	}
	else if(charValue ==TWO_BS84C12A)
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2b53      	cmp	r3, #83	; 0x53
 8001a4a:	d107      	bne.n	8001a5c <getDisplayChar_BS84C12A+0x4c>
	{
		if(bs84c12aInductionError == 1)
 8001a4c:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <getDisplayChar_BS84C12A+0x11c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <getDisplayChar_BS84C12A+0x48>
		{
			return 3;//IGBT open/close ckt Error
 8001a54:	2303      	movs	r3, #3
 8001a56:	e063      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
		else
		{
			return '2';
 8001a58:	2332      	movs	r3, #50	; 0x32
 8001a5a:	e061      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
	}
	else if(charValue == THREE_BS84C12A)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	2b47      	cmp	r3, #71	; 0x47
 8001a60:	d107      	bne.n	8001a72 <getDisplayChar_BS84C12A+0x62>
	{
		if(bs84c12aInductionError == 1)
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <getDisplayChar_BS84C12A+0x11c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <getDisplayChar_BS84C12A+0x5e>
		{
			return 4;//Mains is high Error
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	e058      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
		else
		{
			return '3';
 8001a6e:	2333      	movs	r3, #51	; 0x33
 8001a70:	e056      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
	}
	else if(charValue == FOUR_BS84C12A)
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b66      	cmp	r3, #102	; 0x66
 8001a76:	d107      	bne.n	8001a88 <getDisplayChar_BS84C12A+0x78>
	{
		if(bs84c12aInductionError == 1)
 8001a78:	4b2c      	ldr	r3, [pc, #176]	; (8001b2c <getDisplayChar_BS84C12A+0x11c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <getDisplayChar_BS84C12A+0x74>
		{
			return 5;//Mains is low Error
 8001a80:	2305      	movs	r3, #5
 8001a82:	e04d      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
		else
		{
			return '4';
 8001a84:	2334      	movs	r3, #52	; 0x34
 8001a86:	e04b      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
	}
	else if(charValue == FIVE_BS84C12A)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	2b65      	cmp	r3, #101	; 0x65
 8001a8c:	d107      	bne.n	8001a9e <getDisplayChar_BS84C12A+0x8e>
	{
		if(bs84c12aInductionError == 1)
 8001a8e:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <getDisplayChar_BS84C12A+0x11c>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <getDisplayChar_BS84C12A+0x8a>
		{
			return 6;//Furnace sensor over temperature Error
 8001a96:	2306      	movs	r3, #6
 8001a98:	e042      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
		else
		{
			return '5';
 8001a9a:	2335      	movs	r3, #53	; 0x35
 8001a9c:	e040      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
	}
	else if(charValue == SIX_BS84C12A)
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b75      	cmp	r3, #117	; 0x75
 8001aa2:	d107      	bne.n	8001ab4 <getDisplayChar_BS84C12A+0xa4>
	{
		if(bs84c12aInductionError == 1)
 8001aa4:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <getDisplayChar_BS84C12A+0x11c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <getDisplayChar_BS84C12A+0xa0>
		{
			return 7;//IGBT sensor over temperature Error
 8001aac:	2307      	movs	r3, #7
 8001aae:	e037      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
		else
		{
			return '6';
 8001ab0:	2336      	movs	r3, #54	; 0x36
 8001ab2:	e035      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
	}
	else if(charValue == SEVEN_BS84C12A)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	2b07      	cmp	r3, #7
 8001ab8:	d101      	bne.n	8001abe <getDisplayChar_BS84C12A+0xae>
	{
		return '7';
 8001aba:	2337      	movs	r3, #55	; 0x37
 8001abc:	e030      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
	}
	else if(charValue == EIGHT_BS84C12A)
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	2b77      	cmp	r3, #119	; 0x77
 8001ac2:	d107      	bne.n	8001ad4 <getDisplayChar_BS84C12A+0xc4>
	{
		if(bs84c12aInductionError == 1)
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <getDisplayChar_BS84C12A+0x11c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <getDisplayChar_BS84C12A+0xc0>
		{
			return 9;//Communication Error
 8001acc:	2309      	movs	r3, #9
 8001ace:	e027      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
		else
		{
			return '8';
 8001ad0:	2338      	movs	r3, #56	; 0x38
 8001ad2:	e025      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
	}
	else if(charValue == NINE_BS84C12A)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b67      	cmp	r3, #103	; 0x67
 8001ad8:	d101      	bne.n	8001ade <getDisplayChar_BS84C12A+0xce>
	{
		return '9';
 8001ada:	2339      	movs	r3, #57	; 0x39
 8001adc:	e020      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
	}
	else if(charValue == ERROR_BS84C12A)
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b71      	cmp	r3, #113	; 0x71
 8001ae2:	d111      	bne.n	8001b08 <getDisplayChar_BS84C12A+0xf8>
	{
		timerCnt.inductionErrorCnt++;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <getDisplayChar_BS84C12A+0x120>)
 8001ae6:	78db      	ldrb	r3, [r3, #3]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <getDisplayChar_BS84C12A+0x120>)
 8001aee:	70da      	strb	r2, [r3, #3]
		if(timerCnt.inductionErrorCnt >= 10)
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <getDisplayChar_BS84C12A+0x120>)
 8001af2:	78db      	ldrb	r3, [r3, #3]
 8001af4:	2b09      	cmp	r3, #9
 8001af6:	d905      	bls.n	8001b04 <getDisplayChar_BS84C12A+0xf4>
		{
			bs84c12aInductionError = 1;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <getDisplayChar_BS84C12A+0x11c>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
			timerCnt.inductionErrorCnt = 0;
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <getDisplayChar_BS84C12A+0x120>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	70da      	strb	r2, [r3, #3]
		}
		return 'E';
 8001b04:	2345      	movs	r3, #69	; 0x45
 8001b06:	e00b      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
	}
	else if(charValue == DASH_BS84C12A)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	2b40      	cmp	r3, #64	; 0x40
 8001b0c:	d107      	bne.n	8001b1e <getDisplayChar_BS84C12A+0x10e>
	{
		if(bs84c12aInductionError == 1)
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <getDisplayChar_BS84C12A+0x11c>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <getDisplayChar_BS84C12A+0x10a>
		{
			return 8;//Wok Error
 8001b16:	2308      	movs	r3, #8
 8001b18:	e002      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
		else
		{
			return '-';
 8001b1a:	232d      	movs	r3, #45	; 0x2d
 8001b1c:	e000      	b.n	8001b20 <getDisplayChar_BS84C12A+0x110>
		}
	}
	else
	{
		return  'X';
 8001b1e:	2358      	movs	r3, #88	; 0x58
	{
		charValue &= ~(1 << 6);
	}
	charValue &= ~(1 << 7);
	#endif
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	20008c7a 	.word	0x20008c7a
 8001b30:	20008c70 	.word	0x20008c70

08001b34 <getDCMotorlevels>:
  * @brief  Function to get dutycycle for the dc motor
  * @params	dc motor level to be set
  * @retval returns the dutycycle to be set
  */
uint8_t getDCMotorlevels(uint8_t level)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
	switch(level)
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d81b      	bhi.n	8001b7c <getDCMotorlevels+0x48>
 8001b44:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <getDCMotorlevels+0x18>)
 8001b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4a:	bf00      	nop
 8001b4c:	08001b65 	.word	0x08001b65
 8001b50:	08001b69 	.word	0x08001b69
 8001b54:	08001b6d 	.word	0x08001b6d
 8001b58:	08001b71 	.word	0x08001b71
 8001b5c:	08001b75 	.word	0x08001b75
 8001b60:	08001b79 	.word	0x08001b79
	{
		case 0:
			 return 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	e00a      	b.n	8001b7e <getDCMotorlevels+0x4a>
			 break;
		case 1:
			 return 30;
 8001b68:	231e      	movs	r3, #30
 8001b6a:	e008      	b.n	8001b7e <getDCMotorlevels+0x4a>
			 break;
		case 2:
			 return 45;
 8001b6c:	232d      	movs	r3, #45	; 0x2d
 8001b6e:	e006      	b.n	8001b7e <getDCMotorlevels+0x4a>
			 break;
		case 3:
			 return 60;
 8001b70:	233c      	movs	r3, #60	; 0x3c
 8001b72:	e004      	b.n	8001b7e <getDCMotorlevels+0x4a>
			 break;
		case 4:
			 return 80;
 8001b74:	2350      	movs	r3, #80	; 0x50
 8001b76:	e002      	b.n	8001b7e <getDCMotorlevels+0x4a>
			 break;
		case 5:
			 return 100;
 8001b78:	2364      	movs	r3, #100	; 0x64
 8001b7a:	e000      	b.n	8001b7e <getDCMotorlevels+0x4a>
			 break;
		default:
			return 0;
 8001b7c:	2300      	movs	r3, #0
			break;
	}
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop

08001b8c <Process_WOKIE_Control>:
  * @params	cmd_id1 : ID for controlling parameter
  * 		data : data to be set (for e.g. motor level, wattage level, temperature value)
  * @retval NOTHING
  */
void Process_WOKIE_Control(uint8_t cmd_id1, uint16_t  data)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	460a      	mov	r2, r1
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	80bb      	strh	r3, [r7, #4]
	if(cmd_id1 == HEATER_ON_WATT)//level 1 - 10
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d125      	bne.n	8001bee <Process_WOKIE_Control+0x62>
	{
		 wattageMode.valueFromAndroid  = data;
 8001ba2:	4a65      	ldr	r2, [pc, #404]	; (8001d38 <Process_WOKIE_Control+0x1ac>)
 8001ba4:	88bb      	ldrh	r3, [r7, #4]
 8001ba6:	8013      	strh	r3, [r2, #0]
		 if(wattageMode.valueToSet >= 500)
		 {
			 initialOnOffCnt = 0;
		 }
#elif BS84C12A_DRIVE_ENABLE == 1
		 wattageLevel_BS84C12A = wattageMode.valueFromAndroid;
 8001ba8:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <Process_WOKIE_Control+0x1ac>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b63      	ldr	r3, [pc, #396]	; (8001d3c <Process_WOKIE_Control+0x1b0>)
 8001bb0:	701a      	strb	r2, [r3, #0]
		 wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(wattageLevel_BS84C12A);
 8001bb2:	4b62      	ldr	r3, [pc, #392]	; (8001d3c <Process_WOKIE_Control+0x1b0>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff0e 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b5f      	ldr	r3, [pc, #380]	; (8001d40 <Process_WOKIE_Control+0x1b4>)
 8001bc2:	801a      	strh	r2, [r3, #0]
//		  dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
#endif
		 inductionMode.wattageMode = 1;
 8001bc4:	4a5f      	ldr	r2, [pc, #380]	; (8001d44 <Process_WOKIE_Control+0x1b8>)
 8001bc6:	7813      	ldrb	r3, [r2, #0]
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	7013      	strb	r3, [r2, #0]
		 inductionMode.temperatureMode = 0;
 8001bce:	4a5d      	ldr	r2, [pc, #372]	; (8001d44 <Process_WOKIE_Control+0x1b8>)
 8001bd0:	7813      	ldrb	r3, [r2, #0]
 8001bd2:	f36f 0300 	bfc	r3, #0, #1
 8001bd6:	7013      	strb	r3, [r2, #0]
		 Send_ADR_Cmd();
 8001bd8:	f7ff fc30 	bl	800143c <Send_ADR_Cmd>
		 osDelay(10);
 8001bdc:	200a      	movs	r0, #10
 8001bde:	f00b fc37 	bl	800d450 <osDelay>
		 memset(and_ack, 0, 64);
 8001be2:	2240      	movs	r2, #64	; 0x40
 8001be4:	2100      	movs	r1, #0
 8001be6:	4858      	ldr	r0, [pc, #352]	; (8001d48 <Process_WOKIE_Control+0x1bc>)
 8001be8:	f00e fe30 	bl	801084c <memset>
	{
		Send_ADR_Cmd();
		osDelay(15);
		memset(and_ack, 0, 64);
	}
}
 8001bec:	e0a0      	b.n	8001d30 <Process_WOKIE_Control+0x1a4>
	else if(cmd_id1 == HEATER_ON_TEMP)
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d13d      	bne.n	8001c70 <Process_WOKIE_Control+0xe4>
		 wattageMode.valueToSet = 0;
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <Process_WOKIE_Control+0x1ac>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	805a      	strh	r2, [r3, #2]
		 inductionMode.temperatureMode = 1;
 8001bfa:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <Process_WOKIE_Control+0x1b8>)
 8001bfc:	7813      	ldrb	r3, [r2, #0]
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	7013      	strb	r3, [r2, #0]
		 inductionMode.wattageMode = 0;
 8001c04:	4a4f      	ldr	r2, [pc, #316]	; (8001d44 <Process_WOKIE_Control+0x1b8>)
 8001c06:	7813      	ldrb	r3, [r2, #0]
 8001c08:	f36f 0341 	bfc	r3, #1, #1
 8001c0c:	7013      	strb	r3, [r2, #0]
		 temperatureMode.valueFromAndroid  = data;
 8001c0e:	4a4f      	ldr	r2, [pc, #316]	; (8001d4c <Process_WOKIE_Control+0x1c0>)
 8001c10:	88bb      	ldrh	r3, [r7, #4]
 8001c12:	8013      	strh	r3, [r2, #0]
		 temperatureMode.valueToSet = temperatureMode.valueFromAndroid;
 8001c14:	4b4d      	ldr	r3, [pc, #308]	; (8001d4c <Process_WOKIE_Control+0x1c0>)
 8001c16:	881a      	ldrh	r2, [r3, #0]
 8001c18:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <Process_WOKIE_Control+0x1c0>)
 8001c1a:	805a      	strh	r2, [r3, #2]
		 if(androidProcessStruct.sendTempAckOnce == 0 && androidProcessStruct.manualMode == 1/* && autoMode == 0*/)
 8001c1c:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <Process_WOKIE_Control+0x1c4>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d112      	bne.n	8001c50 <Process_WOKIE_Control+0xc4>
 8001c2a:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <Process_WOKIE_Control+0x1c4>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00b      	beq.n	8001c50 <Process_WOKIE_Control+0xc4>
			 temp_raise = 1;
 8001c38:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <Process_WOKIE_Control+0x1c8>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
			 Send_temp_Response(INSTRUCTION_SET,2,1);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2102      	movs	r1, #2
 8001c42:	2004      	movs	r0, #4
 8001c44:	f7ff fbb0 	bl	80013a8 <Send_temp_Response>
			 osDelay(15);
 8001c48:	200f      	movs	r0, #15
 8001c4a:	f00b fc01 	bl	800d450 <osDelay>
}
 8001c4e:	e06f      	b.n	8001d30 <Process_WOKIE_Control+0x1a4>
		 else if(androidProcessStruct.sendTempAckOnce == 1)
 8001c50:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <Process_WOKIE_Control+0x1c4>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d068      	beq.n	8001d30 <Process_WOKIE_Control+0x1a4>
			 Send_temp_Response(INSTRUCTION_SET,2,3);
 8001c5e:	2203      	movs	r2, #3
 8001c60:	2102      	movs	r1, #2
 8001c62:	2004      	movs	r0, #4
 8001c64:	f7ff fba0 	bl	80013a8 <Send_temp_Response>
			 osDelay(15);
 8001c68:	200f      	movs	r0, #15
 8001c6a:	f00b fbf1 	bl	800d450 <osDelay>
}
 8001c6e:	e05f      	b.n	8001d30 <Process_WOKIE_Control+0x1a4>
	else if(cmd_id1==ROTATE_DRUM)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d11a      	bne.n	8001cac <Process_WOKIE_Control+0x120>
		 dutyCycle = getDCMotorlevels(data);
 8001c76:	88bb      	ldrh	r3, [r7, #4]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff ff5a 	bl	8001b34 <getDCMotorlevels>
 8001c80:	4603      	mov	r3, r0
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c8a:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <Process_WOKIE_Control+0x1cc>)
 8001c8c:	edc3 7a00 	vstr	s15, [r3]
		 drumMotor = dcMotorInit;
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <Process_WOKIE_Control+0x1d0>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
		 Send_ADR_Cmd();
 8001c96:	f7ff fbd1 	bl	800143c <Send_ADR_Cmd>
		 osDelay(15);
 8001c9a:	200f      	movs	r0, #15
 8001c9c:	f00b fbd8 	bl	800d450 <osDelay>
		 memset(and_ack, 0, 64);
 8001ca0:	2240      	movs	r2, #64	; 0x40
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4828      	ldr	r0, [pc, #160]	; (8001d48 <Process_WOKIE_Control+0x1bc>)
 8001ca6:	f00e fdd1 	bl	801084c <memset>
}
 8001caa:	e041      	b.n	8001d30 <Process_WOKIE_Control+0x1a4>
	else if(cmd_id1==HEATER_OFF)
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d11c      	bne.n	8001cec <Process_WOKIE_Control+0x160>
		 wattageLevel_BS84C12A=0;
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <Process_WOKIE_Control+0x1b0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
		 wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(wattageLevel_BS84C12A);
 8001cb8:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <Process_WOKIE_Control+0x1b0>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fe8b 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <Process_WOKIE_Control+0x1b4>)
 8001cc8:	801a      	strh	r2, [r3, #0]
		 dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8001cca:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <Process_WOKIE_Control+0x1b4>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fc8f 	bl	80035f4 <dacSetVoltage>
		Send_ADR_Cmd();
 8001cd6:	f7ff fbb1 	bl	800143c <Send_ADR_Cmd>
		osDelay(15);
 8001cda:	200f      	movs	r0, #15
 8001cdc:	f00b fbb8 	bl	800d450 <osDelay>
		memset(and_ack, 0, 64);
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4818      	ldr	r0, [pc, #96]	; (8001d48 <Process_WOKIE_Control+0x1bc>)
 8001ce6:	f00e fdb1 	bl	801084c <memset>
}
 8001cea:	e021      	b.n	8001d30 <Process_WOKIE_Control+0x1a4>
	else if(cmd_id1==ROTATION_OFF)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d111      	bne.n	8001d16 <Process_WOKIE_Control+0x18a>
		dutyCycle = 0;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <Process_WOKIE_Control+0x1cc>)
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
		drumMotor = dcMotorInit;
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <Process_WOKIE_Control+0x1d0>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
		Send_ADR_Cmd();
 8001d00:	f7ff fb9c 	bl	800143c <Send_ADR_Cmd>
		osDelay(15);
 8001d04:	200f      	movs	r0, #15
 8001d06:	f00b fba3 	bl	800d450 <osDelay>
		memset(and_ack, 0, 64);
 8001d0a:	2240      	movs	r2, #64	; 0x40
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	480e      	ldr	r0, [pc, #56]	; (8001d48 <Process_WOKIE_Control+0x1bc>)
 8001d10:	f00e fd9c 	bl	801084c <memset>
}
 8001d14:	e00c      	b.n	8001d30 <Process_WOKIE_Control+0x1a4>
	else if(cmd_id1==TOSS)
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b06      	cmp	r3, #6
 8001d1a:	d109      	bne.n	8001d30 <Process_WOKIE_Control+0x1a4>
		Send_ADR_Cmd();
 8001d1c:	f7ff fb8e 	bl	800143c <Send_ADR_Cmd>
		osDelay(15);
 8001d20:	200f      	movs	r0, #15
 8001d22:	f00b fb95 	bl	800d450 <osDelay>
		memset(and_ack, 0, 64);
 8001d26:	2240      	movs	r2, #64	; 0x40
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4807      	ldr	r0, [pc, #28]	; (8001d48 <Process_WOKIE_Control+0x1bc>)
 8001d2c:	f00e fd8e 	bl	801084c <memset>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20008c68 	.word	0x20008c68
 8001d3c:	20008f6c 	.word	0x20008f6c
 8001d40:	20008c78 	.word	0x20008c78
 8001d44:	20008c5c 	.word	0x20008c5c
 8001d48:	2000902c 	.word	0x2000902c
 8001d4c:	20008c60 	.word	0x20008c60
 8001d50:	20008c54 	.word	0x20008c54
 8001d54:	20000388 	.word	0x20000388
 8001d58:	20008cdc 	.word	0x20008cdc
 8001d5c:	20008c59 	.word	0x20008c59

08001d60 <temperatureControlCurve>:
  * @params	setTemperatureValue : Set temperature Value
  * 		currentTemperature : Current temperature of Drum
  * @retval NOTHING
  */
void temperatureControlCurve(uint16_t setTemperatureValue, uint16_t currentTemperature)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	460a      	mov	r2, r1
 8001d6a:	80fb      	strh	r3, [r7, #6]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	80bb      	strh	r3, [r7, #4]
#if	DELTA_METHOD == 1
	deltaTempStruct.deltaTemperature = (setTemperatureValue - currentTemperature);
 8001d70:	88fa      	ldrh	r2, [r7, #6]
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b9d      	ldr	r3, [pc, #628]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001d7a:	801a      	strh	r2, [r3, #0]
	if(deltaTempStruct.deltaTemperature >= deltaTempStruct.deltaLevel1  && deltaTempStruct.deltaTemperature <= 300)
 8001d7c:	4b9c      	ldr	r3, [pc, #624]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001d7e:	881a      	ldrh	r2, [r3, #0]
 8001d80:	4b9b      	ldr	r3, [pc, #620]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001d82:	885b      	ldrh	r3, [r3, #2]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d31b      	bcc.n	8001dc0 <temperatureControlCurve+0x60>
 8001d88:	4b99      	ldr	r3, [pc, #612]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d90:	d816      	bhi.n	8001dc0 <temperatureControlCurve+0x60>
	{
		temperatureLevelIndicate = level1;
 8001d92:	4b98      	ldr	r3, [pc, #608]	; (8001ff4 <temperatureControlCurve+0x294>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
#if			TM1668_DRIVE_ENABLE
		wattageMode.valueToSet = wattageGreenInLevels(deltaTempStruct.deltaWattageLevel1);
#elif		BS84C12A_DRIVE_ENABLE == 1
		wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(deltaTempStruct.deltaWattageLevel1);
 8001d98:	4b95      	ldr	r3, [pc, #596]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001d9a:	8a9b      	ldrh	r3, [r3, #20]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fe1a 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 8001da4:	4603      	mov	r3, r0
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b93      	ldr	r3, [pc, #588]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001daa:	801a      	strh	r2, [r3, #0]
		dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8001dac:	4b92      	ldr	r3, [pc, #584]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fc1e 	bl	80035f4 <dacSetVoltage>
		  osDelay(20);
 8001db8:	2014      	movs	r0, #20
 8001dba:	f00b fb49 	bl	800d450 <osDelay>
 8001dbe:	e15a      	b.n	8002076 <temperatureControlCurve+0x316>
#endif
	}
	else if(deltaTempStruct.deltaTemperature >= deltaTempStruct.deltaLevel2 && deltaTempStruct.deltaTemperature < deltaTempStruct.deltaLevel1 && deltaTempStruct.deltaTemperature <= 300)
 8001dc0:	4b8b      	ldr	r3, [pc, #556]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001dc2:	881a      	ldrh	r2, [r3, #0]
 8001dc4:	4b8a      	ldr	r3, [pc, #552]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001dc6:	889b      	ldrh	r3, [r3, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d321      	bcc.n	8001e10 <temperatureControlCurve+0xb0>
 8001dcc:	4b88      	ldr	r3, [pc, #544]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001dce:	881a      	ldrh	r2, [r3, #0]
 8001dd0:	4b87      	ldr	r3, [pc, #540]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001dd2:	885b      	ldrh	r3, [r3, #2]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d21b      	bcs.n	8001e10 <temperatureControlCurve+0xb0>
 8001dd8:	4b85      	ldr	r3, [pc, #532]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001de0:	d816      	bhi.n	8001e10 <temperatureControlCurve+0xb0>
	{
		temperatureLevelIndicate = level2;
 8001de2:	4b84      	ldr	r3, [pc, #528]	; (8001ff4 <temperatureControlCurve+0x294>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
#if			TM1668_DRIVE_ENABLE
		wattageMode.valueToSet = wattageGreenInLevels(deltaTempStruct.deltaWattageLevel2);
#elif		BS84C12A_DRIVE_ENABLE == 1
		wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(deltaTempStruct.deltaWattageLevel2);
 8001de8:	4b81      	ldr	r3, [pc, #516]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001dea:	8adb      	ldrh	r3, [r3, #22]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fdf2 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b7f      	ldr	r3, [pc, #508]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001dfa:	801a      	strh	r2, [r3, #0]
		dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8001dfc:	4b7e      	ldr	r3, [pc, #504]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 fbf6 	bl	80035f4 <dacSetVoltage>
		  osDelay(20);
 8001e08:	2014      	movs	r0, #20
 8001e0a:	f00b fb21 	bl	800d450 <osDelay>
 8001e0e:	e132      	b.n	8002076 <temperatureControlCurve+0x316>
#endif
	}
	else if(deltaTempStruct.deltaTemperature >= deltaTempStruct.deltaLevel3 && deltaTempStruct.deltaTemperature < deltaTempStruct.deltaLevel2 && deltaTempStruct.deltaTemperature <= 300)
 8001e10:	4b77      	ldr	r3, [pc, #476]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e12:	881a      	ldrh	r2, [r3, #0]
 8001e14:	4b76      	ldr	r3, [pc, #472]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e16:	88db      	ldrh	r3, [r3, #6]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d321      	bcc.n	8001e60 <temperatureControlCurve+0x100>
 8001e1c:	4b74      	ldr	r3, [pc, #464]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e1e:	881a      	ldrh	r2, [r3, #0]
 8001e20:	4b73      	ldr	r3, [pc, #460]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e22:	889b      	ldrh	r3, [r3, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d21b      	bcs.n	8001e60 <temperatureControlCurve+0x100>
 8001e28:	4b71      	ldr	r3, [pc, #452]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e30:	d816      	bhi.n	8001e60 <temperatureControlCurve+0x100>
	{
		temperatureLevelIndicate = level3;
 8001e32:	4b70      	ldr	r3, [pc, #448]	; (8001ff4 <temperatureControlCurve+0x294>)
 8001e34:	2202      	movs	r2, #2
 8001e36:	701a      	strb	r2, [r3, #0]
#if			TM1668_DRIVE_ENABLE
		wattageMode.valueToSet = wattageGreenInLevels(deltaTempStruct.deltaWattageLevel3);
#elif		BS84C12A_DRIVE_ENABLE == 1
		wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(deltaTempStruct.deltaWattageLevel3);
 8001e38:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e3a:	8b1b      	ldrh	r3, [r3, #24]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fdca 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001e4a:	801a      	strh	r2, [r3, #0]
		dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f001 fbce 	bl	80035f4 <dacSetVoltage>
		  osDelay(20);
 8001e58:	2014      	movs	r0, #20
 8001e5a:	f00b faf9 	bl	800d450 <osDelay>
 8001e5e:	e10a      	b.n	8002076 <temperatureControlCurve+0x316>
#endif
	}
	else if(deltaTempStruct.deltaTemperature >= deltaTempStruct.deltaLevel4 && deltaTempStruct.deltaTemperature < deltaTempStruct.deltaLevel3 && deltaTempStruct.deltaTemperature <= 300)
 8001e60:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e62:	881a      	ldrh	r2, [r3, #0]
 8001e64:	4b62      	ldr	r3, [pc, #392]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e66:	891b      	ldrh	r3, [r3, #8]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d321      	bcc.n	8001eb0 <temperatureControlCurve+0x150>
 8001e6c:	4b60      	ldr	r3, [pc, #384]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e6e:	881a      	ldrh	r2, [r3, #0]
 8001e70:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e72:	88db      	ldrh	r3, [r3, #6]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d21b      	bcs.n	8001eb0 <temperatureControlCurve+0x150>
 8001e78:	4b5d      	ldr	r3, [pc, #372]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e80:	d816      	bhi.n	8001eb0 <temperatureControlCurve+0x150>
	{
		temperatureLevelIndicate = level4;
 8001e82:	4b5c      	ldr	r3, [pc, #368]	; (8001ff4 <temperatureControlCurve+0x294>)
 8001e84:	2203      	movs	r2, #3
 8001e86:	701a      	strb	r2, [r3, #0]
#if			TM1668_DRIVE_ENABLE
		wattageMode.valueToSet = wattageGreenInLevels(deltaTempStruct.deltaWattageLevel4);
#elif		BS84C12A_DRIVE_ENABLE == 1
		wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(deltaTempStruct.deltaWattageLevel4);
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001e8a:	8b5b      	ldrh	r3, [r3, #26]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fda2 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001e9a:	801a      	strh	r2, [r3, #0]
		dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8001e9c:	4b56      	ldr	r3, [pc, #344]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f001 fba6 	bl	80035f4 <dacSetVoltage>
		  osDelay(20);
 8001ea8:	2014      	movs	r0, #20
 8001eaa:	f00b fad1 	bl	800d450 <osDelay>
 8001eae:	e0e2      	b.n	8002076 <temperatureControlCurve+0x316>
#endif
	}
	else if(deltaTempStruct.deltaTemperature >= deltaTempStruct.deltaLevel5 && deltaTempStruct.deltaTemperature < deltaTempStruct.deltaLevel4 && deltaTempStruct.deltaTemperature <= 300)
 8001eb0:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001eb2:	881a      	ldrh	r2, [r3, #0]
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001eb6:	895b      	ldrh	r3, [r3, #10]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d321      	bcc.n	8001f00 <temperatureControlCurve+0x1a0>
 8001ebc:	4b4c      	ldr	r3, [pc, #304]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001ebe:	881a      	ldrh	r2, [r3, #0]
 8001ec0:	4b4b      	ldr	r3, [pc, #300]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001ec2:	891b      	ldrh	r3, [r3, #8]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d21b      	bcs.n	8001f00 <temperatureControlCurve+0x1a0>
 8001ec8:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ed0:	d816      	bhi.n	8001f00 <temperatureControlCurve+0x1a0>
	{
		temperatureLevelIndicate = level5;
 8001ed2:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <temperatureControlCurve+0x294>)
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	701a      	strb	r2, [r3, #0]
#if			TM1668_DRIVE_ENABLE
		wattageMode.valueToSet = wattageGreenInLevels(deltaTempStruct.deltaWattageLevel5);
#elif		BS84C12A_DRIVE_ENABLE == 1
		wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(deltaTempStruct.deltaWattageLevel5);
 8001ed8:	4b45      	ldr	r3, [pc, #276]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001eda:	8b9b      	ldrh	r3, [r3, #28]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fd7a 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001eea:	801a      	strh	r2, [r3, #0]
		dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8001eec:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f001 fb7e 	bl	80035f4 <dacSetVoltage>
		  osDelay(20);
 8001ef8:	2014      	movs	r0, #20
 8001efa:	f00b faa9 	bl	800d450 <osDelay>
 8001efe:	e0ba      	b.n	8002076 <temperatureControlCurve+0x316>
#endif
	}
	else if(deltaTempStruct.deltaTemperature >= deltaTempStruct.deltaLevel6 && deltaTempStruct.deltaTemperature < deltaTempStruct.deltaLevel5 && deltaTempStruct.deltaTemperature <= 300)
 8001f00:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f02:	881a      	ldrh	r2, [r3, #0]
 8001f04:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f06:	899b      	ldrh	r3, [r3, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d321      	bcc.n	8001f50 <temperatureControlCurve+0x1f0>
 8001f0c:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f0e:	881a      	ldrh	r2, [r3, #0]
 8001f10:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f12:	895b      	ldrh	r3, [r3, #10]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d21b      	bcs.n	8001f50 <temperatureControlCurve+0x1f0>
 8001f18:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001f20:	d816      	bhi.n	8001f50 <temperatureControlCurve+0x1f0>
	{
		temperatureLevelIndicate = level6;
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <temperatureControlCurve+0x294>)
 8001f24:	2205      	movs	r2, #5
 8001f26:	701a      	strb	r2, [r3, #0]
#if			TM1668_DRIVE_ENABLE
		wattageMode.valueToSet = wattageGreenInLevels(deltaTempStruct.deltaWattageLevel6);
#elif		BS84C12A_DRIVE_ENABLE == 1
		wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(deltaTempStruct.deltaWattageLevel6);
 8001f28:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f2a:	8bdb      	ldrh	r3, [r3, #30]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fd52 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001f3a:	801a      	strh	r2, [r3, #0]
		dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 fb56 	bl	80035f4 <dacSetVoltage>
		  osDelay(20);
 8001f48:	2014      	movs	r0, #20
 8001f4a:	f00b fa81 	bl	800d450 <osDelay>
 8001f4e:	e092      	b.n	8002076 <temperatureControlCurve+0x316>
#endif
	}
	else if(deltaTempStruct.deltaTemperature >= deltaTempStruct.deltaLevel7 && deltaTempStruct.deltaTemperature < deltaTempStruct.deltaLevel6 && deltaTempStruct.deltaTemperature <= 300)
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f52:	881a      	ldrh	r2, [r3, #0]
 8001f54:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f56:	89db      	ldrh	r3, [r3, #14]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d321      	bcc.n	8001fa0 <temperatureControlCurve+0x240>
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f62:	899b      	ldrh	r3, [r3, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d21b      	bcs.n	8001fa0 <temperatureControlCurve+0x240>
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001f70:	d816      	bhi.n	8001fa0 <temperatureControlCurve+0x240>
	{
		temperatureLevelIndicate = level7;
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <temperatureControlCurve+0x294>)
 8001f74:	2206      	movs	r2, #6
 8001f76:	701a      	strb	r2, [r3, #0]
#if			TM1668_DRIVE_ENABLE
		wattageMode.valueToSet = wattageGreenInLevels(deltaTempStruct.deltaWattageLevel7);
#elif		BS84C12A_DRIVE_ENABLE == 1
		wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(deltaTempStruct.deltaWattageLevel7);
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001f7a:	8c1b      	ldrh	r3, [r3, #32]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fd2a 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 8001f84:	4603      	mov	r3, r0
 8001f86:	461a      	mov	r2, r3
 8001f88:	4b1b      	ldr	r3, [pc, #108]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001f8a:	801a      	strh	r2, [r3, #0]
		dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 fb2e 	bl	80035f4 <dacSetVoltage>
		  osDelay(20);
 8001f98:	2014      	movs	r0, #20
 8001f9a:	f00b fa59 	bl	800d450 <osDelay>
 8001f9e:	e06a      	b.n	8002076 <temperatureControlCurve+0x316>
#endif
	}
	else if(deltaTempStruct.deltaTemperature >= deltaTempStruct.deltaLevel8 && deltaTempStruct.deltaTemperature < deltaTempStruct.deltaLevel7 && deltaTempStruct.deltaTemperature <= 300)
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001fa2:	881a      	ldrh	r2, [r3, #0]
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001fa6:	8a1b      	ldrh	r3, [r3, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d327      	bcc.n	8001ffc <temperatureControlCurve+0x29c>
 8001fac:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001fae:	881a      	ldrh	r2, [r3, #0]
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001fb2:	89db      	ldrh	r3, [r3, #14]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d221      	bcs.n	8001ffc <temperatureControlCurve+0x29c>
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001fc0:	d81c      	bhi.n	8001ffc <temperatureControlCurve+0x29c>
			temp_raise=0;
			Send_temp_Response(INSTRUCTION_SET,2,3);
			osDelay(15);
		}
#endif
		temperatureLevelIndicate = level8;
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <temperatureControlCurve+0x294>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	701a      	strb	r2, [r3, #0]
#if			TM1668_DRIVE_ENABLE
		wattageMode.valueToSet = wattageGreenInLevels(deltaTempStruct.deltaWattageLevel8);
#elif		BS84C12A_DRIVE_ENABLE == 1
		wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(deltaTempStruct.deltaWattageLevel8);
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <temperatureControlCurve+0x290>)
 8001fca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fd02 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001fda:	801a      	strh	r2, [r3, #0]
		dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <temperatureControlCurve+0x298>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fb06 	bl	80035f4 <dacSetVoltage>
		  osDelay(20);
 8001fe8:	2014      	movs	r0, #20
 8001fea:	f00b fa31 	bl	800d450 <osDelay>
 8001fee:	e042      	b.n	8002076 <temperatureControlCurve+0x316>
 8001ff0:	20008c14 	.word	0x20008c14
 8001ff4:	20008c67 	.word	0x20008c67
 8001ff8:	20008c78 	.word	0x20008c78
#endif
	}
	else if(deltaTempStruct.deltaTemperature >= deltaTempStruct.deltaLevel9 && deltaTempStruct.deltaTemperature < deltaTempStruct.deltaLevel8 && deltaTempStruct.deltaTemperature <= 300)
 8001ffc:	4b5f      	ldr	r3, [pc, #380]	; (800217c <temperatureControlCurve+0x41c>)
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	4b5e      	ldr	r3, [pc, #376]	; (800217c <temperatureControlCurve+0x41c>)
 8002002:	8a5b      	ldrh	r3, [r3, #18]
 8002004:	429a      	cmp	r2, r3
 8002006:	d31e      	bcc.n	8002046 <temperatureControlCurve+0x2e6>
 8002008:	4b5c      	ldr	r3, [pc, #368]	; (800217c <temperatureControlCurve+0x41c>)
 800200a:	881a      	ldrh	r2, [r3, #0]
 800200c:	4b5b      	ldr	r3, [pc, #364]	; (800217c <temperatureControlCurve+0x41c>)
 800200e:	8a1b      	ldrh	r3, [r3, #16]
 8002010:	429a      	cmp	r2, r3
 8002012:	d218      	bcs.n	8002046 <temperatureControlCurve+0x2e6>
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <temperatureControlCurve+0x41c>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800201c:	d813      	bhi.n	8002046 <temperatureControlCurve+0x2e6>
	{
		temperatureLevelIndicate = level9;
 800201e:	4b58      	ldr	r3, [pc, #352]	; (8002180 <temperatureControlCurve+0x420>)
 8002020:	2208      	movs	r2, #8
 8002022:	701a      	strb	r2, [r3, #0]
#if			TM1668_DRIVE_ENABLE
//		keyPressState = pressOnOff;
		wattageMode.valueToSet = wattageGreenInLevels(deltaTempStruct.deltaWattageLevel9);
#elif		BS84C12A_DRIVE_ENABLE == 1
		wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(0);
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff fcd7 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	4b55      	ldr	r3, [pc, #340]	; (8002184 <temperatureControlCurve+0x424>)
 8002030:	801a      	strh	r2, [r3, #0]
		dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8002032:	4b54      	ldr	r3, [pc, #336]	; (8002184 <temperatureControlCurve+0x424>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f001 fadb 	bl	80035f4 <dacSetVoltage>
		  osDelay(20);
 800203e:	2014      	movs	r0, #20
 8002040:	f00b fa06 	bl	800d450 <osDelay>
 8002044:	e017      	b.n	8002076 <temperatureControlCurve+0x316>
#endif
	}
	else if(currentTemperature >= (setTemperatureValue + 5))
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	1d1a      	adds	r2, r3, #4
 800204a:	88bb      	ldrh	r3, [r7, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	da12      	bge.n	8002076 <temperatureControlCurve+0x316>
	{
		temperatureLevelIndicate = level10;
 8002050:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <temperatureControlCurve+0x420>)
 8002052:	2209      	movs	r2, #9
 8002054:	701a      	strb	r2, [r3, #0]
#if			TM1668_DRIVE_ENABLE
		keyPressState = pressOnOff;
#elif		BS84C12A_DRIVE_ENABLE == 1
		wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(0);
 8002056:	2000      	movs	r0, #0
 8002058:	f7ff fcbe 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	4b48      	ldr	r3, [pc, #288]	; (8002184 <temperatureControlCurve+0x424>)
 8002062:	801a      	strh	r2, [r3, #0]
		dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8002064:	4b47      	ldr	r3, [pc, #284]	; (8002184 <temperatureControlCurve+0x424>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f001 fac2 	bl	80035f4 <dacSetVoltage>
		  osDelay(20);
 8002070:	2014      	movs	r0, #20
 8002072:	f00b f9ed 	bl	800d450 <osDelay>
#endif
	}
	if(temperatureACKAuto > 0 && temperatureACKAuto < 1)
 8002076:	4b44      	ldr	r3, [pc, #272]	; (8002188 <temperatureControlCurve+0x428>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002084:	dd30      	ble.n	80020e8 <temperatureControlCurve+0x388>
 8002086:	4b40      	ldr	r3, [pc, #256]	; (8002188 <temperatureControlCurve+0x428>)
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002098:	d526      	bpl.n	80020e8 <temperatureControlCurve+0x388>
	{
		if(PERCENT_CALCULATION(setTemperatureValue, currentTemperature) < temperatureACKAuto)
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	88bb      	ldrh	r3, [r7, #4]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	ee07 3a90 	vmov	s15, r3
 80020a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020b6:	4b34      	ldr	r3, [pc, #208]	; (8002188 <temperatureControlCurve+0x428>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	d510      	bpl.n	80020e8 <temperatureControlCurve+0x388>
		{
			if(androidProcessStruct.temperatureAutoMode == 1)
 80020c6:	4b31      	ldr	r3, [pc, #196]	; (800218c <temperatureControlCurve+0x42c>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <temperatureControlCurve+0x388>
			{
				Send_Status_data();
 80020d4:	f7ff f8f0 	bl	80012b8 <Send_Status_data>
				osDelay(10);
 80020d8:	200a      	movs	r0, #10
 80020da:	f00b f9b9 	bl	800d450 <osDelay>
				androidProcessStruct.temperatureAutoMode = 0;
 80020de:	4a2b      	ldr	r2, [pc, #172]	; (800218c <temperatureControlCurve+0x42c>)
 80020e0:	7813      	ldrb	r3, [r2, #0]
 80020e2:	f36f 0341 	bfc	r3, #1, #1
 80020e6:	7013      	strb	r3, [r2, #0]
//				androidProcessStruct.manualMode = 1;
			}
		}
	}
	if(temperatureACKManual > 0 && temperatureACKManual < 1)
 80020e8:	4b29      	ldr	r3, [pc, #164]	; (8002190 <temperatureControlCurve+0x430>)
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	dc00      	bgt.n	80020fa <temperatureControlCurve+0x39a>
				androidProcessStruct.sendTempAckOnce = 1;
			}
		}
	}
#endif
}
 80020f8:	e03c      	b.n	8002174 <temperatureControlCurve+0x414>
	if(temperatureACKManual > 0 && temperatureACKManual < 1)
 80020fa:	4b25      	ldr	r3, [pc, #148]	; (8002190 <temperatureControlCurve+0x430>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	d400      	bmi.n	8002110 <temperatureControlCurve+0x3b0>
}
 800210e:	e031      	b.n	8002174 <temperatureControlCurve+0x414>
		if(PERCENT_CALCULATION(setTemperatureValue, currentTemperature) < temperatureACKManual)
 8002110:	88fa      	ldrh	r2, [r7, #6]
 8002112:	88bb      	ldrh	r3, [r7, #4]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800212c:	4b18      	ldr	r3, [pc, #96]	; (8002190 <temperatureControlCurve+0x430>)
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213a:	d400      	bmi.n	800213e <temperatureControlCurve+0x3de>
}
 800213c:	e01a      	b.n	8002174 <temperatureControlCurve+0x414>
			if(androidProcessStruct.sendTempAckOnce == 0 && androidProcessStruct.manualMode == 1)
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <temperatureControlCurve+0x42c>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d113      	bne.n	8002174 <temperatureControlCurve+0x414>
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <temperatureControlCurve+0x42c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00c      	beq.n	8002174 <temperatureControlCurve+0x414>
				Send_temp_Response(INSTRUCTION_SET,2,3);
 800215a:	2203      	movs	r2, #3
 800215c:	2102      	movs	r1, #2
 800215e:	2004      	movs	r0, #4
 8002160:	f7ff f922 	bl	80013a8 <Send_temp_Response>
				osDelay(15);
 8002164:	200f      	movs	r0, #15
 8002166:	f00b f973 	bl	800d450 <osDelay>
				androidProcessStruct.sendTempAckOnce = 1;
 800216a:	4a08      	ldr	r2, [pc, #32]	; (800218c <temperatureControlCurve+0x42c>)
 800216c:	7813      	ldrb	r3, [r2, #0]
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	7013      	strb	r3, [r2, #0]
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20008c14 	.word	0x20008c14
 8002180:	20008c67 	.word	0x20008c67
 8002184:	20008c78 	.word	0x20008c78
 8002188:	20009024 	.word	0x20009024
 800218c:	20008c54 	.word	0x20008c54
 8002190:	20009028 	.word	0x20009028

08002194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002198:	f002 f9aa 	bl	80044f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219c:	f000 f8a2 	bl	80022e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a0:	f000 fb90 	bl	80028c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80021a4:	f000 fb6e 	bl	8002884 <MX_DMA_Init>
  MX_I2C2_Init();
 80021a8:	f000 f982 	bl	80024b0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80021ac:	f000 f9ae 	bl	800250c <MX_SPI2_Init>
  MX_ADC1_Init();
 80021b0:	f000 f902 	bl	80023b8 <MX_ADC1_Init>
  MX_DAC_Init();
 80021b4:	f000 f952 	bl	800245c <MX_DAC_Init>
  MX_TIM1_Init();
 80021b8:	f000 f9da 	bl	8002570 <MX_TIM1_Init>
  MX_TIM3_Init();
 80021bc:	f000 fa90 	bl	80026e0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80021c0:	f000 fb36 	bl	8002830 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80021c4:	f000 fafe 	bl	80027c4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80021c8:	2110      	movs	r1, #16
 80021ca:	482f      	ldr	r0, [pc, #188]	; (8002288 <main+0xf4>)
 80021cc:	f002 fd5c 	bl	8004c88 <HAL_DAC_Start>
//  PWM_Initialize(drumDCMotor);
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 80021d0:	2201      	movs	r2, #1
 80021d2:	2102      	movs	r1, #2
 80021d4:	482d      	ldr	r0, [pc, #180]	; (800228c <main+0xf8>)
 80021d6:	f003 fb05 	bl	80057e4 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80021da:	20c8      	movs	r0, #200	; 0xc8
 80021dc:	f002 f9ca 	bl	8004574 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2102      	movs	r1, #2
 80021e4:	4829      	ldr	r0, [pc, #164]	; (800228c <main+0xf8>)
 80021e6:	f003 fafd 	bl	80057e4 <HAL_GPIO_WritePin>

#if DC_MOTOR_TASK_ENABLE
#if SPARE_DC_PWM_EN ==  1
  PWM_Initialize(spareDCMotor);
#elif DRUM_DC_PWM_EN == 1
  PWM_Initialize(drumDCMotor);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7fe fefe 	bl	8000fec <PWM_Initialize>
#endif

#if SPEED_SENSOR_ENABLE == 1
  miscellaneousSetting.speedSensorEnable = 1;
 80021f0:	4b27      	ldr	r3, [pc, #156]	; (8002290 <main+0xfc>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	815a      	strh	r2, [r3, #10]
  if(miscellaneousSetting.speedSensorEnable == 1)
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <main+0xfc>)
 80021f8:	895b      	ldrh	r3, [r3, #10]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d103      	bne.n	8002206 <main+0x72>
  {
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80021fe:	2104      	movs	r1, #4
 8002200:	4824      	ldr	r0, [pc, #144]	; (8002294 <main+0x100>)
 8002202:	f006 fbe3 	bl	80089cc <HAL_TIM_IC_Start_IT>
  }
#endif
#endif

  HAL_TIM_Base_Start_IT(&htim6);		//5ms timer
 8002206:	4824      	ldr	r0, [pc, #144]	; (8002298 <main+0x104>)
 8002208:	f006 f9f4 	bl	80085f4 <HAL_TIM_Base_Start_IT>
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1_DATA, ADC1_CONVERTED_DATA_BUFFER_SIZE) != HAL_OK)
	{
		Error_Handler();
	}
#endif
  dacSetVoltage(INDUCTION_OFF_COUNT, 0);
 800220c:	2100      	movs	r1, #0
 800220e:	f240 1099 	movw	r0, #409	; 0x199
 8002212:	f001 f9ef 	bl	80035f4 <dacSetVoltage>
  osDelay(20);
 8002216:	2014      	movs	r0, #20
 8002218:	f00b f91a 	bl	800d450 <osDelay>
#endif
//	HAL_Delay(2000);
  /* USER CODE END 2 */
  /* Init scheduler */
  osKernelInitialize();
 800221c:	f00b f83c 	bl	800d298 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002220:	4a1e      	ldr	r2, [pc, #120]	; (800229c <main+0x108>)
 8002222:	2100      	movs	r1, #0
 8002224:	481e      	ldr	r0, [pc, #120]	; (80022a0 <main+0x10c>)
 8002226:	f00b f881 	bl	800d32c <osThreadNew>
 800222a:	4603      	mov	r3, r0
 800222c:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <main+0x110>)
 800222e:	6013      	str	r3, [r2, #0]

  /* creation of Android_task_t */
  Android_task_tHandle = osThreadNew(android_task, NULL, &Android_task_t_attributes);
 8002230:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <main+0x114>)
 8002232:	2100      	movs	r1, #0
 8002234:	481d      	ldr	r0, [pc, #116]	; (80022ac <main+0x118>)
 8002236:	f00b f879 	bl	800d32c <osThreadNew>
 800223a:	4603      	mov	r3, r0
 800223c:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <main+0x11c>)
 800223e:	6013      	str	r3, [r2, #0]

  /* creation of inductionContro */
  inductionControHandle = osThreadNew(InductionControlTask, NULL, &inductionContro_attributes);
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <main+0x120>)
 8002242:	2100      	movs	r1, #0
 8002244:	481c      	ldr	r0, [pc, #112]	; (80022b8 <main+0x124>)
 8002246:	f00b f871 	bl	800d32c <osThreadNew>
 800224a:	4603      	mov	r3, r0
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <main+0x128>)
 800224e:	6013      	str	r3, [r2, #0]

  /* creation of motorControl */
  motorControlHandle = osThreadNew(MotorControlTask, NULL, &motorControl_attributes);
 8002250:	4a1b      	ldr	r2, [pc, #108]	; (80022c0 <main+0x12c>)
 8002252:	2100      	movs	r1, #0
 8002254:	481b      	ldr	r0, [pc, #108]	; (80022c4 <main+0x130>)
 8002256:	f00b f869 	bl	800d32c <osThreadNew>
 800225a:	4603      	mov	r3, r0
 800225c:	4a1a      	ldr	r2, [pc, #104]	; (80022c8 <main+0x134>)
 800225e:	6013      	str	r3, [r2, #0]

  /* creation of sensorRead */
  sensorReadHandle = osThreadNew(SensorReadTask, NULL, &sensorRead_attributes);
 8002260:	4a1a      	ldr	r2, [pc, #104]	; (80022cc <main+0x138>)
 8002262:	2100      	movs	r1, #0
 8002264:	481a      	ldr	r0, [pc, #104]	; (80022d0 <main+0x13c>)
 8002266:	f00b f861 	bl	800d32c <osThreadNew>
 800226a:	4603      	mov	r3, r0
 800226c:	4a19      	ldr	r2, [pc, #100]	; (80022d4 <main+0x140>)
 800226e:	6013      	str	r3, [r2, #0]

  /* creation of errorHandle_t */
  errorHandle_tHandle = osThreadNew(errorHandleTask, NULL, &errorHandle_t_attributes);
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <main+0x144>)
 8002272:	2100      	movs	r1, #0
 8002274:	4819      	ldr	r0, [pc, #100]	; (80022dc <main+0x148>)
 8002276:	f00b f859 	bl	800d32c <osThreadNew>
 800227a:	4603      	mov	r3, r0
 800227c:	4a18      	ldr	r2, [pc, #96]	; (80022e0 <main+0x14c>)
 800227e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002280:	f00b f82e 	bl	800d2e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002284:	e7fe      	b.n	8002284 <main+0xf0>
 8002286:	bf00      	nop
 8002288:	20008ef0 	.word	0x20008ef0
 800228c:	40020800 	.word	0x40020800
 8002290:	20008c40 	.word	0x20008c40
 8002294:	20008dcc 	.word	0x20008dcc
 8002298:	20008f70 	.word	0x20008f70
 800229c:	08015264 	.word	0x08015264
 80022a0:	08002c15 	.word	0x08002c15
 80022a4:	20008c7c 	.word	0x20008c7c
 80022a8:	08015288 	.word	0x08015288
 80022ac:	08002c99 	.word	0x08002c99
 80022b0:	20009070 	.word	0x20009070
 80022b4:	080152ac 	.word	0x080152ac
 80022b8:	08003115 	.word	0x08003115
 80022bc:	20008d80 	.word	0x20008d80
 80022c0:	080152d0 	.word	0x080152d0
 80022c4:	080031a1 	.word	0x080031a1
 80022c8:	20008f68 	.word	0x20008f68
 80022cc:	080152f4 	.word	0x080152f4
 80022d0:	080032dd 	.word	0x080032dd
 80022d4:	20008e14 	.word	0x20008e14
 80022d8:	08015318 	.word	0x08015318
 80022dc:	0800358d 	.word	0x0800358d
 80022e0:	20008d5c 	.word	0x20008d5c

080022e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b094      	sub	sp, #80	; 0x50
 80022e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ea:	f107 0320 	add.w	r3, r7, #32
 80022ee:	2230      	movs	r2, #48	; 0x30
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f00e faaa 	bl	801084c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <SystemClock_Config+0xcc>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <SystemClock_Config+0xcc>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	6413      	str	r3, [r2, #64]	; 0x40
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <SystemClock_Config+0xcc>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002324:	2300      	movs	r3, #0
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <SystemClock_Config+0xd0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <SystemClock_Config+0xd0>)
 800232e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <SystemClock_Config+0xd0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002340:	2301      	movs	r3, #1
 8002342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800234a:	2302      	movs	r3, #2
 800234c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800234e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002354:	2304      	movs	r3, #4
 8002356:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002358:	23a8      	movs	r3, #168	; 0xa8
 800235a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800235c:	2302      	movs	r3, #2
 800235e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002360:	2307      	movs	r3, #7
 8002362:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002364:	f107 0320 	add.w	r3, r7, #32
 8002368:	4618      	mov	r0, r3
 800236a:	f005 fbc5 	bl	8007af8 <HAL_RCC_OscConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002374:	f001 f934 	bl	80035e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002378:	230f      	movs	r3, #15
 800237a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800237c:	2302      	movs	r3, #2
 800237e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002384:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800238a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800238e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	2105      	movs	r1, #5
 8002396:	4618      	mov	r0, r3
 8002398:	f005 fe26 	bl	8007fe8 <HAL_RCC_ClockConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80023a2:	f001 f91d 	bl	80035e0 <Error_Handler>
  }
}
 80023a6:	bf00      	nop
 80023a8:	3750      	adds	r7, #80	; 0x50
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40007000 	.word	0x40007000

080023b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023be:	463b      	mov	r3, r7
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023ca:	4b21      	ldr	r3, [pc, #132]	; (8002450 <MX_ADC1_Init+0x98>)
 80023cc:	4a21      	ldr	r2, [pc, #132]	; (8002454 <MX_ADC1_Init+0x9c>)
 80023ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <MX_ADC1_Init+0x98>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <MX_ADC1_Init+0x98>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <MX_ADC1_Init+0x98>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <MX_ADC1_Init+0x98>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <MX_ADC1_Init+0x98>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <MX_ADC1_Init+0x98>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <MX_ADC1_Init+0x98>)
 80023f8:	4a17      	ldr	r2, [pc, #92]	; (8002458 <MX_ADC1_Init+0xa0>)
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <MX_ADC1_Init+0x98>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <MX_ADC1_Init+0x98>)
 8002404:	2201      	movs	r2, #1
 8002406:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <MX_ADC1_Init+0x98>)
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <MX_ADC1_Init+0x98>)
 8002412:	2201      	movs	r2, #1
 8002414:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002416:	480e      	ldr	r0, [pc, #56]	; (8002450 <MX_ADC1_Init+0x98>)
 8002418:	f002 f8d0 	bl	80045bc <HAL_ADC_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002422:	f001 f8dd 	bl	80035e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002426:	230f      	movs	r3, #15
 8002428:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800242e:	2306      	movs	r3, #6
 8002430:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002432:	463b      	mov	r3, r7
 8002434:	4619      	mov	r1, r3
 8002436:	4806      	ldr	r0, [pc, #24]	; (8002450 <MX_ADC1_Init+0x98>)
 8002438:	f002 f904 	bl	8004644 <HAL_ADC_ConfigChannel>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002442:	f001 f8cd 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20008e1c 	.word	0x20008e1c
 8002454:	40012000 	.word	0x40012000
 8002458:	0f000001 	.word	0x0f000001

0800245c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002462:	463b      	mov	r3, r7
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <MX_DAC_Init+0x4c>)
 800246c:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <MX_DAC_Init+0x50>)
 800246e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002470:	480d      	ldr	r0, [pc, #52]	; (80024a8 <MX_DAC_Init+0x4c>)
 8002472:	f002 fbe7 	bl	8004c44 <HAL_DAC_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800247c:	f001 f8b0 	bl	80035e0 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002480:	2300      	movs	r3, #0
 8002482:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002488:	463b      	mov	r3, r7
 800248a:	2210      	movs	r2, #16
 800248c:	4619      	mov	r1, r3
 800248e:	4806      	ldr	r0, [pc, #24]	; (80024a8 <MX_DAC_Init+0x4c>)
 8002490:	f002 fcb0 	bl	8004df4 <HAL_DAC_ConfigChannel>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800249a:	f001 f8a1 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20008ef0 	.word	0x20008ef0
 80024ac:	40007400 	.word	0x40007400

080024b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <MX_I2C2_Init+0x50>)
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <MX_I2C2_Init+0x54>)
 80024b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_I2C2_Init+0x50>)
 80024bc:	4a12      	ldr	r2, [pc, #72]	; (8002508 <MX_I2C2_Init+0x58>)
 80024be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <MX_I2C2_Init+0x50>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_I2C2_Init+0x50>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_I2C2_Init+0x50>)
 80024ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <MX_I2C2_Init+0x50>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_I2C2_Init+0x50>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024e0:	4b07      	ldr	r3, [pc, #28]	; (8002500 <MX_I2C2_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_I2C2_Init+0x50>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024ec:	4804      	ldr	r0, [pc, #16]	; (8002500 <MX_I2C2_Init+0x50>)
 80024ee:	f003 f9d1 	bl	8005894 <HAL_I2C_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80024f8:	f001 f872 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20008ce0 	.word	0x20008ce0
 8002504:	40005800 	.word	0x40005800
 8002508:	000186a0 	.word	0x000186a0

0800250c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002510:	4b15      	ldr	r3, [pc, #84]	; (8002568 <MX_SPI2_Init+0x5c>)
 8002512:	4a16      	ldr	r2, [pc, #88]	; (800256c <MX_SPI2_Init+0x60>)
 8002514:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <MX_SPI2_Init+0x5c>)
 8002518:	2200      	movs	r2, #0
 800251a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <MX_SPI2_Init+0x5c>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <MX_SPI2_Init+0x5c>)
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <MX_SPI2_Init+0x5c>)
 800252a:	2202      	movs	r2, #2
 800252c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800252e:	4b0e      	ldr	r3, [pc, #56]	; (8002568 <MX_SPI2_Init+0x5c>)
 8002530:	2201      	movs	r2, #1
 8002532:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <MX_SPI2_Init+0x5c>)
 8002536:	2200      	movs	r2, #0
 8002538:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800253a:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <MX_SPI2_Init+0x5c>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002540:	4b09      	ldr	r3, [pc, #36]	; (8002568 <MX_SPI2_Init+0x5c>)
 8002542:	2200      	movs	r2, #0
 8002544:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <MX_SPI2_Init+0x5c>)
 8002548:	2200      	movs	r2, #0
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <MX_SPI2_Init+0x5c>)
 800254e:	220a      	movs	r2, #10
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <MX_SPI2_Init+0x5c>)
 8002554:	f005 ff76 	bl	8008444 <HAL_SPI_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 800255e:	f001 f83f 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20008c84 	.word	0x20008c84
 800256c:	40003800 	.word	0x40003800

08002570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b096      	sub	sp, #88	; 0x58
 8002574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002576:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800258e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	611a      	str	r2, [r3, #16]
 800259e:	615a      	str	r2, [r3, #20]
 80025a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2220      	movs	r2, #32
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f00e f94f 	bl	801084c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025ae:	4b4a      	ldr	r3, [pc, #296]	; (80026d8 <MX_TIM1_Init+0x168>)
 80025b0:	4a4a      	ldr	r2, [pc, #296]	; (80026dc <MX_TIM1_Init+0x16c>)
 80025b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42-1;
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <MX_TIM1_Init+0x168>)
 80025b6:	2229      	movs	r2, #41	; 0x29
 80025b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <MX_TIM1_Init+0x168>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80025c0:	4b45      	ldr	r3, [pc, #276]	; (80026d8 <MX_TIM1_Init+0x168>)
 80025c2:	2263      	movs	r2, #99	; 0x63
 80025c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c6:	4b44      	ldr	r3, [pc, #272]	; (80026d8 <MX_TIM1_Init+0x168>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025cc:	4b42      	ldr	r3, [pc, #264]	; (80026d8 <MX_TIM1_Init+0x168>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025d2:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <MX_TIM1_Init+0x168>)
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025d8:	483f      	ldr	r0, [pc, #252]	; (80026d8 <MX_TIM1_Init+0x168>)
 80025da:	f005 ffbc 	bl	8008556 <HAL_TIM_Base_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80025e4:	f000 fffc 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025f2:	4619      	mov	r1, r3
 80025f4:	4838      	ldr	r0, [pc, #224]	; (80026d8 <MX_TIM1_Init+0x168>)
 80025f6:	f006 fd65 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002600:	f000 ffee 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002604:	4834      	ldr	r0, [pc, #208]	; (80026d8 <MX_TIM1_Init+0x168>)
 8002606:	f006 f865 	bl	80086d4 <HAL_TIM_PWM_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002610:	f000 ffe6 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800261c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002620:	4619      	mov	r1, r3
 8002622:	482d      	ldr	r0, [pc, #180]	; (80026d8 <MX_TIM1_Init+0x168>)
 8002624:	f007 fa6a 	bl	8009afc <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800262e:	f000 ffd7 	bl	80035e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002632:	2360      	movs	r3, #96	; 0x60
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800263e:	2300      	movs	r3, #0
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800264e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002652:	2204      	movs	r2, #4
 8002654:	4619      	mov	r1, r3
 8002656:	4820      	ldr	r0, [pc, #128]	; (80026d8 <MX_TIM1_Init+0x168>)
 8002658:	f006 fc76 	bl	8008f48 <HAL_TIM_PWM_ConfigChannel>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002662:	f000 ffbd 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266a:	2208      	movs	r2, #8
 800266c:	4619      	mov	r1, r3
 800266e:	481a      	ldr	r0, [pc, #104]	; (80026d8 <MX_TIM1_Init+0x168>)
 8002670:	f006 fc6a 	bl	8008f48 <HAL_TIM_PWM_ConfigChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800267a:	f000 ffb1 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800267e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002682:	220c      	movs	r2, #12
 8002684:	4619      	mov	r1, r3
 8002686:	4814      	ldr	r0, [pc, #80]	; (80026d8 <MX_TIM1_Init+0x168>)
 8002688:	f006 fc5e 	bl	8008f48 <HAL_TIM_PWM_ConfigChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002692:	f000 ffa5 	bl	80035e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	4619      	mov	r1, r3
 80026b8:	4807      	ldr	r0, [pc, #28]	; (80026d8 <MX_TIM1_Init+0x168>)
 80026ba:	f007 fa9b 	bl	8009bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80026c4:	f000 ff8c 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026c8:	4803      	ldr	r0, [pc, #12]	; (80026d8 <MX_TIM1_Init+0x168>)
 80026ca:	f001 fb59 	bl	8003d80 <HAL_TIM_MspPostInit>

}
 80026ce:	bf00      	nop
 80026d0:	3758      	adds	r7, #88	; 0x58
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20008fb8 	.word	0x20008fb8
 80026dc:	40010000 	.word	0x40010000

080026e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e6:	f107 0318 	add.w	r3, r7, #24
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026fe:	463b      	mov	r3, r7
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <MX_TIM3_Init+0xdc>)
 800270c:	4a2c      	ldr	r2, [pc, #176]	; (80027c0 <MX_TIM3_Init+0xe0>)
 800270e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8002710:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <MX_TIM3_Init+0xdc>)
 8002712:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002718:	4b28      	ldr	r3, [pc, #160]	; (80027bc <MX_TIM3_Init+0xdc>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800271e:	4b27      	ldr	r3, [pc, #156]	; (80027bc <MX_TIM3_Init+0xdc>)
 8002720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002724:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002726:	4b25      	ldr	r3, [pc, #148]	; (80027bc <MX_TIM3_Init+0xdc>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800272c:	4b23      	ldr	r3, [pc, #140]	; (80027bc <MX_TIM3_Init+0xdc>)
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002732:	4822      	ldr	r0, [pc, #136]	; (80027bc <MX_TIM3_Init+0xdc>)
 8002734:	f005 ff0f 	bl	8008556 <HAL_TIM_Base_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800273e:	f000 ff4f 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002746:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002748:	f107 0318 	add.w	r3, r7, #24
 800274c:	4619      	mov	r1, r3
 800274e:	481b      	ldr	r0, [pc, #108]	; (80027bc <MX_TIM3_Init+0xdc>)
 8002750:	f006 fcb8 	bl	80090c4 <HAL_TIM_ConfigClockSource>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800275a:	f000 ff41 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800275e:	4817      	ldr	r0, [pc, #92]	; (80027bc <MX_TIM3_Init+0xdc>)
 8002760:	f006 f8da 	bl	8008918 <HAL_TIM_IC_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800276a:	f000 ff39 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	4619      	mov	r1, r3
 800277c:	480f      	ldr	r0, [pc, #60]	; (80027bc <MX_TIM3_Init+0xdc>)
 800277e:	f007 f9bd 	bl	8009afc <HAL_TIMEx_MasterConfigSynchronization>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8002788:	f000 ff2a 	bl	80035e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800278c:	2302      	movs	r3, #2
 800278e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002790:	2301      	movs	r3, #1
 8002792:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800279c:	463b      	mov	r3, r7
 800279e:	2204      	movs	r2, #4
 80027a0:	4619      	mov	r1, r3
 80027a2:	4806      	ldr	r0, [pc, #24]	; (80027bc <MX_TIM3_Init+0xdc>)
 80027a4:	f006 fb3c 	bl	8008e20 <HAL_TIM_IC_ConfigChannel>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80027ae:	f000 ff17 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20008dcc 	.word	0x20008dcc
 80027c0:	40000400 	.word	0x40000400

080027c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ca:	463b      	mov	r3, r7
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <MX_TIM6_Init+0x64>)
 80027d4:	4a15      	ldr	r2, [pc, #84]	; (800282c <MX_TIM6_Init+0x68>)
 80027d6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4200-1;
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <MX_TIM6_Init+0x64>)
 80027da:	f241 0267 	movw	r2, #4199	; 0x1067
 80027de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <MX_TIM6_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <MX_TIM6_Init+0x64>)
 80027e8:	2263      	movs	r2, #99	; 0x63
 80027ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_TIM6_Init+0x64>)
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027f2:	480d      	ldr	r0, [pc, #52]	; (8002828 <MX_TIM6_Init+0x64>)
 80027f4:	f005 feaf 	bl	8008556 <HAL_TIM_Base_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80027fe:	f000 feef 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800280a:	463b      	mov	r3, r7
 800280c:	4619      	mov	r1, r3
 800280e:	4806      	ldr	r0, [pc, #24]	; (8002828 <MX_TIM6_Init+0x64>)
 8002810:	f007 f974 	bl	8009afc <HAL_TIMEx_MasterConfigSynchronization>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800281a:	f000 fee1 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20008f70 	.word	0x20008f70
 800282c:	40001000 	.word	0x40001000

08002830 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <MX_USART1_UART_Init+0x50>)
 8002838:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <MX_USART1_UART_Init+0x4c>)
 800283c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002840:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <MX_USART1_UART_Init+0x4c>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002856:	220c      	movs	r2, #12
 8002858:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285a:	4b08      	ldr	r3, [pc, #32]	; (800287c <MX_USART1_UART_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002862:	2200      	movs	r2, #0
 8002864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002866:	4805      	ldr	r0, [pc, #20]	; (800287c <MX_USART1_UART_Init+0x4c>)
 8002868:	f007 fa2a 	bl	8009cc0 <HAL_UART_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002872:	f000 feb5 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20008eac 	.word	0x20008eac
 8002880:	40011000 	.word	0x40011000

08002884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_DMA_Init+0x3c>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <MX_DMA_Init+0x3c>)
 8002894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_DMA_Init+0x3c>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2105      	movs	r1, #5
 80028aa:	2038      	movs	r0, #56	; 0x38
 80028ac:	f002 f9a0 	bl	8004bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80028b0:	2038      	movs	r0, #56	; 0x38
 80028b2:	f002 f9b9 	bl	8004c28 <HAL_NVIC_EnableIRQ>

}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800

080028c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	; 0x30
 80028c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ca:	f107 031c 	add.w	r3, r7, #28
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
 80028d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	4b95      	ldr	r3, [pc, #596]	; (8002b34 <MX_GPIO_Init+0x270>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a94      	ldr	r2, [pc, #592]	; (8002b34 <MX_GPIO_Init+0x270>)
 80028e4:	f043 0310 	orr.w	r3, r3, #16
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b92      	ldr	r3, [pc, #584]	; (8002b34 <MX_GPIO_Init+0x270>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	4b8e      	ldr	r3, [pc, #568]	; (8002b34 <MX_GPIO_Init+0x270>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a8d      	ldr	r2, [pc, #564]	; (8002b34 <MX_GPIO_Init+0x270>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b8b      	ldr	r3, [pc, #556]	; (8002b34 <MX_GPIO_Init+0x270>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4b87      	ldr	r3, [pc, #540]	; (8002b34 <MX_GPIO_Init+0x270>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a86      	ldr	r2, [pc, #536]	; (8002b34 <MX_GPIO_Init+0x270>)
 800291c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b84      	ldr	r3, [pc, #528]	; (8002b34 <MX_GPIO_Init+0x270>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b80      	ldr	r3, [pc, #512]	; (8002b34 <MX_GPIO_Init+0x270>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a7f      	ldr	r2, [pc, #508]	; (8002b34 <MX_GPIO_Init+0x270>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b7d      	ldr	r3, [pc, #500]	; (8002b34 <MX_GPIO_Init+0x270>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b79      	ldr	r3, [pc, #484]	; (8002b34 <MX_GPIO_Init+0x270>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a78      	ldr	r2, [pc, #480]	; (8002b34 <MX_GPIO_Init+0x270>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b76      	ldr	r3, [pc, #472]	; (8002b34 <MX_GPIO_Init+0x270>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b72      	ldr	r3, [pc, #456]	; (8002b34 <MX_GPIO_Init+0x270>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a71      	ldr	r2, [pc, #452]	; (8002b34 <MX_GPIO_Init+0x270>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <MX_GPIO_Init+0x270>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, INDUCTION_K1_Pin|DRUM_DC_INA_Pin|DRUM_DC_INB_Pin|SPARE_DC_EN_Pin
 8002982:	2200      	movs	r2, #0
 8002984:	f249 6140 	movw	r1, #38464	; 0x9640
 8002988:	486b      	ldr	r0, [pc, #428]	; (8002b38 <MX_GPIO_Init+0x274>)
 800298a:	f002 ff2b 	bl	80057e4 <HAL_GPIO_WritePin>
                          |SPI_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_LED_Pin|USB_PowerSwitchOn_Pin|BUZZER_Pin|OIL_STEP_DIR_Pin
 800298e:	2200      	movs	r2, #0
 8002990:	f643 4103 	movw	r1, #15363	; 0x3c03
 8002994:	4869      	ldr	r0, [pc, #420]	; (8002b3c <MX_GPIO_Init+0x278>)
 8002996:	f002 ff25 	bl	80057e4 <HAL_GPIO_WritePin>
                          |OIL_STEP_PULSE_Pin|WATER_STEP_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SOLENOID_1_Pin|SOLENOID_2_Pin|WATER_STEP_DIR_Pin|WATER_STEP_PULSE_Pin
 800299a:	2200      	movs	r2, #0
 800299c:	f240 311f 	movw	r1, #799	; 0x31f
 80029a0:	4867      	ldr	r0, [pc, #412]	; (8002b40 <MX_GPIO_Init+0x27c>)
 80029a2:	f002 ff1f 	bl	80057e4 <HAL_GPIO_WritePin>
                          |SPARE_STEP_EN_Pin|SPARE_STEP_DIR_Pin|SPARE_STEP_PULSE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OIL_STEP_EN_GPIO_Port, OIL_STEP_EN_Pin, GPIO_PIN_RESET);
 80029a6:	2200      	movs	r2, #0
 80029a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029ac:	4865      	ldr	r0, [pc, #404]	; (8002b44 <MX_GPIO_Init+0x280>)
 80029ae:	f002 ff19 	bl	80057e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART_DE_GPIO_Port, UART_DE_Pin, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2120      	movs	r1, #32
 80029b6:	4864      	ldr	r0, [pc, #400]	; (8002b48 <MX_GPIO_Init+0x284>)
 80029b8:	f002 ff14 	bl	80057e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : INDUCTION_WATTAGE_Pin INDUCTION_INCREMENT_Pin INDUCTION_DECREMENT_Pin INDUCTION_SPARE_Pin
                           INDUCTION_ON_OFF_Pin INDUCTION_TEMPERATURE_Pin */
  GPIO_InitStruct.Pin = INDUCTION_WATTAGE_Pin|INDUCTION_INCREMENT_Pin|INDUCTION_DECREMENT_Pin|INDUCTION_SPARE_Pin
 80029bc:	233f      	movs	r3, #63	; 0x3f
 80029be:	61fb      	str	r3, [r7, #28]
                          |INDUCTION_ON_OFF_Pin|INDUCTION_TEMPERATURE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c0:	4b62      	ldr	r3, [pc, #392]	; (8002b4c <MX_GPIO_Init+0x288>)
 80029c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	4619      	mov	r1, r3
 80029ce:	485a      	ldr	r0, [pc, #360]	; (8002b38 <MX_GPIO_Init+0x274>)
 80029d0:	f002 fd54 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pins : INDUCTION_K1_Pin DRUM_DC_INA_Pin DRUM_DC_INB_Pin SPARE_DC_EN_Pin
                           SPI_CS2_Pin */
  GPIO_InitStruct.Pin = INDUCTION_K1_Pin|DRUM_DC_INA_Pin|DRUM_DC_INB_Pin|SPARE_DC_EN_Pin
 80029d4:	f249 6340 	movw	r3, #38464	; 0x9640
 80029d8:	61fb      	str	r3, [r7, #28]
                          |SPI_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	2301      	movs	r3, #1
 80029dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029e6:	f107 031c 	add.w	r3, r7, #28
 80029ea:	4619      	mov	r1, r3
 80029ec:	4852      	ldr	r0, [pc, #328]	; (8002b38 <MX_GPIO_Init+0x274>)
 80029ee:	f002 fd45 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED_Pin USB_PowerSwitchOn_Pin BUZZER_Pin OIL_STEP_DIR_Pin
                           OIL_STEP_PULSE_Pin WATER_STEP_EN_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|USB_PowerSwitchOn_Pin|BUZZER_Pin|OIL_STEP_DIR_Pin
 80029f2:	f643 4303 	movw	r3, #15363	; 0x3c03
 80029f6:	61fb      	str	r3, [r7, #28]
                          |OIL_STEP_PULSE_Pin|WATER_STEP_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	2301      	movs	r3, #1
 80029fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a00:	2300      	movs	r3, #0
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a04:	f107 031c 	add.w	r3, r7, #28
 8002a08:	4619      	mov	r1, r3
 8002a0a:	484c      	ldr	r0, [pc, #304]	; (8002b3c <MX_GPIO_Init+0x278>)
 8002a0c:	f002 fd36 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pins : A_SEG_Pin B_SEG_Pin C_SEG_Pin D_SEG_Pin
                           E_SEG_Pin F_SEG_Pin */
  GPIO_InitStruct.Pin = A_SEG_Pin|B_SEG_Pin|C_SEG_Pin|D_SEG_Pin
 8002a10:	23de      	movs	r3, #222	; 0xde
 8002a12:	61fb      	str	r3, [r7, #28]
                          |E_SEG_Pin|F_SEG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a14:	2300      	movs	r3, #0
 8002a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	4619      	mov	r1, r3
 8002a22:	4848      	ldr	r0, [pc, #288]	; (8002b44 <MX_GPIO_Init+0x280>)
 8002a24:	f002 fd2a 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pin : G_SEG_Pin */
  GPIO_InitStruct.Pin = G_SEG_Pin;
 8002a28:	2310      	movs	r3, #16
 8002a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a30:	2302      	movs	r3, #2
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(G_SEG_GPIO_Port, &GPIO_InitStruct);
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4840      	ldr	r0, [pc, #256]	; (8002b3c <MX_GPIO_Init+0x278>)
 8002a3c:	f002 fd1e 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002a40:	2304      	movs	r3, #4
 8002a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a44:	2300      	movs	r3, #0
 8002a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	f107 031c 	add.w	r3, r7, #28
 8002a50:	4619      	mov	r1, r3
 8002a52:	483d      	ldr	r0, [pc, #244]	; (8002b48 <MX_GPIO_Init+0x284>)
 8002a54:	f002 fd12 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pins : SOLENOID_1_Pin SOLENOID_2_Pin WATER_STEP_DIR_Pin WATER_STEP_PULSE_Pin
                           SPARE_STEP_EN_Pin SPARE_STEP_DIR_Pin SPARE_STEP_PULSE_Pin */
  GPIO_InitStruct.Pin = SOLENOID_1_Pin|SOLENOID_2_Pin|WATER_STEP_DIR_Pin|WATER_STEP_PULSE_Pin
 8002a58:	f240 331f 	movw	r3, #799	; 0x31f
 8002a5c:	61fb      	str	r3, [r7, #28]
                          |SPARE_STEP_EN_Pin|SPARE_STEP_DIR_Pin|SPARE_STEP_PULSE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a6a:	f107 031c 	add.w	r3, r7, #28
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4833      	ldr	r0, [pc, #204]	; (8002b40 <MX_GPIO_Init+0x27c>)
 8002a72:	f002 fd03 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pins : OIL_FLOW_SENSOR_Pin WATER_FLOW_SENSOR_Pin GREEN_LED_STATUS_Pin RED_LED_STATUS_Pin
                           SPARE_INPUT_Pin USB_OTG_Overcurrent_Pin */
  GPIO_InitStruct.Pin = OIL_FLOW_SENSOR_Pin|WATER_FLOW_SENSOR_Pin|GREEN_LED_STATUS_Pin|RED_LED_STATUS_Pin
 8002a76:	f647 4320 	movw	r3, #31776	; 0x7c20
 8002a7a:	61fb      	str	r3, [r7, #28]
                          |SPARE_INPUT_Pin|USB_OTG_Overcurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	4619      	mov	r1, r3
 8002a8a:	482d      	ldr	r0, [pc, #180]	; (8002b40 <MX_GPIO_Init+0x27c>)
 8002a8c:	f002 fcf6 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pin : OIL_STEP_EN_Pin */
  GPIO_InitStruct.Pin = OIL_STEP_EN_Pin;
 8002a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a96:	2301      	movs	r3, #1
 8002a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OIL_STEP_EN_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4826      	ldr	r0, [pc, #152]	; (8002b44 <MX_GPIO_Init+0x280>)
 8002aaa:	f002 fce7 	bl	800547c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_DE_Pin */
  GPIO_InitStruct.Pin = UART_DE_Pin;
 8002aae:	2320      	movs	r3, #32
 8002ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART_DE_GPIO_Port, &GPIO_InitStruct);
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4820      	ldr	r0, [pc, #128]	; (8002b48 <MX_GPIO_Init+0x284>)
 8002ac6:	f002 fcd9 	bl	800547c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2105      	movs	r1, #5
 8002ace:	2006      	movs	r0, #6
 8002ad0:	f002 f88e 	bl	8004bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ad4:	2006      	movs	r0, #6
 8002ad6:	f002 f8a7 	bl	8004c28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2105      	movs	r1, #5
 8002ade:	2007      	movs	r0, #7
 8002ae0:	f002 f886 	bl	8004bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ae4:	2007      	movs	r0, #7
 8002ae6:	f002 f89f 	bl	8004c28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2105      	movs	r1, #5
 8002aee:	2008      	movs	r0, #8
 8002af0:	f002 f87e 	bl	8004bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002af4:	2008      	movs	r0, #8
 8002af6:	f002 f897 	bl	8004c28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2105      	movs	r1, #5
 8002afe:	2009      	movs	r0, #9
 8002b00:	f002 f876 	bl	8004bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002b04:	2009      	movs	r0, #9
 8002b06:	f002 f88f 	bl	8004c28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	200a      	movs	r0, #10
 8002b10:	f002 f86e 	bl	8004bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002b14:	200a      	movs	r0, #10
 8002b16:	f002 f887 	bl	8004c28 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2105      	movs	r1, #5
 8002b1e:	2017      	movs	r0, #23
 8002b20:	f002 f866 	bl	8004bf0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b24:	2017      	movs	r0, #23
 8002b26:	f002 f87f 	bl	8004c28 <HAL_NVIC_EnableIRQ>

}
 8002b2a:	bf00      	nop
 8002b2c:	3730      	adds	r7, #48	; 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40020800 	.word	0x40020800
 8002b40:	40020c00 	.word	0x40020c00
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	10110000 	.word	0x10110000

08002b50 <HAL_TIM_IC_CaptureCallback>:
}
#endif

#if SPEED_SENSOR_ENABLE == 1
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)			//1us resolution
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a23      	ldr	r2, [pc, #140]	; (8002bec <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d13e      	bne.n	8002be0 <HAL_TIM_IC_CaptureCallback+0x90>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if interrupt source is channel 1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7f1b      	ldrb	r3, [r3, #28]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d12f      	bne.n	8002bca <HAL_TIM_IC_CaptureCallback+0x7a>
		{
//			processError.processStopError = 0;
			processError.speedSensorError = 0;
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002b6c:	7813      	ldrb	r3, [r2, #0]
 8002b6e:	f36f 0300 	bfc	r3, #0, #1
 8002b72:	7013      	strb	r3, [r2, #0]
			timerCnt.speedSensorErrorCnt = 0;
 8002b74:	4b1f      	ldr	r3, [pc, #124]	; (8002bf4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
			if(gu8_State == IC_IDLE)
 8002b7a:	4b1f      	ldr	r3, [pc, #124]	; (8002bf8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <HAL_TIM_IC_CaptureCallback+0x4a>
			{
				gu32_T1 = TIM3->CCR2;
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <HAL_TIM_IC_CaptureCallback+0xac>)
 8002b8a:	6013      	str	r3, [r2, #0]
				gu16_TIM2_OVC = 0;
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
				gu8_State = IC_DONE;
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
			timerCnt.speedSensorErrorCnt = 0;
			current_speed = 0;
			avg_speed = 0;
		}
	}
}
 8002b98:	e022      	b.n	8002be0 <HAL_TIM_IC_CaptureCallback+0x90>
			else if(gu8_State == IC_DONE)
 8002b9a:	4b17      	ldr	r3, [pc, #92]	; (8002bf8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d11d      	bne.n	8002be0 <HAL_TIM_IC_CaptureCallback+0x90>
				gu32_T2 = TIM3->CCR2;
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002baa:	6013      	str	r3, [r2, #0]
				gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC * (0xFFFF + 1))) - gu32_T1;
 8002bac:	4b14      	ldr	r3, [pc, #80]	; (8002c00 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	041a      	lsls	r2, r3, #16
 8002bb2:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	441a      	add	r2, r3
 8002bb8:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_TIM_IC_CaptureCallback+0xac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002bc0:	6013      	str	r3, [r2, #0]
				gu8_State = IC_IDLE;
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
}
 8002bc8:	e00a      	b.n	8002be0 <HAL_TIM_IC_CaptureCallback+0x90>
			timerCnt.speedSensorErrorCnt = 0;
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
			current_speed = 0;
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
			avg_speed = 0;
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	20008c3c 	.word	0x20008c3c
 8002bf4:	20008c70 	.word	0x20008c70
 8002bf8:	200003fc 	.word	0x200003fc
 8002bfc:	20000400 	.word	0x20000400
 8002c00:	2000040c 	.word	0x2000040c
 8002c04:	20000404 	.word	0x20000404
 8002c08:	20000408 	.word	0x20000408
 8002c0c:	200003e8 	.word	0x200003e8
 8002c10:	200003f4 	.word	0x200003f4

08002c14 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8002c1c:	f00d f88e 	bl	800fd3c <MX_USB_DEVICE_Init>
#if			UART_DEBUG_EN == 1
	    HAL_UART_Transmit(&huart1, (uint8_t *)&uartPrintArr, sizeof(uartPrintArr), 100);
#endif
	    osDelay(20);
	#elif BS84C12A_DRIVE_ENABLE == 1
			displayData = getDisplayChar_BS84C12A(displayValueHex);
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <StartDefaultTask+0x70>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe fef3 	bl	8001a10 <getDisplayChar_BS84C12A>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <StartDefaultTask+0x74>)
 8002c30:	701a      	strb	r2, [r3, #0]
			if(bs84c12aInductionError == 1)
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <StartDefaultTask+0x78>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d120      	bne.n	8002c7c <StartDefaultTask+0x68>
			{
				if(++timerCnt.inductionBoardErrorCnt >= 20)
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <StartDefaultTask+0x7c>)
 8002c3c:	789b      	ldrb	r3, [r3, #2]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4b13      	ldr	r3, [pc, #76]	; (8002c90 <StartDefaultTask+0x7c>)
 8002c44:	709a      	strb	r2, [r3, #2]
 8002c46:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <StartDefaultTask+0x7c>)
 8002c48:	789b      	ldrb	r3, [r3, #2]
 8002c4a:	2b13      	cmp	r3, #19
 8002c4c:	d916      	bls.n	8002c7c <StartDefaultTask+0x68>
				{
					if(displayData != 'E' && displayData != 'X')
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <StartDefaultTask+0x74>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b45      	cmp	r3, #69	; 0x45
 8002c54:	d012      	beq.n	8002c7c <StartDefaultTask+0x68>
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <StartDefaultTask+0x74>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b58      	cmp	r3, #88	; 0x58
 8002c5c:	d00e      	beq.n	8002c7c <StartDefaultTask+0x68>
					{
						timerCnt.inductionBoardErrorCnt = 0;
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <StartDefaultTask+0x7c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	709a      	strb	r2, [r3, #2]
						bs84c12aInductionError = 0;
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <StartDefaultTask+0x78>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
						processError.errorNumberAndroid = displayData;
 8002c6a:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <StartDefaultTask+0x74>)
 8002c6c:	781a      	ldrb	r2, [r3, #0]
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <StartDefaultTask+0x80>)
 8002c70:	705a      	strb	r2, [r3, #1]
						processError.inductionBoardError = 1;
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <StartDefaultTask+0x80>)
 8002c74:	7813      	ldrb	r3, [r2, #0]
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	7013      	strb	r3, [r2, #0]
					}
				}
			}
		    osDelay(100);
 8002c7c:	2064      	movs	r0, #100	; 0x64
 8002c7e:	f00a fbe7 	bl	800d450 <osDelay>
			displayData = getDisplayChar_BS84C12A(displayValueHex);
 8002c82:	e7cd      	b.n	8002c20 <StartDefaultTask+0xc>
 8002c84:	20008dc4 	.word	0x20008dc4
 8002c88:	20000389 	.word	0x20000389
 8002c8c:	20008c7a 	.word	0x20008c7a
 8002c90:	20008c70 	.word	0x20008c70
 8002c94:	20008c3c 	.word	0x20008c3c

08002c98 <android_task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_android_task */
void android_task(void *argument)
{
 8002c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN android_task */
	/* Infinite loop */
	for(;;)
	{
#if ANDROID_INTERFACE_ENABLE == 1
		if(Data_Reciption)
 8002ca0:	4bbe      	ldr	r3, [pc, #760]	; (8002f9c <android_task+0x304>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8214 	beq.w	80030d2 <android_task+0x43a>
		{
			Data_Reciption=0;
 8002caa:	4bbc      	ldr	r3, [pc, #752]	; (8002f9c <android_task+0x304>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	701a      	strb	r2, [r3, #0]
			if (received_data[0] == USB_SOF && received_data[USB_PACKET_LENGTH-1] == USB_EOF)
 8002cb0:	4bbb      	ldr	r3, [pc, #748]	; (8002fa0 <android_task+0x308>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b13      	cmp	r3, #19
 8002cb6:	f040 820c 	bne.w	80030d2 <android_task+0x43a>
 8002cba:	4bb9      	ldr	r3, [pc, #740]	; (8002fa0 <android_task+0x308>)
 8002cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cc0:	2b12      	cmp	r3, #18
 8002cc2:	f040 8206 	bne.w	80030d2 <android_task+0x43a>
			{
				data_id = received_data[1];
 8002cc6:	4bb6      	ldr	r3, [pc, #728]	; (8002fa0 <android_task+0x308>)
 8002cc8:	785a      	ldrb	r2, [r3, #1]
 8002cca:	4bb6      	ldr	r3, [pc, #728]	; (8002fa4 <android_task+0x30c>)
 8002ccc:	701a      	strb	r2, [r3, #0]
				cmd_id = received_data[2];
 8002cce:	4bb4      	ldr	r3, [pc, #720]	; (8002fa0 <android_task+0x308>)
 8002cd0:	789a      	ldrb	r2, [r3, #2]
 8002cd2:	4bb5      	ldr	r3, [pc, #724]	; (8002fa8 <android_task+0x310>)
 8002cd4:	701a      	strb	r2, [r3, #0]
				switch(data_id)
 8002cd6:	4bb3      	ldr	r3, [pc, #716]	; (8002fa4 <android_task+0x30c>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	2b1f      	cmp	r3, #31
 8002cde:	f200 81fb 	bhi.w	80030d8 <android_task+0x440>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <android_task+0x50>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002d69 	.word	0x08002d69
 8002cec:	08002d73 	.word	0x08002d73
 8002cf0:	08002e53 	.word	0x08002e53
 8002cf4:	08002ed1 	.word	0x08002ed1
 8002cf8:	080030d9 	.word	0x080030d9
 8002cfc:	08002f35 	.word	0x08002f35
 8002d00:	080030d9 	.word	0x080030d9
 8002d04:	08003019 	.word	0x08003019
 8002d08:	08003057 	.word	0x08003057
 8002d0c:	080030d9 	.word	0x080030d9
 8002d10:	080030d9 	.word	0x080030d9
 8002d14:	080030d9 	.word	0x080030d9
 8002d18:	080030d9 	.word	0x080030d9
 8002d1c:	080030d9 	.word	0x080030d9
 8002d20:	080030d9 	.word	0x080030d9
 8002d24:	080030d9 	.word	0x080030d9
 8002d28:	080030d9 	.word	0x080030d9
 8002d2c:	08003095 	.word	0x08003095
 8002d30:	080030d9 	.word	0x080030d9
 8002d34:	080030d9 	.word	0x080030d9
 8002d38:	080030d9 	.word	0x080030d9
 8002d3c:	080030d9 	.word	0x080030d9
 8002d40:	080030d9 	.word	0x080030d9
 8002d44:	080030d9 	.word	0x080030d9
 8002d48:	080030d9 	.word	0x080030d9
 8002d4c:	080030d9 	.word	0x080030d9
 8002d50:	080030d9 	.word	0x080030d9
 8002d54:	080030d9 	.word	0x080030d9
 8002d58:	080030d9 	.word	0x080030d9
 8002d5c:	080030d9 	.word	0x080030d9
 8002d60:	080030d9 	.word	0x080030d9
 8002d64:	08002f71 	.word	0x08002f71
				{
					case HANDSHAKE:
						 Send_Response(HANDSHAKE,1);
 8002d68:	2101      	movs	r1, #1
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f7fe fa36 	bl	80011dc <Send_Response>
						 break;
 8002d70:	e1b2      	b.n	80030d8 <android_task+0x440>
					case START_OF_COOKING:
#if 					TM1668_DRIVE_ENABLE == 1
						 initialOnOffCnt = 0;
#endif
						 androidProcessStruct.startofCooking = 1;
 8002d72:	4a8e      	ldr	r2, [pc, #568]	; (8002fac <android_task+0x314>)
 8002d74:	7813      	ldrb	r3, [r2, #0]
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	7013      	strb	r3, [r2, #0]
//						 androidProcessStruct.endOfCooking = 0;
						 androidProcessStruct.sendTempAckOnce = 0;
 8002d7c:	4a8b      	ldr	r2, [pc, #556]	; (8002fac <android_task+0x314>)
 8002d7e:	7813      	ldrb	r3, [r2, #0]
 8002d80:	f36f 0382 	bfc	r3, #2, #1
 8002d84:	7013      	strb	r3, [r2, #0]
						 clearErrors();
 8002d86:	f7fe f9eb 	bl	8001160 <clearErrors>
						 clearErrorCounts();
 8002d8a:	f7fe f9d1 	bl	8001130 <clearErrorCounts>
						 if(received_data[2] != 0)
 8002d8e:	4b84      	ldr	r3, [pc, #528]	; (8002fa0 <android_task+0x308>)
 8002d90:	789b      	ldrb	r3, [r3, #2]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d03c      	beq.n	8002e10 <android_task+0x178>
						 {
							 dutyCycle = getDCMotorlevels(miscellaneousSetting.defaultMotorDutyCycleAuto);
 8002d96:	4b86      	ldr	r3, [pc, #536]	; (8002fb0 <android_task+0x318>)
 8002d98:	885b      	ldrh	r3, [r3, #2]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fec9 	bl	8001b34 <getDCMotorlevels>
 8002da2:	4603      	mov	r3, r0
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dac:	4b81      	ldr	r3, [pc, #516]	; (8002fb4 <android_task+0x31c>)
 8002dae:	edc3 7a00 	vstr	s15, [r3]
							 drumMotor = dcMotorInit;
 8002db2:	4b81      	ldr	r3, [pc, #516]	; (8002fb8 <android_task+0x320>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
							 osDelay(20);
 8002db8:	2014      	movs	r0, #20
 8002dba:	f00a fb49 	bl	800d450 <osDelay>
							 androidProcessStruct.temperatureAutoMode = 1;
 8002dbe:	4a7b      	ldr	r2, [pc, #492]	; (8002fac <android_task+0x314>)
 8002dc0:	7813      	ldrb	r3, [r2, #0]
 8002dc2:	f043 0302 	orr.w	r3, r3, #2
 8002dc6:	7013      	strb	r3, [r2, #0]
							 androidProcessStruct.manualMode = 0;
 8002dc8:	4a78      	ldr	r2, [pc, #480]	; (8002fac <android_task+0x314>)
 8002dca:	7813      	ldrb	r3, [r2, #0]
 8002dcc:	f36f 03c3 	bfc	r3, #3, #1
 8002dd0:	7013      	strb	r3, [r2, #0]
							 if(received_data[3] != 0)
 8002dd2:	4b73      	ldr	r3, [pc, #460]	; (8002fa0 <android_task+0x308>)
 8002dd4:	78db      	ldrb	r3, [r3, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00c      	beq.n	8002df4 <android_task+0x15c>
							 {
								 dataAndroid = (( received_data[3] << 8) | (received_data[2]));
 8002dda:	4b71      	ldr	r3, [pc, #452]	; (8002fa0 <android_task+0x308>)
 8002ddc:	78db      	ldrb	r3, [r3, #3]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	b21a      	sxth	r2, r3
 8002de2:	4b6f      	ldr	r3, [pc, #444]	; (8002fa0 <android_task+0x308>)
 8002de4:	789b      	ldrb	r3, [r3, #2]
 8002de6:	b21b      	sxth	r3, r3
 8002de8:	4313      	orrs	r3, r2
 8002dea:	b21b      	sxth	r3, r3
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	4b73      	ldr	r3, [pc, #460]	; (8002fbc <android_task+0x324>)
 8002df0:	801a      	strh	r2, [r3, #0]
 8002df2:	e004      	b.n	8002dfe <android_task+0x166>
							 }
							 else
							 {
								 dataAndroid = cmd_id;
 8002df4:	4b6c      	ldr	r3, [pc, #432]	; (8002fa8 <android_task+0x310>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	4b70      	ldr	r3, [pc, #448]	; (8002fbc <android_task+0x324>)
 8002dfc:	801a      	strh	r2, [r3, #0]
							 }
							 Process_WOKIE_Control(HEATER_ON_TEMP, dataAndroid);
 8002dfe:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <android_task+0x324>)
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	4619      	mov	r1, r3
 8002e04:	2002      	movs	r0, #2
 8002e06:	f7fe fec1 	bl	8001b8c <Process_WOKIE_Control>
							 Send_Status_Wait_ACK();
 8002e0a:	f7fe fa0b 	bl	8001224 <Send_Status_Wait_ACK>
							 osDelay(20);
							 Send_Status_data();
							 androidProcessStruct.temperatureAutoMode = 0;
							 androidProcessStruct.manualMode = 1;
						 }
						break;
 8002e0e:	e163      	b.n	80030d8 <android_task+0x440>
							 dutyCycle = getDCMotorlevels(miscellaneousSetting.defaultMotorDutyCycleManual);
 8002e10:	4b67      	ldr	r3, [pc, #412]	; (8002fb0 <android_task+0x318>)
 8002e12:	889b      	ldrh	r3, [r3, #4]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fe8c 	bl	8001b34 <getDCMotorlevels>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e26:	4b63      	ldr	r3, [pc, #396]	; (8002fb4 <android_task+0x31c>)
 8002e28:	edc3 7a00 	vstr	s15, [r3]
							 drumMotor = dcMotorInit;
 8002e2c:	4b62      	ldr	r3, [pc, #392]	; (8002fb8 <android_task+0x320>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
							 osDelay(20);
 8002e32:	2014      	movs	r0, #20
 8002e34:	f00a fb0c 	bl	800d450 <osDelay>
							 Send_Status_data();
 8002e38:	f7fe fa3e 	bl	80012b8 <Send_Status_data>
							 androidProcessStruct.temperatureAutoMode = 0;
 8002e3c:	4a5b      	ldr	r2, [pc, #364]	; (8002fac <android_task+0x314>)
 8002e3e:	7813      	ldrb	r3, [r2, #0]
 8002e40:	f36f 0341 	bfc	r3, #1, #1
 8002e44:	7013      	strb	r3, [r2, #0]
							 androidProcessStruct.manualMode = 1;
 8002e46:	4a59      	ldr	r2, [pc, #356]	; (8002fac <android_task+0x314>)
 8002e48:	7813      	ldrb	r3, [r2, #0]
 8002e4a:	f043 0308 	orr.w	r3, r3, #8
 8002e4e:	7013      	strb	r3, [r2, #0]
						break;
 8002e50:	e142      	b.n	80030d8 <android_task+0x440>
					case END_OF_COOKING:
				#if BS84C12A_DRIVE_ENABLE
						 wattageLevel_BS84C12A=0;
 8002e52:	4b5b      	ldr	r3, [pc, #364]	; (8002fc0 <android_task+0x328>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
						 wattageSettingDACCounts_BS84C12A = getWattageLevelCount_BS84C12A(wattageLevel_BS84C12A);
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <android_task+0x328>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe fdbb 	bl	80019d8 <getWattageLevelCount_BS84C12A>
 8002e62:	4603      	mov	r3, r0
 8002e64:	461a      	mov	r2, r3
 8002e66:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <android_task+0x32c>)
 8002e68:	801a      	strh	r2, [r3, #0]
						 dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8002e6a:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <android_task+0x32c>)
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fbbf 	bl	80035f4 <dacSetVoltage>
						 if((uartPrintArr[2] != 'F' && uartPrintArr[3] != 'F' ) || (uartPrintArr[1] == '0' && uartPrintArr[2] == 'N' ))
						 {
							 keyPressState = pressOnOff;
						 }
				#endif
						 dutyCycle = 0;
 8002e76:	4b4f      	ldr	r3, [pc, #316]	; (8002fb4 <android_task+0x31c>)
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
						 drumMotor = dcMotorInit;
 8002e7e:	4b4e      	ldr	r3, [pc, #312]	; (8002fb8 <android_task+0x320>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
						 cleanDutyCycle = 0;
 8002e84:	4b50      	ldr	r3, [pc, #320]	; (8002fc8 <android_task+0x330>)
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
						 motorRotateCleaning = dcMotorInit;
 8002e8c:	4b4f      	ldr	r3, [pc, #316]	; (8002fcc <android_task+0x334>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]

						 wattageMode.valueToSet = 0;
 8002e92:	4b4f      	ldr	r3, [pc, #316]	; (8002fd0 <android_task+0x338>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	805a      	strh	r2, [r3, #2]

						 temperatureMode.valueToSet = 0;
 8002e98:	4b4e      	ldr	r3, [pc, #312]	; (8002fd4 <android_task+0x33c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	805a      	strh	r2, [r3, #2]
						 temperatureMode.valueToSet = 0;
 8002e9e:	4b4d      	ldr	r3, [pc, #308]	; (8002fd4 <android_task+0x33c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	805a      	strh	r2, [r3, #2]

						 inductionMode.temperatureMode = 0;
 8002ea4:	4a4c      	ldr	r2, [pc, #304]	; (8002fd8 <android_task+0x340>)
 8002ea6:	7813      	ldrb	r3, [r2, #0]
 8002ea8:	f36f 0300 	bfc	r3, #0, #1
 8002eac:	7013      	strb	r3, [r2, #0]
						 inductionMode.wattageMode = 0;
 8002eae:	4a4a      	ldr	r2, [pc, #296]	; (8002fd8 <android_task+0x340>)
 8002eb0:	7813      	ldrb	r3, [r2, #0]
 8002eb2:	f36f 0341 	bfc	r3, #1, #1
 8002eb6:	7013      	strb	r3, [r2, #0]

						 clearErrors();
 8002eb8:	f7fe f952 	bl	8001160 <clearErrors>
						 clearErrorCounts();
 8002ebc:	f7fe f938 	bl	8001130 <clearErrorCounts>

						 clearProcessVariables();
 8002ec0:	f7fe f96e 	bl	80011a0 <clearProcessVariables>
//						 androidProcessStruct.endOfCooking = 1;

//						 timerCnt.endOfCookingCnt = 0;

						 Send_Standby_Status();
 8002ec4:	f7fe fa44 	bl	8001350 <Send_Standby_Status>
						 osDelay(15);
 8002ec8:	200f      	movs	r0, #15
 8002eca:	f00a fac1 	bl	800d450 <osDelay>
//						 Send_Response(END_OF_COOKING,1);
						 break;
 8002ece:	e103      	b.n	80030d8 <android_task+0x440>
					case INSTRUCTION_SET:
						 if(androidProcessStruct.manualMode == 1)
 8002ed0:	4b36      	ldr	r3, [pc, #216]	; (8002fac <android_task+0x314>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80fb 	beq.w	80030d6 <android_task+0x43e>
						 {
							 dataAndroid = ((received_data[4]<<8) | (received_data[3]));
 8002ee0:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <android_task+0x308>)
 8002ee2:	791b      	ldrb	r3, [r3, #4]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	b21a      	sxth	r2, r3
 8002ee8:	4b2d      	ldr	r3, [pc, #180]	; (8002fa0 <android_task+0x308>)
 8002eea:	78db      	ldrb	r3, [r3, #3]
 8002eec:	b21b      	sxth	r3, r3
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	b21b      	sxth	r3, r3
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <android_task+0x324>)
 8002ef6:	801a      	strh	r2, [r3, #0]
							 memcpy(and_ack, received_data, 64);
 8002ef8:	4a38      	ldr	r2, [pc, #224]	; (8002fdc <android_task+0x344>)
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <android_task+0x308>)
 8002efc:	4610      	mov	r0, r2
 8002efe:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002f02:	4602      	mov	r2, r0
 8002f04:	4619      	mov	r1, r3
 8002f06:	f8d1 c000 	ldr.w	ip, [r1]
 8002f0a:	684e      	ldr	r6, [r1, #4]
 8002f0c:	688d      	ldr	r5, [r1, #8]
 8002f0e:	68c9      	ldr	r1, [r1, #12]
 8002f10:	f8c2 c000 	str.w	ip, [r2]
 8002f14:	6056      	str	r6, [r2, #4]
 8002f16:	6095      	str	r5, [r2, #8]
 8002f18:	60d1      	str	r1, [r2, #12]
 8002f1a:	3310      	adds	r3, #16
 8002f1c:	3010      	adds	r0, #16
 8002f1e:	42a3      	cmp	r3, r4
 8002f20:	d1ef      	bne.n	8002f02 <android_task+0x26a>
							 Process_WOKIE_Control(cmd_id, dataAndroid);
 8002f22:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <android_task+0x310>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	4a25      	ldr	r2, [pc, #148]	; (8002fbc <android_task+0x324>)
 8002f28:	8812      	ldrh	r2, [r2, #0]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fe fe2d 	bl	8001b8c <Process_WOKIE_Control>
						 }
						 break;
 8002f32:	e0d0      	b.n	80030d6 <android_task+0x43e>
					case ROTATE_ID:
						 motorRotateCleaningTime = (DEFAULT_ROTATE_TIME / TIME_500MS_IN_SEC);				// 1 secs
 8002f34:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <android_task+0x348>)
 8002f36:	2202      	movs	r2, #2
 8002f38:	801a      	strh	r2, [r3, #0]
						 cleanDutyCycle = getDCMotorlevels(miscellaneousSetting.cleanMotorSpeed);
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <android_task+0x318>)
 8002f3c:	8a1b      	ldrh	r3, [r3, #16]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fdf7 	bl	8001b34 <getDCMotorlevels>
 8002f46:	4603      	mov	r3, r0
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <android_task+0x330>)
 8002f52:	edc3 7a00 	vstr	s15, [r3]
						 motorRotateCleaning = dcMotorInit;
 8002f56:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <android_task+0x334>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	701a      	strb	r2, [r3, #0]
						 tempCmdID = ROTATE_ID;
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <android_task+0x34c>)
 8002f5e:	2206      	movs	r2, #6
 8002f60:	701a      	strb	r2, [r3, #0]
						 Send_Response(tempCmdID,1);
 8002f62:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <android_task+0x34c>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe f937 	bl	80011dc <Send_Response>
						 break;
 8002f6e:	e0b3      	b.n	80030d8 <android_task+0x440>
					case MC_SETTINGS:
			#if			ANDROID_MC_SETTINGS == 1
						 if(cmd_id == 1)
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <android_task+0x310>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d105      	bne.n	8002f84 <android_task+0x2ec>
						 {
							 memcpy(&machineSettings,&received_data[3],sizeof(machineSettings));
 8002f78:	2224      	movs	r2, #36	; 0x24
 8002f7a:	491b      	ldr	r1, [pc, #108]	; (8002fe8 <android_task+0x350>)
 8002f7c:	481b      	ldr	r0, [pc, #108]	; (8002fec <android_task+0x354>)
 8002f7e:	f00d fc57 	bl	8010830 <memcpy>
 8002f82:	e040      	b.n	8003006 <android_task+0x36e>
						 }
						 else if(cmd_id == 2)
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <android_task+0x310>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d133      	bne.n	8002ff4 <android_task+0x35c>
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <android_task+0x308>)
 8002f8e:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8002f92:	461a      	mov	r2, r3
						 {
							 memcpy(&temperatureSensorOffset,&received_data[3],sizeof(temperatureSensorOffset));
 8002f94:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <android_task+0x358>)
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e035      	b.n	8003006 <android_task+0x36e>
 8002f9a:	bf00      	nop
 8002f9c:	20008c80 	.word	0x20008c80
 8002fa0:	20008e64 	.word	0x20008e64
 8002fa4:	20008c81 	.word	0x20008c81
 8002fa8:	20008f06 	.word	0x20008f06
 8002fac:	20008c54 	.word	0x20008c54
 8002fb0:	20008c40 	.word	0x20008c40
 8002fb4:	20008cdc 	.word	0x20008cdc
 8002fb8:	20008c59 	.word	0x20008c59
 8002fbc:	2000038a 	.word	0x2000038a
 8002fc0:	20008f6c 	.word	0x20008f6c
 8002fc4:	20008c78 	.word	0x20008c78
 8002fc8:	20008e18 	.word	0x20008e18
 8002fcc:	20008c66 	.word	0x20008c66
 8002fd0:	20008c68 	.word	0x20008c68
 8002fd4:	20008c60 	.word	0x20008c60
 8002fd8:	20008c5c 	.word	0x20008c5c
 8002fdc:	2000902c 	.word	0x2000902c
 8002fe0:	20008f04 	.word	0x20008f04
 8002fe4:	20008f6d 	.word	0x20008f6d
 8002fe8:	20008e67 	.word	0x20008e67
 8002fec:	20008bec 	.word	0x20008bec
 8002ff0:	20008c10 	.word	0x20008c10
						 }
						 else if(cmd_id == 3)
 8002ff4:	4b3f      	ldr	r3, [pc, #252]	; (80030f4 <android_task+0x45c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d104      	bne.n	8003006 <android_task+0x36e>
						 {
							 memcpy(&miscellaneousSetting,&received_data[3],sizeof(miscellaneousSetting));
 8002ffc:	2212      	movs	r2, #18
 8002ffe:	493e      	ldr	r1, [pc, #248]	; (80030f8 <android_task+0x460>)
 8003000:	483e      	ldr	r0, [pc, #248]	; (80030fc <android_task+0x464>)
 8003002:	f00d fc15 	bl	8010830 <memcpy>
						 }
						 parameterValueAssignment();
 8003006:	f7fe fae3 	bl	80015d0 <parameterValueAssignment>
			#endif
						 Send_Response(MC_SETTINGS,cmd_id);
 800300a:	4b3a      	ldr	r3, [pc, #232]	; (80030f4 <android_task+0x45c>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	4619      	mov	r1, r3
 8003010:	2020      	movs	r0, #32
 8003012:	f7fe f8e3 	bl	80011dc <Send_Response>
						 break;
 8003016:	e05f      	b.n	80030d8 <android_task+0x440>
					case EOD_CLEANING_ID:
						 motorRotateCleaningTime = miscellaneousSetting.endOfDayCleaningTime;
 8003018:	4b38      	ldr	r3, [pc, #224]	; (80030fc <android_task+0x464>)
 800301a:	89da      	ldrh	r2, [r3, #14]
 800301c:	4b38      	ldr	r3, [pc, #224]	; (8003100 <android_task+0x468>)
 800301e:	801a      	strh	r2, [r3, #0]
						 cleanDutyCycle = getDCMotorlevels(miscellaneousSetting.cleanMotorSpeed);
 8003020:	4b36      	ldr	r3, [pc, #216]	; (80030fc <android_task+0x464>)
 8003022:	8a1b      	ldrh	r3, [r3, #16]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fd84 	bl	8001b34 <getDCMotorlevels>
 800302c:	4603      	mov	r3, r0
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003036:	4b33      	ldr	r3, [pc, #204]	; (8003104 <android_task+0x46c>)
 8003038:	edc3 7a00 	vstr	s15, [r3]
						 motorRotateCleaning =dcMotorInit;
 800303c:	4b32      	ldr	r3, [pc, #200]	; (8003108 <android_task+0x470>)
 800303e:	2201      	movs	r2, #1
 8003040:	701a      	strb	r2, [r3, #0]
						 tempCmdID = EOD_CLEANING_ID;
 8003042:	4b32      	ldr	r3, [pc, #200]	; (800310c <android_task+0x474>)
 8003044:	2208      	movs	r2, #8
 8003046:	701a      	strb	r2, [r3, #0]
						 Send_Response(tempCmdID,1);
 8003048:	4b30      	ldr	r3, [pc, #192]	; (800310c <android_task+0x474>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2101      	movs	r1, #1
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe f8c4 	bl	80011dc <Send_Response>
						 break;
 8003054:	e040      	b.n	80030d8 <android_task+0x440>
					case POST_CLEANING_ID:
						 motorRotateCleaningTime = miscellaneousSetting.endOfRecipeCleaningTime;
 8003056:	4b29      	ldr	r3, [pc, #164]	; (80030fc <android_task+0x464>)
 8003058:	899a      	ldrh	r2, [r3, #12]
 800305a:	4b29      	ldr	r3, [pc, #164]	; (8003100 <android_task+0x468>)
 800305c:	801a      	strh	r2, [r3, #0]
						 cleanDutyCycle = getDCMotorlevels(miscellaneousSetting.cleanMotorSpeed);
 800305e:	4b27      	ldr	r3, [pc, #156]	; (80030fc <android_task+0x464>)
 8003060:	8a1b      	ldrh	r3, [r3, #16]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe fd65 	bl	8001b34 <getDCMotorlevels>
 800306a:	4603      	mov	r3, r0
 800306c:	ee07 3a90 	vmov	s15, r3
 8003070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003074:	4b23      	ldr	r3, [pc, #140]	; (8003104 <android_task+0x46c>)
 8003076:	edc3 7a00 	vstr	s15, [r3]
						 motorRotateCleaning =dcMotorInit;
 800307a:	4b23      	ldr	r3, [pc, #140]	; (8003108 <android_task+0x470>)
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
						 tempCmdID = POST_CLEANING_ID;
 8003080:	4b22      	ldr	r3, [pc, #136]	; (800310c <android_task+0x474>)
 8003082:	2209      	movs	r2, #9
 8003084:	701a      	strb	r2, [r3, #0]
						 Send_Response(tempCmdID,1);
 8003086:	4b21      	ldr	r3, [pc, #132]	; (800310c <android_task+0x474>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2101      	movs	r1, #1
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe f8a5 	bl	80011dc <Send_Response>
						 break;
 8003092:	e021      	b.n	80030d8 <android_task+0x440>
					case MANUAL_CLEANING:
						 motorRotateCleaningTime = miscellaneousSetting.endOfRecipeCleaningTime;
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <android_task+0x464>)
 8003096:	899a      	ldrh	r2, [r3, #12]
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <android_task+0x468>)
 800309a:	801a      	strh	r2, [r3, #0]
						 cleanDutyCycle = getDCMotorlevels(miscellaneousSetting.cleanMotorSpeed);
 800309c:	4b17      	ldr	r3, [pc, #92]	; (80030fc <android_task+0x464>)
 800309e:	8a1b      	ldrh	r3, [r3, #16]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fd46 	bl	8001b34 <getDCMotorlevels>
 80030a8:	4603      	mov	r3, r0
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b2:	4b14      	ldr	r3, [pc, #80]	; (8003104 <android_task+0x46c>)
 80030b4:	edc3 7a00 	vstr	s15, [r3]
						 motorRotateCleaning = dcMotorInit;
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <android_task+0x470>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
						 tempCmdID = MANUAL_CLEANING;
 80030be:	4b13      	ldr	r3, [pc, #76]	; (800310c <android_task+0x474>)
 80030c0:	2212      	movs	r2, #18
 80030c2:	701a      	strb	r2, [r3, #0]
						 Send_Response(tempCmdID,1);
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <android_task+0x474>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe f886 	bl	80011dc <Send_Response>
						 break;
 80030d0:	e002      	b.n	80030d8 <android_task+0x440>

				}
			}
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <android_task+0x440>
						 break;
 80030d6:	bf00      	nop
		}
		if(	androidProcessStruct.startofCooking )
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <android_task+0x478>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <android_task+0x452>
		{
			Send_Status_Wait_ACK();
 80030e6:	f7fe f89d 	bl	8001224 <Send_Status_Wait_ACK>
			osDelay(15);
			timerCnt.endOfCookingCnt = 0;
			androidProcessStruct.endOfCooking = 0;
		}*/
#endif
		osDelay(1000);
 80030ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ee:	f00a f9af 	bl	800d450 <osDelay>
		if(Data_Reciption)
 80030f2:	e5d5      	b.n	8002ca0 <android_task+0x8>
 80030f4:	20008f06 	.word	0x20008f06
 80030f8:	20008e67 	.word	0x20008e67
 80030fc:	20008c40 	.word	0x20008c40
 8003100:	20008f04 	.word	0x20008f04
 8003104:	20008e18 	.word	0x20008e18
 8003108:	20008c66 	.word	0x20008c66
 800310c:	20008f6d 	.word	0x20008f6d
 8003110:	20008c54 	.word	0x20008c54

08003114 <InductionControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InductionControlTask */
void InductionControlTask(void *argument)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	  }
	#endif
	osDelay(250);
#elif BS84C12A_DRIVE_ENABLE == 1
	#if 	WATTAGE_MODE_ENABLE == 1
	  if(inductionMode.wattageMode == 1 && processError.processStopError == 0)
 800311c:	4b1b      	ldr	r3, [pc, #108]	; (800318c <InductionControlTask+0x78>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00f      	beq.n	800314a <InductionControlTask+0x36>
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <InductionControlTask+0x7c>)
 800312c:	789b      	ldrb	r3, [r3, #2]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d108      	bne.n	800314a <InductionControlTask+0x36>
	  {
		  dacSetVoltage(wattageSettingDACCounts_BS84C12A, 0);
 8003138:	4b16      	ldr	r3, [pc, #88]	; (8003194 <InductionControlTask+0x80>)
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fa58 	bl	80035f4 <dacSetVoltage>
		  osDelay(20);
 8003144:	2014      	movs	r0, #20
 8003146:	f00a f983 	bl	800d450 <osDelay>
	  }
	#endif
	#if 	TEMPERATURE_CONTROL_MODE == 1
	  if(inductionMode.temperatureMode == 1 && processError.processStopError == 0)
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <InductionControlTask+0x78>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d014      	beq.n	8003182 <InductionControlTask+0x6e>
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <InductionControlTask+0x7c>)
 800315a:	789b      	ldrb	r3, [r3, #2]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10d      	bne.n	8003182 <InductionControlTask+0x6e>
	  {
		  temperatureControlCurve(temperatureMode.valueToSet, avgTemperature);
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <InductionControlTask+0x84>)
 8003168:	885b      	ldrh	r3, [r3, #2]
 800316a:	4a0c      	ldr	r2, [pc, #48]	; (800319c <InductionControlTask+0x88>)
 800316c:	edd2 7a00 	vldr	s15, [r2]
 8003170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003174:	ee17 2a90 	vmov	r2, s15
 8003178:	b292      	uxth	r2, r2
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe fdef 	bl	8001d60 <temperatureControlCurve>
	  }
	#endif
	osDelay(2000);
 8003182:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003186:	f00a f963 	bl	800d450 <osDelay>
	  if(inductionMode.wattageMode == 1 && processError.processStopError == 0)
 800318a:	e7c7      	b.n	800311c <InductionControlTask+0x8>
 800318c:	20008c5c 	.word	0x20008c5c
 8003190:	20008c3c 	.word	0x20008c3c
 8003194:	20008c78 	.word	0x20008c78
 8003198:	20008c60 	.word	0x20008c60
 800319c:	200003e0 	.word	0x200003e0

080031a0 <MotorControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MotorControlTask */
void MotorControlTask(void *argument)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MotorControlTask */
  /* Infinite loop */
  for(;;)
  {
#if DC_MOTOR_TASK_ENABLE == 1
	switch(drumMotor)
 80031a8:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <MotorControlTask+0x118>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d012      	beq.n	80031d6 <MotorControlTask+0x36>
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	dc13      	bgt.n	80031dc <MotorControlTask+0x3c>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d010      	beq.n	80031da <MotorControlTask+0x3a>
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d10f      	bne.n	80031dc <MotorControlTask+0x3c>
			break;
		case dcMotorInit:
#if SPARE_DC_PWM_EN == 1
			 dcMotorSetPWM(dutyCycle, spareDCMotor, CLOCKWISE);
#elif DRUM_DC_PWM_EN == 1
			 dcMotorSetPWM(dutyCycle, drumDCMotor, ANTICLOCKWISE);
 80031bc:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <MotorControlTask+0x11c>)
 80031be:	edd3 7a00 	vldr	s15, [r3]
 80031c2:	2100      	movs	r1, #0
 80031c4:	2000      	movs	r0, #0
 80031c6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ca:	f7fd ff45 	bl	8001058 <dcMotorSetPWM>
#endif
			 drumMotor = dcMotorCompleted;
 80031ce:	4b3a      	ldr	r3, [pc, #232]	; (80032b8 <MotorControlTask+0x118>)
 80031d0:	2203      	movs	r2, #3
 80031d2:	701a      	strb	r2, [r3, #0]
			 break;
 80031d4:	e002      	b.n	80031dc <MotorControlTask+0x3c>
		case dcMotorCompleted:
			 break;
 80031d6:	bf00      	nop
 80031d8:	e000      	b.n	80031dc <MotorControlTask+0x3c>
			break;
 80031da:	bf00      	nop
	}
	switch(motorRotateCleaning)
 80031dc:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <MotorControlTask+0x120>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d853      	bhi.n	800328c <MotorControlTask+0xec>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <MotorControlTask+0x4c>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	0800328d 	.word	0x0800328d
 80031f0:	080031fd 	.word	0x080031fd
 80031f4:	08003241 	.word	0x08003241
 80031f8:	08003283 	.word	0x08003283
			break;
		case dcMotorInit:
#if SPARE_DC_PWM_EN == 1
			 dcMotorSetPWM(cleanDutyCycle, spareDCMotor, CLOCKWISE);
#elif DRUM_DC_PWM_EN == 1
			 dcMotorSetPWM(cleanDutyCycle, drumDCMotor, ANTICLOCKWISE);
 80031fc:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <MotorControlTask+0x124>)
 80031fe:	edd3 7a00 	vldr	s15, [r3]
 8003202:	2100      	movs	r1, #0
 8003204:	2000      	movs	r0, #0
 8003206:	eeb0 0a67 	vmov.f32	s0, s15
 800320a:	f7fd ff25 	bl	8001058 <dcMotorSetPWM>
#endif
			 motorRotateCleaningCnt = 0;
 800320e:	4b2e      	ldr	r3, [pc, #184]	; (80032c8 <MotorControlTask+0x128>)
 8003210:	2200      	movs	r2, #0
 8003212:	801a      	strh	r2, [r3, #0]
			 if(cleanDutyCycle <= 0)
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <MotorControlTask+0x124>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	d809      	bhi.n	8003238 <MotorControlTask+0x98>
			 {
				 motorRotateCleaning = dcMotorCompleted;
 8003224:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <MotorControlTask+0x120>)
 8003226:	2203      	movs	r2, #3
 8003228:	701a      	strb	r2, [r3, #0]
				 dcMotorSetPWM(0, drumDCMotor, ANTICLOCKWISE);
 800322a:	2100      	movs	r1, #0
 800322c:	2000      	movs	r0, #0
 800322e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80032cc <MotorControlTask+0x12c>
 8003232:	f7fd ff11 	bl	8001058 <dcMotorSetPWM>
			 }
			 else
			 {
				 motorRotateCleaning = dcMotorWaitForTimeComlete;
			 }
			 break;
 8003236:	e029      	b.n	800328c <MotorControlTask+0xec>
				 motorRotateCleaning = dcMotorWaitForTimeComlete;
 8003238:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <MotorControlTask+0x120>)
 800323a:	2202      	movs	r2, #2
 800323c:	701a      	strb	r2, [r3, #0]
			 break;
 800323e:	e025      	b.n	800328c <MotorControlTask+0xec>
		case dcMotorWaitForTimeComlete:
			 if(motorRotateCleaningCnt++ >= motorRotateCleaningTime)
 8003240:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <MotorControlTask+0x128>)
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	b291      	uxth	r1, r2
 8003248:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <MotorControlTask+0x128>)
 800324a:	8011      	strh	r1, [r2, #0]
 800324c:	4a20      	ldr	r2, [pc, #128]	; (80032d0 <MotorControlTask+0x130>)
 800324e:	8812      	ldrh	r2, [r2, #0]
 8003250:	4293      	cmp	r3, r2
 8003252:	d31a      	bcc.n	800328a <MotorControlTask+0xea>
			 {
				 cleanDutyCycle = 0;
 8003254:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <MotorControlTask+0x124>)
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
				 dcMotorSetPWM(cleanDutyCycle, drumDCMotor, ANTICLOCKWISE);
 800325c:	4b19      	ldr	r3, [pc, #100]	; (80032c4 <MotorControlTask+0x124>)
 800325e:	edd3 7a00 	vldr	s15, [r3]
 8003262:	2100      	movs	r1, #0
 8003264:	2000      	movs	r0, #0
 8003266:	eeb0 0a67 	vmov.f32	s0, s15
 800326a:	f7fd fef5 	bl	8001058 <dcMotorSetPWM>
				 Send_Response(tempCmdID,2);
 800326e:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <MotorControlTask+0x134>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2102      	movs	r1, #2
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd ffb1 	bl	80011dc <Send_Response>
				 motorRotateCleaning = dcMotorCompleted;
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <MotorControlTask+0x120>)
 800327c:	2203      	movs	r2, #3
 800327e:	701a      	strb	r2, [r3, #0]
			 }
			 break;
 8003280:	e003      	b.n	800328a <MotorControlTask+0xea>
		case dcMotorCompleted:
			 motorRotateCleaning = dcMotorIdle;
 8003282:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <MotorControlTask+0x120>)
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
			 break;
 8003288:	e000      	b.n	800328c <MotorControlTask+0xec>
			 break;
 800328a:	bf00      	nop
	}
	if(dutyCycle <= 0)
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <MotorControlTask+0x11c>)
 800328e:	edd3 7a00 	vldr	s15, [r3]
 8003292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329a:	d808      	bhi.n	80032ae <MotorControlTask+0x10e>
	{
	#if	BS84C12A_DRIVE_ENABLE == 1
		if(displayData != 'X')
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <MotorControlTask+0x138>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b58      	cmp	r3, #88	; 0x58
 80032a2:	d004      	beq.n	80032ae <MotorControlTask+0x10e>
		{
			 dacSetVoltage(INDUCTION_OFF_COUNT, 0);
 80032a4:	2100      	movs	r1, #0
 80032a6:	f240 1099 	movw	r0, #409	; 0x199
 80032aa:	f000 f9a3 	bl	80035f4 <dacSetVoltage>
		{
			 keyPressState = pressOnOff;
		}
	#endif
	}
	osDelay(500);
 80032ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032b2:	f00a f8cd 	bl	800d450 <osDelay>
	switch(drumMotor)
 80032b6:	e777      	b.n	80031a8 <MotorControlTask+0x8>
 80032b8:	20008c59 	.word	0x20008c59
 80032bc:	20008cdc 	.word	0x20008cdc
 80032c0:	20008c66 	.word	0x20008c66
 80032c4:	20008e18 	.word	0x20008e18
 80032c8:	2000901c 	.word	0x2000901c
 80032cc:	00000000 	.word	0x00000000
 80032d0:	20008f04 	.word	0x20008f04
 80032d4:	20008f6d 	.word	0x20008f6d
 80032d8:	20000389 	.word	0x20000389

080032dc <SensorReadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SensorReadTask */
void SensorReadTask(void *argument)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SensorReadTask */
  /* Infinite loop */
  for(;;)
  {
#if SPEED_SENSOR_ENABLE == 1
	  if(miscellaneousSetting.speedSensorEnable ==  1)
 80032e4:	4b96      	ldr	r3, [pc, #600]	; (8003540 <SensorReadTask+0x264>)
 80032e6:	895b      	ldrh	r3, [r3, #10]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d170      	bne.n	80033ce <SensorReadTask+0xf2>
	  {
		  current_speed = getSpeed();
 80032ec:	f7fe fb34 	bl	8001958 <getSpeed>
 80032f0:	eef0 7a40 	vmov.f32	s15, s0
 80032f4:	4b93      	ldr	r3, [pc, #588]	; (8003544 <SensorReadTask+0x268>)
 80032f6:	edc3 7a00 	vstr	s15, [r3]
		  if(current_speed < 2)
 80032fa:	4b92      	ldr	r3, [pc, #584]	; (8003544 <SensorReadTask+0x268>)
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330c:	d503      	bpl.n	8003316 <SensorReadTask+0x3a>
		  {
			  current_speed = previous_speed;
 800330e:	4b8e      	ldr	r3, [pc, #568]	; (8003548 <SensorReadTask+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a8c      	ldr	r2, [pc, #560]	; (8003544 <SensorReadTask+0x268>)
 8003314:	6013      	str	r3, [r2, #0]
		  }
		  speed_avg[speed_cnt] = (current_speed / GEAR_TOOTH_NUMBER);
 8003316:	4b8b      	ldr	r3, [pc, #556]	; (8003544 <SensorReadTask+0x268>)
 8003318:	ed93 7a00 	vldr	s14, [r3]
 800331c:	4b8b      	ldr	r3, [pc, #556]	; (800354c <SensorReadTask+0x270>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8003324:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003328:	4a89      	ldr	r2, [pc, #548]	; (8003550 <SensorReadTask+0x274>)
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	edc3 7a00 	vstr	s15, [r3]
		  sum_speed += speed_avg[speed_cnt];
 8003332:	4b86      	ldr	r3, [pc, #536]	; (800354c <SensorReadTask+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a86      	ldr	r2, [pc, #536]	; (8003550 <SensorReadTask+0x274>)
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	ed93 7a00 	vldr	s14, [r3]
 8003340:	4b84      	ldr	r3, [pc, #528]	; (8003554 <SensorReadTask+0x278>)
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334a:	4b82      	ldr	r3, [pc, #520]	; (8003554 <SensorReadTask+0x278>)
 800334c:	edc3 7a00 	vstr	s15, [r3]
		  if(speed_cnt++ >= SENSOR_AVG_CNT)
 8003350:	4b7e      	ldr	r3, [pc, #504]	; (800354c <SensorReadTask+0x270>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	497d      	ldr	r1, [pc, #500]	; (800354c <SensorReadTask+0x270>)
 8003358:	600a      	str	r2, [r1, #0]
 800335a:	2b09      	cmp	r3, #9
 800335c:	dd31      	ble.n	80033c2 <SensorReadTask+0xe6>
		  {
			  avg_speed = (float)sum_speed/(float)SENSOR_AVG_CNT;
 800335e:	4b7d      	ldr	r3, [pc, #500]	; (8003554 <SensorReadTask+0x278>)
 8003360:	ed93 7a00 	vldr	s14, [r3]
 8003364:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800336c:	4b7a      	ldr	r3, [pc, #488]	; (8003558 <SensorReadTask+0x27c>)
 800336e:	edc3 7a00 	vstr	s15, [r3]
			  sum_speed = 0;
 8003372:	4b78      	ldr	r3, [pc, #480]	; (8003554 <SensorReadTask+0x278>)
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
			  speed_cnt = 0;
 800337a:	4b74      	ldr	r3, [pc, #464]	; (800354c <SensorReadTask+0x270>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
			  if(avg_speed > 0)
 8003380:	4b75      	ldr	r3, [pc, #468]	; (8003558 <SensorReadTask+0x27c>)
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338e:	dd18      	ble.n	80033c2 <SensorReadTask+0xe6>
			  {
				  if(avg_speed >= 80)
 8003390:	4b71      	ldr	r3, [pc, #452]	; (8003558 <SensorReadTask+0x27c>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800355c <SensorReadTask+0x280>
 800339a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	db03      	blt.n	80033ac <SensorReadTask+0xd0>
				  {
					  avg_speed = 80;
 80033a4:	4b6c      	ldr	r3, [pc, #432]	; (8003558 <SensorReadTask+0x27c>)
 80033a6:	4a6e      	ldr	r2, [pc, #440]	; (8003560 <SensorReadTask+0x284>)
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e00a      	b.n	80033c2 <SensorReadTask+0xe6>
				  }
				  else
				  {
					  avg_speed = avg_speed *  (float)speedCorrectionFactor;
 80033ac:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <SensorReadTask+0x27c>)
 80033ae:	ed93 7a00 	vldr	s14, [r3]
 80033b2:	4b6c      	ldr	r3, [pc, #432]	; (8003564 <SensorReadTask+0x288>)
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033bc:	4b66      	ldr	r3, [pc, #408]	; (8003558 <SensorReadTask+0x27c>)
 80033be:	edc3 7a00 	vstr	s15, [r3]
#if			UART_DEBUG_EN == 1
				  HAL_UART_Transmit(&huart1, (uint8_t *)"Speed : Error Reading \r\n", sizeof("Speed : Error Reading \r\n"), 100);
#endif
			  }
		  }
		  previous_speed = current_speed;
 80033c2:	4b60      	ldr	r3, [pc, #384]	; (8003544 <SensorReadTask+0x268>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a60      	ldr	r2, [pc, #384]	; (8003548 <SensorReadTask+0x26c>)
 80033c8:	6013      	str	r3, [r2, #0]
		  speedSensorErrorCheck();
 80033ca:	f7fe f8c9 	bl	8001560 <speedSensorErrorCheck>
	  }
#endif
#if IR_TEMPERATURE_SENSOR_ENABLE == 1
	#if PROCESS_ERROR_ENABLE == 1
	  objTemperature = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TOBJ1);
 80033ce:	2107      	movs	r1, #7
 80033d0:	205a      	movs	r0, #90	; 0x5a
 80033d2:	f000 f9e1 	bl	8003798 <MLX90614_ReadTemp>
 80033d6:	eef0 7a40 	vmov.f32	s15, s0
 80033da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033de:	ee17 3a90 	vmov	r3, s15
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	4b60      	ldr	r3, [pc, #384]	; (8003568 <SensorReadTask+0x28c>)
 80033e6:	801a      	strh	r2, [r3, #0]
	  if(objTemperature == 0 || objTemperature > 400)
 80033e8:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <SensorReadTask+0x28c>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <SensorReadTask+0x11e>
 80033f0:	4b5d      	ldr	r3, [pc, #372]	; (8003568 <SensorReadTask+0x28c>)
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80033f8:	d91c      	bls.n	8003434 <SensorReadTask+0x158>
	  {
		  if(androidProcessStruct.startofCooking == 1)
 80033fa:	4b5c      	ldr	r3, [pc, #368]	; (800356c <SensorReadTask+0x290>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 8096 	beq.w	8003536 <SensorReadTask+0x25a>
		  {
			  if(timerCnt.temperatureSensorErrorCnt++ >= SENSOR_ERROR_CHECK_CNT)
 800340a:	4b59      	ldr	r3, [pc, #356]	; (8003570 <SensorReadTask+0x294>)
 800340c:	785b      	ldrb	r3, [r3, #1]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	b2d1      	uxtb	r1, r2
 8003412:	4a57      	ldr	r2, [pc, #348]	; (8003570 <SensorReadTask+0x294>)
 8003414:	7051      	strb	r1, [r2, #1]
 8003416:	2b95      	cmp	r3, #149	; 0x95
 8003418:	f240 808d 	bls.w	8003536 <SensorReadTask+0x25a>
			  {
				  processError.temperatureSensorError = 1;
 800341c:	4a55      	ldr	r2, [pc, #340]	; (8003574 <SensorReadTask+0x298>)
 800341e:	7813      	ldrb	r3, [r2, #0]
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	7013      	strb	r3, [r2, #0]
				  processError.errorNumberAndroid = temperatureSensorError;
 8003426:	4b53      	ldr	r3, [pc, #332]	; (8003574 <SensorReadTask+0x298>)
 8003428:	220c      	movs	r2, #12
 800342a:	705a      	strb	r2, [r3, #1]
				  timerCnt.temperatureSensorErrorCnt = 0;
 800342c:	4b50      	ldr	r3, [pc, #320]	; (8003570 <SensorReadTask+0x294>)
 800342e:	2200      	movs	r2, #0
 8003430:	705a      	strb	r2, [r3, #1]
		  if(androidProcessStruct.startofCooking == 1)
 8003432:	e080      	b.n	8003536 <SensorReadTask+0x25a>
			  }
		  }
	  }
	  else if(objTemperature > 0)
 8003434:	4b4c      	ldr	r3, [pc, #304]	; (8003568 <SensorReadTask+0x28c>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d07d      	beq.n	8003538 <SensorReadTask+0x25c>
	  {
		  temperatureArray[avgCnt] = (int)objTemperature;
 800343c:	4b4a      	ldr	r3, [pc, #296]	; (8003568 <SensorReadTask+0x28c>)
 800343e:	8819      	ldrh	r1, [r3, #0]
 8003440:	4b4d      	ldr	r3, [pc, #308]	; (8003578 <SensorReadTask+0x29c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	4b4c      	ldr	r3, [pc, #304]	; (800357c <SensorReadTask+0x2a0>)
 800344a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		  sumTemperature += temperatureArray[avgCnt];
 800344e:	4b4a      	ldr	r3, [pc, #296]	; (8003578 <SensorReadTask+0x29c>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	4b49      	ldr	r3, [pc, #292]	; (800357c <SensorReadTask+0x2a0>)
 8003458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003464:	4b46      	ldr	r3, [pc, #280]	; (8003580 <SensorReadTask+0x2a4>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346e:	4b44      	ldr	r3, [pc, #272]	; (8003580 <SensorReadTask+0x2a4>)
 8003470:	edc3 7a00 	vstr	s15, [r3]
		  if(avgCnt++ >= SENSOR_AVG_CNT)
 8003474:	4b40      	ldr	r3, [pc, #256]	; (8003578 <SensorReadTask+0x29c>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	b2d1      	uxtb	r1, r2
 800347e:	4a3e      	ldr	r2, [pc, #248]	; (8003578 <SensorReadTask+0x29c>)
 8003480:	7011      	strb	r1, [r2, #0]
 8003482:	2b09      	cmp	r3, #9
 8003484:	d94e      	bls.n	8003524 <SensorReadTask+0x248>
		  {
			  avgTemperature = (float)sumTemperature/(float)SENSOR_AVG_CNT;
 8003486:	4b3e      	ldr	r3, [pc, #248]	; (8003580 <SensorReadTask+0x2a4>)
 8003488:	ed93 7a00 	vldr	s14, [r3]
 800348c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003494:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <SensorReadTask+0x2a8>)
 8003496:	edc3 7a00 	vstr	s15, [r3]
			  if(temperatureSensorOffset.positiveTemperatureOffsetValue > 0 && avgTemperature > 80)
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <SensorReadTask+0x2ac>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d018      	beq.n	80034d4 <SensorReadTask+0x1f8>
 80034a2:	4b38      	ldr	r3, [pc, #224]	; (8003584 <SensorReadTask+0x2a8>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800355c <SensorReadTask+0x280>
 80034ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	dd0e      	ble.n	80034d4 <SensorReadTask+0x1f8>
			  {
				  avgTemperature = avgTemperature + temperatureSensorOffset.positiveTemperatureOffsetValue;
 80034b6:	4b34      	ldr	r3, [pc, #208]	; (8003588 <SensorReadTask+0x2ac>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	ee07 3a90 	vmov	s15, r3
 80034be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034c2:	4b30      	ldr	r3, [pc, #192]	; (8003584 <SensorReadTask+0x2a8>)
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <SensorReadTask+0x2a8>)
 80034ce:	edc3 7a00 	vstr	s15, [r3]
 80034d2:	e020      	b.n	8003516 <SensorReadTask+0x23a>
			  }
			  else if(temperatureSensorOffset.negativeTemperatureOffsetValue > 0 && avgTemperature > 80)
 80034d4:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <SensorReadTask+0x2ac>)
 80034d6:	885b      	ldrh	r3, [r3, #2]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d018      	beq.n	800350e <SensorReadTask+0x232>
 80034dc:	4b29      	ldr	r3, [pc, #164]	; (8003584 <SensorReadTask+0x2a8>)
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800355c <SensorReadTask+0x280>
 80034e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ee:	dd0e      	ble.n	800350e <SensorReadTask+0x232>
			  {
				  avgTemperature = avgTemperature - temperatureSensorOffset.negativeTemperatureOffsetValue;
 80034f0:	4b24      	ldr	r3, [pc, #144]	; (8003584 <SensorReadTask+0x2a8>)
 80034f2:	ed93 7a00 	vldr	s14, [r3]
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <SensorReadTask+0x2ac>)
 80034f8:	885b      	ldrh	r3, [r3, #2]
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003506:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <SensorReadTask+0x2a8>)
 8003508:	edc3 7a00 	vstr	s15, [r3]
 800350c:	e003      	b.n	8003516 <SensorReadTask+0x23a>
			  }
			  else
			  {
				  avgTemperature = avgTemperature;
 800350e:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <SensorReadTask+0x2a8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1c      	ldr	r2, [pc, #112]	; (8003584 <SensorReadTask+0x2a8>)
 8003514:	6013      	str	r3, [r2, #0]
			  }
			  sumTemperature = 0;
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <SensorReadTask+0x2a4>)
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
			  avgCnt = 0;
 800351e:	4b16      	ldr	r3, [pc, #88]	; (8003578 <SensorReadTask+0x29c>)
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
		  {
#if			UART_DEBUG_EN == 1
			  HAL_UART_Transmit(&huart1, (uint8_t *)"Temperature : Error Reading \r\n", sizeof("Temperature : Error Reading \r\n"), 100);
#endif
		  }
		  processError.temperatureSensorError = 0;
 8003524:	4a13      	ldr	r2, [pc, #76]	; (8003574 <SensorReadTask+0x298>)
 8003526:	7813      	ldrb	r3, [r2, #0]
 8003528:	f36f 0341 	bfc	r3, #1, #1
 800352c:	7013      	strb	r3, [r2, #0]
		  timerCnt.temperatureSensorErrorCnt = 0;
 800352e:	4b10      	ldr	r3, [pc, #64]	; (8003570 <SensorReadTask+0x294>)
 8003530:	2200      	movs	r2, #0
 8003532:	705a      	strb	r2, [r3, #1]
 8003534:	e000      	b.n	8003538 <SensorReadTask+0x25c>
		  if(androidProcessStruct.startofCooking == 1)
 8003536:	bf00      	nop
#endif
		  }
	  }
	#endif
#endif
	  osDelay(50);
 8003538:	2032      	movs	r0, #50	; 0x32
 800353a:	f009 ff89 	bl	800d450 <osDelay>
	  if(miscellaneousSetting.speedSensorEnable ==  1)
 800353e:	e6d1      	b.n	80032e4 <SensorReadTask+0x8>
 8003540:	20008c40 	.word	0x20008c40
 8003544:	200003e8 	.word	0x200003e8
 8003548:	200003ec 	.word	0x200003ec
 800354c:	200003f8 	.word	0x200003f8
 8003550:	20008d34 	.word	0x20008d34
 8003554:	200003f0 	.word	0x200003f0
 8003558:	200003f4 	.word	0x200003f4
 800355c:	42a00000 	.word	0x42a00000
 8003560:	42a00000 	.word	0x42a00000
 8003564:	20009020 	.word	0x20009020
 8003568:	2000038c 	.word	0x2000038c
 800356c:	20008c54 	.word	0x20008c54
 8003570:	20008c70 	.word	0x20008c70
 8003574:	20008c3c 	.word	0x20008c3c
 8003578:	20000420 	.word	0x20000420
 800357c:	20000390 	.word	0x20000390
 8003580:	200003e4 	.word	0x200003e4
 8003584:	200003e0 	.word	0x200003e0
 8003588:	20008c10 	.word	0x20008c10

0800358c <errorHandleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_errorHandleTask */
void errorHandleTask(void *argument)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN errorHandleTask */
  /* Infinite loop */
  for(;;)
  {
	#if PROCESS_ERROR_ENABLE == 1
	  stopHeaterBasedOnError();
 8003594:	f7fd ff74 	bl	8001480 <stopHeaterBasedOnError>
//	  Send_Error_Msg(processError.errorNumberAndroid);
	#endif
    osDelay(5000);
 8003598:	f241 3088 	movw	r0, #5000	; 0x1388
 800359c:	f009 ff58 	bl	800d450 <osDelay>
	  stopHeaterBasedOnError();
 80035a0:	e7f8      	b.n	8003594 <errorHandleTask+0x8>
	...

080035a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035b6:	f000 ffbd 	bl	8004534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if(htim->Instance ==  TIM3)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a06      	ldr	r2, [pc, #24]	; (80035d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
		gu16_TIM2_OVC++;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	4a04      	ldr	r2, [pc, #16]	; (80035dc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80035cc:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40000400 	.word	0x40000400
 80035dc:	2000040c 	.word	0x2000040c

080035e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035e4:	b672      	cpsid	i
}
 80035e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
  /* USER CODE END Error_Handler_Debug */
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <dacSetVoltage>:
  * @params	output: Output voltage in terms of counts.
  * 		writeEEPROM : 0 - Normal Write | 1 - EEPROM WRITEs
  * @retval returns the dutycycle to be set
  */
void dacSetVoltage( uint16_t output, char writeEEPROM )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	4603      	mov	r3, r0
 80035fc:	460a      	mov	r2, r1
 80035fe:	80fb      	strh	r3, [r7, #6]
 8003600:	4613      	mov	r3, r2
 8003602:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status;
  // Clear write buffer
  uint32_t i;
  for ( i = 0; i < 3; i++ )
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e007      	b.n	800361a <dacSetVoltage+0x26>
  {
    buffer[i] = 0x00;
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <dacSetVoltage+0x74>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
  for ( i = 0; i < 3; i++ )
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3301      	adds	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d9f4      	bls.n	800360a <dacSetVoltage+0x16>
  }

  if (writeEEPROM == 1)  // command and config bits  (C2.C1.C0.x.x.PD1.PD0.x)
 8003620:	797b      	ldrb	r3, [r7, #5]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d103      	bne.n	800362e <dacSetVoltage+0x3a>
  {
    buffer[0] = MCP4725_EEPROM;
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <dacSetVoltage+0x74>)
 8003628:	2260      	movs	r2, #96	; 0x60
 800362a:	701a      	strb	r2, [r3, #0]
 800362c:	e002      	b.n	8003634 <dacSetVoltage+0x40>
  }
  else
  {
    buffer[0] = MCP_4725_WRITE;
 800362e:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <dacSetVoltage+0x74>)
 8003630:	2240      	movs	r2, #64	; 0x40
 8003632:	701a      	strb	r2, [r3, #0]
  }
  buffer[1] = (output / 16);       // Upper data bits     (D11.D10.D9.D8.D7.D6.D5.D4)
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	b29b      	uxth	r3, r3
 800363a:	b2da      	uxtb	r2, r3
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <dacSetVoltage+0x74>)
 800363e:	705a      	strb	r2, [r3, #1]
  buffer[2] = (output % 16) << 4;  // Lower data bits     (D3.D2.D1.D0.x.x.x.x)
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <dacSetVoltage+0x74>)
 8003648:	709a      	strb	r2, [r3, #2]
  status= HAL_I2C_Master_Transmit(&hi2c2, MCP4725_ADDRESS, buffer, 3, 1000);
 800364a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2303      	movs	r3, #3
 8003652:	4a05      	ldr	r2, [pc, #20]	; (8003668 <dacSetVoltage+0x74>)
 8003654:	21c0      	movs	r1, #192	; 0xc0
 8003656:	4805      	ldr	r0, [pc, #20]	; (800366c <dacSetVoltage+0x78>)
 8003658:	f002 fa60 	bl	8005b1c <HAL_I2C_Master_Transmit>
 800365c:	4603      	mov	r3, r0
 800365e:	72fb      	strb	r3, [r7, #11]
}
 8003660:	bf00      	nop
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	20000424 	.word	0x20000424
 800366c:	20008ce0 	.word	0x20008ce0

08003670 <CRC8_Calc>:
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef,
    0xfa, 0xfd, 0xf4, 0xf3
};

uint8_t CRC8_Calc (uint8_t *p, uint8_t len)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 800367c:	2300      	movs	r3, #0
 800367e:	81fb      	strh	r3, [r7, #14]

        while (len--) {
 8003680:	e015      	b.n	80036ae <CRC8_Calc+0x3e>
                i = (crc ^ *p++) & 0xFF;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b29a      	uxth	r2, r3
 800368c:	89fb      	ldrh	r3, [r7, #14]
 800368e:	4053      	eors	r3, r2
 8003690:	b29b      	uxth	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 8003696:	89bb      	ldrh	r3, [r7, #12]
 8003698:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <CRC8_Calc+0x58>)
 800369a:	5cd3      	ldrb	r3, [r2, r3]
 800369c:	b21a      	sxth	r2, r3
 800369e:	89fb      	ldrh	r3, [r7, #14]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	b21b      	sxth	r3, r3
 80036a4:	4053      	eors	r3, r2
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	81fb      	strh	r3, [r7, #14]
        while (len--) {
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	1e5a      	subs	r2, r3, #1
 80036b2:	70fa      	strb	r2, [r7, #3]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e4      	bne.n	8003682 <CRC8_Calc+0x12>
        }

        return crc & 0xFF;
 80036b8:	89fb      	ldrh	r3, [r7, #14]
 80036ba:	b2db      	uxtb	r3, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	0801533c 	.word	0x0801533c

080036cc <MLX90614_ReadReg>:
  * 		regAddr : Register address to read
  * 		dbg_lvl : Level of debug
  * @retval NOTHING
  */
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b08b      	sub	sp, #44	; 0x2c
 80036d0:	af04      	add	r7, sp, #16
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
 80036d6:	460b      	mov	r3, r1
 80036d8:	71bb      	strb	r3, [r7, #6]
 80036da:	4613      	mov	r3, r2
 80036dc:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;
	HAL_StatusTypeDef temperatureSensorStatus_t;

	temperatureSensorStatus_t = HAL_I2C_Mem_Read(I2C_DEFINITION, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	b299      	uxth	r1, r3
 80036e6:	79bb      	ldrb	r3, [r7, #6]
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	2364      	movs	r3, #100	; 0x64
 80036ec:	9302      	str	r3, [sp, #8]
 80036ee:	2303      	movs	r3, #3
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	f107 0310 	add.w	r3, r7, #16
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2301      	movs	r3, #1
 80036fa:	4826      	ldr	r0, [pc, #152]	; (8003794 <MLX90614_ReadReg+0xc8>)
 80036fc:	f002 fb0c 	bl	8005d18 <HAL_I2C_Mem_Read>
 8003700:	4603      	mov	r3, r0
 8003702:	757b      	strb	r3, [r7, #21]
	}

	//HAL_Delay(1);
	return data;
#elif PROCESS_ERROR_ENABLE == 1
	if(temperatureSensorStatus_t == HAL_OK)
 8003704:	7d7b      	ldrb	r3, [r7, #21]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d136      	bne.n	8003778 <MLX90614_ReadReg+0xac>
	{
		// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
		crc_buff[0] = (devAddr<<1);
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	723b      	strb	r3, [r7, #8]
		crc_buff[1] = regAddr;
 8003712:	79bb      	ldrb	r3, [r7, #6]
 8003714:	727b      	strb	r3, [r7, #9]
		crc_buff[2] = (devAddr<<1) + 1;
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3301      	adds	r3, #1
 800371e:	b2db      	uxtb	r3, r3
 8003720:	72bb      	strb	r3, [r7, #10]
		crc_buff[3] = in_buff[0];
 8003722:	7c3b      	ldrb	r3, [r7, #16]
 8003724:	72fb      	strb	r3, [r7, #11]
		crc_buff[4] = in_buff[1];
 8003726:	7c7b      	ldrb	r3, [r7, #17]
 8003728:	733b      	strb	r3, [r7, #12]
		crc = CRC8_Calc(crc_buff, 5);
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	2105      	movs	r1, #5
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff9d 	bl	8003670 <CRC8_Calc>
 8003736:	4603      	mov	r3, r0
 8003738:	753b      	strb	r3, [r7, #20]

		data = (in_buff[1] <<8 | in_buff[0]);
 800373a:	7c7b      	ldrb	r3, [r7, #17]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	b21a      	sxth	r2, r3
 8003740:	7c3b      	ldrb	r3, [r7, #16]
 8003742:	b21b      	sxth	r3, r3
 8003744:	4313      	orrs	r3, r2
 8003746:	b21b      	sxth	r3, r3
 8003748:	82fb      	strh	r3, [r7, #22]

		//TODO: implement CRC8 check on data received
		if (crc != in_buff[2])
 800374a:	7cbb      	ldrb	r3, [r7, #18]
 800374c:	7d3a      	ldrb	r2, [r7, #20]
 800374e:	429a      	cmp	r2, r3
 8003750:	d001      	beq.n	8003756 <MLX90614_ReadReg+0x8a>
		{
			data = 0x0000;
 8003752:	2300      	movs	r3, #0
 8003754:	82fb      	strh	r3, [r7, #22]
		}
		if(dbg_lvl == MLX90614_DBG_ON)
 8003756:	797b      	ldrb	r3, [r7, #5]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d10b      	bne.n	8003774 <MLX90614_ReadReg+0xa8>
		{
			MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);
 800375c:	7cbb      	ldrb	r3, [r7, #18]
 800375e:	8afc      	ldrh	r4, [r7, #22]
 8003760:	79b8      	ldrb	r0, [r7, #6]
 8003762:	79f9      	ldrb	r1, [r7, #7]
 8003764:	7d3a      	ldrb	r2, [r7, #20]
 8003766:	9201      	str	r2, [sp, #4]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	4623      	mov	r3, r4
 800376c:	4602      	mov	r2, r0
 800376e:	2001      	movs	r0, #1
 8003770:	f000 f874 	bl	800385c <MLX90614_SendDebugMsg>
		}
		return data;
 8003774:	8afb      	ldrh	r3, [r7, #22]
 8003776:	e009      	b.n	800378c <MLX90614_ReadReg+0xc0>
	}
	else if(temperatureSensorStatus_t == HAL_ERROR || temperatureSensorStatus_t == HAL_BUSY)
 8003778:	7d7b      	ldrb	r3, [r7, #21]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d002      	beq.n	8003784 <MLX90614_ReadReg+0xb8>
 800377e:	7d7b      	ldrb	r3, [r7, #21]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d102      	bne.n	800378a <MLX90614_ReadReg+0xbe>
	{
		return -1;
 8003784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003788:	e000      	b.n	800378c <MLX90614_ReadReg+0xc0>
	}
	else
	{
		return 0;
 800378a:	2300      	movs	r3, #0
	}
#endif
}
 800378c:	4618      	mov	r0, r3
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	bd90      	pop	{r4, r7, pc}
 8003794:	20008ce0 	.word	0x20008ce0

08003798 <MLX90614_ReadTemp>:
  * @params	devAddr: slave Address
  * 		regAddr : Register address to read
  * @retval Temperature value in float
  */
float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	460a      	mov	r2, r1
 80037a2:	71fb      	strb	r3, [r7, #7]
 80037a4:	4613      	mov	r3, r2
 80037a6:	71bb      	strb	r3, [r7, #6]
	temp = data * 0.02 - 273.15;
	if(temp <= 0 || temp >= 65535)
		temp = 0;
	return temp;
#elif PROCESS_ERROR_ENABLE == 1
	data = MLX90614_ReadReg(devAddr, regAddr, MLX90614_DBG_OFF);
 80037a8:	79b9      	ldrb	r1, [r7, #6]
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	2200      	movs	r2, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff ff8c 	bl	80036cc <MLX90614_ReadReg>
 80037b4:	4603      	mov	r3, r0
 80037b6:	817b      	strh	r3, [r7, #10]
	if(data == -1 || data >= UINT16_MAX_VALUE)
 80037b8:	897b      	ldrh	r3, [r7, #10]
 80037ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037be:	4293      	cmp	r3, r2
 80037c0:	d102      	bne.n	80037c8 <MLX90614_ReadTemp+0x30>
	{
		return 0;
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e038      	b.n	800383a <MLX90614_ReadTemp+0xa2>
	}
	else if(data < UINT16_MAX_VALUE && data > 0)
 80037c8:	897b      	ldrh	r3, [r7, #10]
 80037ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d031      	beq.n	8003836 <MLX90614_ReadTemp+0x9e>
 80037d2:	897b      	ldrh	r3, [r7, #10]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d02e      	beq.n	8003836 <MLX90614_ReadTemp+0x9e>
	{
		temp = data * 0.02 - 273.15;
 80037d8:	897b      	ldrh	r3, [r7, #10]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fc fea2 	bl	8000524 <__aeabi_i2d>
 80037e0:	a31a      	add	r3, pc, #104	; (adr r3, 800384c <MLX90614_ReadTemp+0xb4>)
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f7fc ff07 	bl	80005f8 <__aeabi_dmul>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4610      	mov	r0, r2
 80037f0:	4619      	mov	r1, r3
 80037f2:	a318      	add	r3, pc, #96	; (adr r3, 8003854 <MLX90614_ReadTemp+0xbc>)
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	f7fc fd46 	bl	8000288 <__aeabi_dsub>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4610      	mov	r0, r2
 8003802:	4619      	mov	r1, r3
 8003804:	f7fd f9f0 	bl	8000be8 <__aeabi_d2f>
 8003808:	4603      	mov	r3, r0
 800380a:	60fb      	str	r3, [r7, #12]
		if(temp <= 0 || temp >= 65535)
 800380c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003810:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003818:	d908      	bls.n	800382c <MLX90614_ReadTemp+0x94>
 800381a:	edd7 7a03 	vldr	s15, [r7, #12]
 800381e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003848 <MLX90614_ReadTemp+0xb0>
 8003822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382a:	db02      	blt.n	8003832 <MLX90614_ReadTemp+0x9a>
			temp = 0;
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
		return temp;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	e001      	b.n	800383a <MLX90614_ReadTemp+0xa2>
	}
	else
	{
		return 0;
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	ee07 3a90 	vmov	s15, r3
	}
#endif
}
 800383e:	eeb0 0a67 	vmov.f32	s0, s15
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	477fff00 	.word	0x477fff00
 800384c:	47ae147b 	.word	0x47ae147b
 8003850:	3f947ae1 	.word	0x3f947ae1
 8003854:	66666666 	.word	0x66666666
 8003858:	40711266 	.word	0x40711266

0800385c <MLX90614_SendDebugMsg>:

			  }
		  }
}
void MLX90614_SendDebugMsg(uint8_t op_type, uint8_t devAddr, uint8_t regAddr, uint16_t data, uint8_t crc_in, uint8_t crc_calc)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b087      	sub	sp, #28
 8003860:	af04      	add	r7, sp, #16
 8003862:	4604      	mov	r4, r0
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	461a      	mov	r2, r3
 800386a:	4623      	mov	r3, r4
 800386c:	71fb      	strb	r3, [r7, #7]
 800386e:	4603      	mov	r3, r0
 8003870:	71bb      	strb	r3, [r7, #6]
 8003872:	460b      	mov	r3, r1
 8003874:	717b      	strb	r3, [r7, #5]
 8003876:	4613      	mov	r3, r2
 8003878:	807b      	strh	r3, [r7, #2]
	if(op_type == MLX90614_DBG_MSG_W) {
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d117      	bne.n	80038b0 <MLX90614_SendDebugMsg+0x54>
		snprintf(temp_buff, sizeof(temp_buff), "W Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_calc);
 8003880:	79b8      	ldrb	r0, [r7, #6]
 8003882:	797b      	ldrb	r3, [r7, #5]
 8003884:	887a      	ldrh	r2, [r7, #2]
 8003886:	7f39      	ldrb	r1, [r7, #28]
 8003888:	9102      	str	r1, [sp, #8]
 800388a:	9201      	str	r2, [sp, #4]
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4603      	mov	r3, r0
 8003890:	4a17      	ldr	r2, [pc, #92]	; (80038f0 <MLX90614_SendDebugMsg+0x94>)
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	4817      	ldr	r0, [pc, #92]	; (80038f4 <MLX90614_SendDebugMsg+0x98>)
 8003896:	f00d fe61 	bl	801155c <sniprintf>
		  HAL_UART_Transmit(UART_DEFINITION, (uint8_t *)&temp_buff, strlen(temp_buff), 100);
 800389a:	4816      	ldr	r0, [pc, #88]	; (80038f4 <MLX90614_SendDebugMsg+0x98>)
 800389c:	f7fc fc98 	bl	80001d0 <strlen>
 80038a0:	4603      	mov	r3, r0
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	2364      	movs	r3, #100	; 0x64
 80038a6:	4913      	ldr	r1, [pc, #76]	; (80038f4 <MLX90614_SendDebugMsg+0x98>)
 80038a8:	4813      	ldr	r0, [pc, #76]	; (80038f8 <MLX90614_SendDebugMsg+0x9c>)
 80038aa:	f006 fa56 	bl	8009d5a <HAL_UART_Transmit>
		snprintf(temp_buff, sizeof(temp_buff), "R Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_in:0x%02X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_in, crc_calc);
		  HAL_UART_Transmit(UART_DEFINITION, (uint8_t *)&temp_buff, strlen(temp_buff), 100);
//		CDC_Transmit_FS(temp_buff, strlen((const char *)temp_buff));
	}

}
 80038ae:	e01b      	b.n	80038e8 <MLX90614_SendDebugMsg+0x8c>
	else if (op_type == MLX90614_DBG_MSG_R) {
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d118      	bne.n	80038e8 <MLX90614_SendDebugMsg+0x8c>
		snprintf(temp_buff, sizeof(temp_buff), "R Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_in:0x%02X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_in, crc_calc);
 80038b6:	79bc      	ldrb	r4, [r7, #6]
 80038b8:	797b      	ldrb	r3, [r7, #5]
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	7e39      	ldrb	r1, [r7, #24]
 80038be:	7f38      	ldrb	r0, [r7, #28]
 80038c0:	9003      	str	r0, [sp, #12]
 80038c2:	9102      	str	r1, [sp, #8]
 80038c4:	9201      	str	r2, [sp, #4]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4623      	mov	r3, r4
 80038ca:	4a0c      	ldr	r2, [pc, #48]	; (80038fc <MLX90614_SendDebugMsg+0xa0>)
 80038cc:	2180      	movs	r1, #128	; 0x80
 80038ce:	4809      	ldr	r0, [pc, #36]	; (80038f4 <MLX90614_SendDebugMsg+0x98>)
 80038d0:	f00d fe44 	bl	801155c <sniprintf>
		  HAL_UART_Transmit(UART_DEFINITION, (uint8_t *)&temp_buff, strlen(temp_buff), 100);
 80038d4:	4807      	ldr	r0, [pc, #28]	; (80038f4 <MLX90614_SendDebugMsg+0x98>)
 80038d6:	f7fc fc7b 	bl	80001d0 <strlen>
 80038da:	4603      	mov	r3, r0
 80038dc:	b29a      	uxth	r2, r3
 80038de:	2364      	movs	r3, #100	; 0x64
 80038e0:	4904      	ldr	r1, [pc, #16]	; (80038f4 <MLX90614_SendDebugMsg+0x98>)
 80038e2:	4805      	ldr	r0, [pc, #20]	; (80038f8 <MLX90614_SendDebugMsg+0x9c>)
 80038e4:	f006 fa39 	bl	8009d5a <HAL_UART_Transmit>
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd90      	pop	{r4, r7, pc}
 80038f0:	08015174 	.word	0x08015174
 80038f4:	20000428 	.word	0x20000428
 80038f8:	20008eac 	.word	0x20008eac
 80038fc:	080151b4 	.word	0x080151b4

08003900 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	607b      	str	r3, [r7, #4]
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <HAL_MspInit+0x54>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	4a11      	ldr	r2, [pc, #68]	; (8003954 <HAL_MspInit+0x54>)
 8003910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003914:	6453      	str	r3, [r2, #68]	; 0x44
 8003916:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <HAL_MspInit+0x54>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_MspInit+0x54>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <HAL_MspInit+0x54>)
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003930:	6413      	str	r3, [r2, #64]	; 0x40
 8003932:	4b08      	ldr	r3, [pc, #32]	; (8003954 <HAL_MspInit+0x54>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800393e:	2200      	movs	r2, #0
 8003940:	210f      	movs	r1, #15
 8003942:	f06f 0001 	mvn.w	r0, #1
 8003946:	f001 f953 	bl	8004bf0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800

08003958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a3c      	ldr	r2, [pc, #240]	; (8003a68 <HAL_ADC_MspInit+0x110>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d171      	bne.n	8003a5e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	4b3b      	ldr	r3, [pc, #236]	; (8003a6c <HAL_ADC_MspInit+0x114>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	4a3a      	ldr	r2, [pc, #232]	; (8003a6c <HAL_ADC_MspInit+0x114>)
 8003984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003988:	6453      	str	r3, [r2, #68]	; 0x44
 800398a:	4b38      	ldr	r3, [pc, #224]	; (8003a6c <HAL_ADC_MspInit+0x114>)
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	4b34      	ldr	r3, [pc, #208]	; (8003a6c <HAL_ADC_MspInit+0x114>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <HAL_ADC_MspInit+0x114>)
 80039a0:	f043 0304 	orr.w	r3, r3, #4
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b31      	ldr	r3, [pc, #196]	; (8003a6c <HAL_ADC_MspInit+0x114>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <HAL_ADC_MspInit+0x114>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	4a2c      	ldr	r2, [pc, #176]	; (8003a6c <HAL_ADC_MspInit+0x114>)
 80039bc:	f043 0302 	orr.w	r3, r3, #2
 80039c0:	6313      	str	r3, [r2, #48]	; 0x30
 80039c2:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <HAL_ADC_MspInit+0x114>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SPARE_ADC1_Pin;
 80039ce:	2320      	movs	r3, #32
 80039d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039d2:	2303      	movs	r3, #3
 80039d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPARE_ADC1_GPIO_Port, &GPIO_InitStruct);
 80039da:	f107 0314 	add.w	r3, r7, #20
 80039de:	4619      	mov	r1, r3
 80039e0:	4823      	ldr	r0, [pc, #140]	; (8003a70 <HAL_ADC_MspInit+0x118>)
 80039e2:	f001 fd4b 	bl	800547c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPARE_ADC2_Pin|SPARE_ADC3_Pin;
 80039e6:	2303      	movs	r3, #3
 80039e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039ea:	2303      	movs	r3, #3
 80039ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039f2:	f107 0314 	add.w	r3, r7, #20
 80039f6:	4619      	mov	r1, r3
 80039f8:	481e      	ldr	r0, [pc, #120]	; (8003a74 <HAL_ADC_MspInit+0x11c>)
 80039fa:	f001 fd3f 	bl	800547c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80039fe:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a00:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <HAL_ADC_MspInit+0x124>)
 8003a02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003a04:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a0a:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003a16:	4b18      	ldr	r3, [pc, #96]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003a36:	4b10      	ldr	r3, [pc, #64]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003a42:	480d      	ldr	r0, [pc, #52]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a44:	f001 fa30 	bl	8004ea8 <HAL_DMA_Init>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003a4e:	f7ff fdc7 	bl	80035e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38
 8003a58:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <HAL_ADC_MspInit+0x120>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003a5e:	bf00      	nop
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40012000 	.word	0x40012000
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020800 	.word	0x40020800
 8003a74:	40020400 	.word	0x40020400
 8003a78:	20008f08 	.word	0x20008f08
 8003a7c:	40026410 	.word	0x40026410

08003a80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	605a      	str	r2, [r3, #4]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1b      	ldr	r2, [pc, #108]	; (8003b0c <HAL_DAC_MspInit+0x8c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d12f      	bne.n	8003b02 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <HAL_DAC_MspInit+0x90>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <HAL_DAC_MspInit+0x90>)
 8003aac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab2:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <HAL_DAC_MspInit+0x90>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <HAL_DAC_MspInit+0x90>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <HAL_DAC_MspInit+0x90>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_DAC_MspInit+0x90>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = DAC_SLIDER_Pin;
 8003ada:	2320      	movs	r3, #32
 8003adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_SLIDER_GPIO_Port, &GPIO_InitStruct);
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	4619      	mov	r1, r3
 8003aec:	4809      	ldr	r0, [pc, #36]	; (8003b14 <HAL_DAC_MspInit+0x94>)
 8003aee:	f001 fcc5 	bl	800547c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2105      	movs	r1, #5
 8003af6:	2036      	movs	r0, #54	; 0x36
 8003af8:	f001 f87a 	bl	8004bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003afc:	2036      	movs	r0, #54	; 0x36
 8003afe:	f001 f893 	bl	8004c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003b02:	bf00      	nop
 8003b04:	3728      	adds	r7, #40	; 0x28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40007400 	.word	0x40007400
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40020000 	.word	0x40020000

08003b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <HAL_I2C_MspInit+0x84>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d12c      	bne.n	8003b94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <HAL_I2C_MspInit+0x88>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_I2C_MspInit+0x88>)
 8003b44:	f043 0302 	orr.w	r3, r3, #2
 8003b48:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4a:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <HAL_I2C_MspInit+0x88>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = IR_TEMP_SCL_Pin|IR_TEMP_SDA_Pin;
 8003b56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b5c:	2312      	movs	r3, #18
 8003b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b60:	2301      	movs	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b64:	2303      	movs	r3, #3
 8003b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003b68:	2304      	movs	r3, #4
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	4619      	mov	r1, r3
 8003b72:	480c      	ldr	r0, [pc, #48]	; (8003ba4 <HAL_I2C_MspInit+0x8c>)
 8003b74:	f001 fc82 	bl	800547c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <HAL_I2C_MspInit+0x88>)
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	4a07      	ldr	r2, [pc, #28]	; (8003ba0 <HAL_I2C_MspInit+0x88>)
 8003b82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b86:	6413      	str	r3, [r2, #64]	; 0x40
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_I2C_MspInit+0x88>)
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003b94:	bf00      	nop
 8003b96:	3728      	adds	r7, #40	; 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40005800 	.word	0x40005800
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40020400 	.word	0x40020400

08003ba8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a19      	ldr	r2, [pc, #100]	; (8003c2c <HAL_SPI_MspInit+0x84>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d12c      	bne.n	8003c24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	4a10      	ldr	r2, [pc, #64]	; (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <HAL_SPI_MspInit+0x88>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI_CS1_Pin|SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8003c02:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c10:	2303      	movs	r3, #3
 8003c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c14:	2305      	movs	r3, #5
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4805      	ldr	r0, [pc, #20]	; (8003c34 <HAL_SPI_MspInit+0x8c>)
 8003c20:	f001 fc2c 	bl	800547c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003c24:	bf00      	nop
 8003c26:	3728      	adds	r7, #40	; 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40003800 	.word	0x40003800
 8003c30:	40023800 	.word	0x40023800
 8003c34:	40020400 	.word	0x40020400

08003c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	; 0x30
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c40:	f107 031c 	add.w	r3, r7, #28
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	60da      	str	r2, [r3, #12]
 8003c4e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a45      	ldr	r2, [pc, #276]	; (8003d6c <HAL_TIM_Base_MspInit+0x134>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d12e      	bne.n	8003cb8 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	4b44      	ldr	r3, [pc, #272]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	4a43      	ldr	r2, [pc, #268]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6a:	4b41      	ldr	r3, [pc, #260]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2105      	movs	r1, #5
 8003c7a:	2018      	movs	r0, #24
 8003c7c:	f000 ffb8 	bl	8004bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003c80:	2018      	movs	r0, #24
 8003c82:	f000 ffd1 	bl	8004c28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2105      	movs	r1, #5
 8003c8a:	2019      	movs	r0, #25
 8003c8c:	f000 ffb0 	bl	8004bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c90:	2019      	movs	r0, #25
 8003c92:	f000 ffc9 	bl	8004c28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003c96:	2200      	movs	r2, #0
 8003c98:	2105      	movs	r1, #5
 8003c9a:	201a      	movs	r0, #26
 8003c9c:	f000 ffa8 	bl	8004bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003ca0:	201a      	movs	r0, #26
 8003ca2:	f000 ffc1 	bl	8004c28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2105      	movs	r1, #5
 8003caa:	201b      	movs	r0, #27
 8003cac:	f000 ffa0 	bl	8004bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003cb0:	201b      	movs	r0, #27
 8003cb2:	f000 ffb9 	bl	8004c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003cb6:	e054      	b.n	8003d62 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM3)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a2d      	ldr	r2, [pc, #180]	; (8003d74 <HAL_TIM_Base_MspInit+0x13c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d134      	bne.n	8003d2c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	4a29      	ldr	r2, [pc, #164]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd2:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	4b23      	ldr	r3, [pc, #140]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	4a22      	ldr	r2, [pc, #136]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003ce8:	f043 0304 	orr.w	r3, r3, #4
 8003cec:	6313      	str	r3, [r2, #48]	; 0x30
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SPEED_MEASURE_Pin|GPIO_PIN_7;
 8003cfa:	23c0      	movs	r3, #192	; 0xc0
 8003cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d02:	2301      	movs	r3, #1
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d06:	2303      	movs	r3, #3
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d0e:	f107 031c 	add.w	r3, r7, #28
 8003d12:	4619      	mov	r1, r3
 8003d14:	4818      	ldr	r0, [pc, #96]	; (8003d78 <HAL_TIM_Base_MspInit+0x140>)
 8003d16:	f001 fbb1 	bl	800547c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2105      	movs	r1, #5
 8003d1e:	201d      	movs	r0, #29
 8003d20:	f000 ff66 	bl	8004bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d24:	201d      	movs	r0, #29
 8003d26:	f000 ff7f 	bl	8004c28 <HAL_NVIC_EnableIRQ>
}
 8003d2a:	e01a      	b.n	8003d62 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM6)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <HAL_TIM_Base_MspInit+0x144>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d115      	bne.n	8003d62 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003d40:	f043 0310 	orr.w	r3, r3, #16
 8003d44:	6413      	str	r3, [r2, #64]	; 0x40
 8003d46:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <HAL_TIM_Base_MspInit+0x138>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	2105      	movs	r1, #5
 8003d56:	2036      	movs	r0, #54	; 0x36
 8003d58:	f000 ff4a 	bl	8004bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d5c:	2036      	movs	r0, #54	; 0x36
 8003d5e:	f000 ff63 	bl	8004c28 <HAL_NVIC_EnableIRQ>
}
 8003d62:	bf00      	nop
 8003d64:	3730      	adds	r7, #48	; 0x30
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	40023800 	.word	0x40023800
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40020800 	.word	0x40020800
 8003d7c:	40001000 	.word	0x40001000

08003d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d88:	f107 030c 	add.w	r3, r7, #12
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <HAL_TIM_MspPostInit+0x68>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d11e      	bne.n	8003de0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	4b11      	ldr	r3, [pc, #68]	; (8003dec <HAL_TIM_MspPostInit+0x6c>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	4a10      	ldr	r2, [pc, #64]	; (8003dec <HAL_TIM_MspPostInit+0x6c>)
 8003dac:	f043 0310 	orr.w	r3, r3, #16
 8003db0:	6313      	str	r3, [r2, #48]	; 0x30
 8003db2:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <HAL_TIM_MspPostInit+0x6c>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = DRUM_DC_PWM_Pin|SPARE_DC_ENB_Pin|SPARE_DC_RPWM_Pin;
 8003dbe:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8003dc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003dd4:	f107 030c 	add.w	r3, r7, #12
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4805      	ldr	r0, [pc, #20]	; (8003df0 <HAL_TIM_MspPostInit+0x70>)
 8003ddc:	f001 fb4e 	bl	800547c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003de0:	bf00      	nop
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40010000 	.word	0x40010000
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40021000 	.word	0x40021000

08003df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	; 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a19      	ldr	r2, [pc, #100]	; (8003e78 <HAL_UART_MspInit+0x84>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d12b      	bne.n	8003e6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
 8003e1a:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <HAL_UART_MspInit+0x88>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <HAL_UART_MspInit+0x88>)
 8003e20:	f043 0310 	orr.w	r3, r3, #16
 8003e24:	6453      	str	r3, [r2, #68]	; 0x44
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <HAL_UART_MspInit+0x88>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <HAL_UART_MspInit+0x88>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a10      	ldr	r2, [pc, #64]	; (8003e7c <HAL_UART_MspInit+0x88>)
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <HAL_UART_MspInit+0x88>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003e4e:	23c0      	movs	r3, #192	; 0xc0
 8003e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e52:	2302      	movs	r3, #2
 8003e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e5e:	2307      	movs	r3, #7
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e62:	f107 0314 	add.w	r3, r7, #20
 8003e66:	4619      	mov	r1, r3
 8003e68:	4805      	ldr	r0, [pc, #20]	; (8003e80 <HAL_UART_MspInit+0x8c>)
 8003e6a:	f001 fb07 	bl	800547c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003e6e:	bf00      	nop
 8003e70:	3728      	adds	r7, #40	; 0x28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40011000 	.word	0x40011000
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020400 	.word	0x40020400

08003e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08c      	sub	sp, #48	; 0x30
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8003e94:	2200      	movs	r2, #0
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	201c      	movs	r0, #28
 8003e9a:	f000 fea9 	bl	8004bf0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e9e:	201c      	movs	r0, #28
 8003ea0:	f000 fec2 	bl	8004c28 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_InitTick+0xa8>)
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <HAL_InitTick+0xa8>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_InitTick+0xa8>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ec0:	f107 0210 	add.w	r2, r7, #16
 8003ec4:	f107 0314 	add.w	r3, r7, #20
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f004 fa88 	bl	80083e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003ed0:	f004 fa5e 	bl	8008390 <HAL_RCC_GetPCLK1Freq>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <HAL_InitTick+0xac>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	0c9b      	lsrs	r3, r3, #18
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003ee8:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_InitTick+0xb0>)
 8003eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003eee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003ef0:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_InitTick+0xb0>)
 8003ef2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ef6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8003ef8:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <HAL_InitTick+0xb0>)
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <HAL_InitTick+0xb0>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_InitTick+0xb0>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003f0a:	480a      	ldr	r0, [pc, #40]	; (8003f34 <HAL_InitTick+0xb0>)
 8003f0c:	f004 fb23 	bl	8008556 <HAL_TIM_Base_Init>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d104      	bne.n	8003f20 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8003f16:	4807      	ldr	r0, [pc, #28]	; (8003f34 <HAL_InitTick+0xb0>)
 8003f18:	f004 fb6c 	bl	80085f4 <HAL_TIM_Base_Start_IT>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	e000      	b.n	8003f22 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3730      	adds	r7, #48	; 0x30
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	431bde83 	.word	0x431bde83
 8003f34:	200090f4 	.word	0x200090f4

08003f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f3c:	e7fe      	b.n	8003f3c <NMI_Handler+0x4>

08003f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f42:	e7fe      	b.n	8003f42 <HardFault_Handler+0x4>

08003f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f48:	e7fe      	b.n	8003f48 <MemManage_Handler+0x4>

08003f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f4e:	e7fe      	b.n	8003f4e <BusFault_Handler+0x4>

08003f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f54:	e7fe      	b.n	8003f54 <UsageFault_Handler+0x4>

08003f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f56:	b480      	push	{r7}
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003f68:	2001      	movs	r0, #1
 8003f6a:	f001 fc6f 	bl	800584c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003f76:	2002      	movs	r0, #2
 8003f78:	f001 fc68 	bl	800584c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003f84:	2004      	movs	r0, #4
 8003f86:	f001 fc61 	bl	800584c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003f92:	2008      	movs	r0, #8
 8003f94:	f001 fc5a 	bl	800584c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003fa0:	2010      	movs	r0, #16
 8003fa2:	f001 fc53 	bl	800584c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003fae:	2020      	movs	r0, #32
 8003fb0:	f001 fc4c 	bl	800584c <HAL_GPIO_EXTI_IRQHandler>
	else
	{   HAL_GPIO_WritePin(INDUCTION_K1_GPIO_Port,INDUCTION_K1_Pin, SET);

	}*/
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003fbc:	4802      	ldr	r0, [pc, #8]	; (8003fc8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003fbe:	f004 fe27 	bl	8008c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20008fb8 	.word	0x20008fb8

08003fcc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003fd0:	4802      	ldr	r0, [pc, #8]	; (8003fdc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003fd2:	f004 fe1d 	bl	8008c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20008fb8 	.word	0x20008fb8

08003fe0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003fe4:	4802      	ldr	r0, [pc, #8]	; (8003ff0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003fe6:	f004 fe13 	bl	8008c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20008fb8 	.word	0x20008fb8

08003ff4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ff8:	4802      	ldr	r0, [pc, #8]	; (8004004 <TIM1_CC_IRQHandler+0x10>)
 8003ffa:	f004 fe09 	bl	8008c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20008fb8 	.word	0x20008fb8

08004008 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800400c:	4802      	ldr	r0, [pc, #8]	; (8004018 <TIM2_IRQHandler+0x10>)
 800400e:	f004 fdff 	bl	8008c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	200090f4 	.word	0x200090f4

0800401c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004020:	4802      	ldr	r0, [pc, #8]	; (800402c <TIM3_IRQHandler+0x10>)
 8004022:	f004 fdf5 	bl	8008c10 <HAL_TIM_IRQHandler>
//		gu8_State = IC_IDLE;
//	}
//}

  /* USER CODE END TIM3_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20008dcc 	.word	0x20008dcc

08004030 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8004034:	489a      	ldr	r0, [pc, #616]	; (80042a0 <TIM6_DAC_IRQHandler+0x270>)
 8004036:	f000 fe79 	bl	8004d2c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800403a:	489a      	ldr	r0, [pc, #616]	; (80042a4 <TIM6_DAC_IRQHandler+0x274>)
 800403c:	f004 fde8 	bl	8008c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  if(debugCnt++ >= 200)
 8004040:	4b99      	ldr	r3, [pc, #612]	; (80042a8 <TIM6_DAC_IRQHandler+0x278>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	4998      	ldr	r1, [pc, #608]	; (80042a8 <TIM6_DAC_IRQHandler+0x278>)
 8004048:	600a      	str	r2, [r1, #0]
 800404a:	2bc7      	cmp	r3, #199	; 0xc7
 800404c:	d907      	bls.n	800405e <TIM6_DAC_IRQHandler+0x2e>
  {
	  HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800404e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004052:	4896      	ldr	r0, [pc, #600]	; (80042ac <TIM6_DAC_IRQHandler+0x27c>)
 8004054:	f001 fbdf 	bl	8005816 <HAL_GPIO_TogglePin>
	  debugCnt = 0;
 8004058:	4b93      	ldr	r3, [pc, #588]	; (80042a8 <TIM6_DAC_IRQHandler+0x278>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
  }

#if BS84C12A_DRIVE_ENABLE == 1
	if(HAL_GPIO_ReadPin(A_SEG_GPIO_Port, A_SEG_Pin) == (uint8_t)RESET)
 800405e:	2102      	movs	r1, #2
 8004060:	4893      	ldr	r0, [pc, #588]	; (80042b0 <TIM6_DAC_IRQHandler+0x280>)
 8004062:	f001 fba7 	bl	80057b4 <HAL_GPIO_ReadPin>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d114      	bne.n	8004096 <TIM6_DAC_IRQHandler+0x66>
		{
			segmentCounterVar.segmentACnt++;
 800406c:	4b91      	ldr	r3, [pc, #580]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	3301      	adds	r3, #1
 8004072:	b2da      	uxtb	r2, r3
 8004074:	4b8f      	ldr	r3, [pc, #572]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004076:	701a      	strb	r2, [r3, #0]
			if(segmentCounterVar.segmentACnt >= 40)
 8004078:	4b8e      	ldr	r3, [pc, #568]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b27      	cmp	r3, #39	; 0x27
 800407e:	d914      	bls.n	80040aa <TIM6_DAC_IRQHandler+0x7a>
			{
				displayValueHex &= ~(1 << 0);
 8004080:	4b8d      	ldr	r3, [pc, #564]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4b8b      	ldr	r3, [pc, #556]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 800408c:	701a      	strb	r2, [r3, #0]
				segmentCounterVar.segmentACnt = 0;
 800408e:	4b89      	ldr	r3, [pc, #548]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e009      	b.n	80040aa <TIM6_DAC_IRQHandler+0x7a>
			}
		}
		else
		{
			displayValueHex |= (1 << 0);
 8004096:	4b88      	ldr	r3, [pc, #544]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	4b85      	ldr	r3, [pc, #532]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 80040a2:	701a      	strb	r2, [r3, #0]
			segmentCounterVar.segmentACnt = 0;
 80040a4:	4b83      	ldr	r3, [pc, #524]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(B_SEG_GPIO_Port, B_SEG_Pin) == (uint8_t)RESET)
 80040aa:	2104      	movs	r1, #4
 80040ac:	4880      	ldr	r0, [pc, #512]	; (80042b0 <TIM6_DAC_IRQHandler+0x280>)
 80040ae:	f001 fb81 	bl	80057b4 <HAL_GPIO_ReadPin>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d114      	bne.n	80040e2 <TIM6_DAC_IRQHandler+0xb2>
		{
			segmentCounterVar.segmentBCnt++;
 80040b8:	4b7e      	ldr	r3, [pc, #504]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	3301      	adds	r3, #1
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	4b7c      	ldr	r3, [pc, #496]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 80040c2:	705a      	strb	r2, [r3, #1]
			if(segmentCounterVar.segmentBCnt >= 40)
 80040c4:	4b7b      	ldr	r3, [pc, #492]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 80040c6:	785b      	ldrb	r3, [r3, #1]
 80040c8:	2b27      	cmp	r3, #39	; 0x27
 80040ca:	d914      	bls.n	80040f6 <TIM6_DAC_IRQHandler+0xc6>
			{
				displayValueHex &= ~(1 << 1);
 80040cc:	4b7a      	ldr	r3, [pc, #488]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	f023 0302 	bic.w	r3, r3, #2
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	4b78      	ldr	r3, [pc, #480]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 80040d8:	701a      	strb	r2, [r3, #0]
				segmentCounterVar.segmentBCnt = 0;
 80040da:	4b76      	ldr	r3, [pc, #472]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 80040dc:	2200      	movs	r2, #0
 80040de:	705a      	strb	r2, [r3, #1]
 80040e0:	e009      	b.n	80040f6 <TIM6_DAC_IRQHandler+0xc6>
			}
		}
		else
		{
			segmentCounterVar.segmentBCnt = 0;
 80040e2:	4b74      	ldr	r3, [pc, #464]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	705a      	strb	r2, [r3, #1]
			displayValueHex |= (1 << 1);
 80040e8:	4b73      	ldr	r3, [pc, #460]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	f043 0302 	orr.w	r3, r3, #2
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	4b71      	ldr	r3, [pc, #452]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 80040f4:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(C_SEG_GPIO_Port, C_SEG_Pin) == (uint8_t)RESET)
 80040f6:	2108      	movs	r1, #8
 80040f8:	486d      	ldr	r0, [pc, #436]	; (80042b0 <TIM6_DAC_IRQHandler+0x280>)
 80040fa:	f001 fb5b 	bl	80057b4 <HAL_GPIO_ReadPin>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d114      	bne.n	800412e <TIM6_DAC_IRQHandler+0xfe>
		{
			segmentCounterVar.segmentCCnt++;
 8004104:	4b6b      	ldr	r3, [pc, #428]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004106:	789b      	ldrb	r3, [r3, #2]
 8004108:	3301      	adds	r3, #1
 800410a:	b2da      	uxtb	r2, r3
 800410c:	4b69      	ldr	r3, [pc, #420]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 800410e:	709a      	strb	r2, [r3, #2]
			if(segmentCounterVar.segmentCCnt >= 40)
 8004110:	4b68      	ldr	r3, [pc, #416]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004112:	789b      	ldrb	r3, [r3, #2]
 8004114:	2b27      	cmp	r3, #39	; 0x27
 8004116:	d914      	bls.n	8004142 <TIM6_DAC_IRQHandler+0x112>
			{
				displayValueHex &= ~(1 << 2);
 8004118:	4b67      	ldr	r3, [pc, #412]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	b2da      	uxtb	r2, r3
 8004122:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 8004124:	701a      	strb	r2, [r3, #0]
				segmentCounterVar.segmentCCnt = 0;
 8004126:	4b63      	ldr	r3, [pc, #396]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004128:	2200      	movs	r2, #0
 800412a:	709a      	strb	r2, [r3, #2]
 800412c:	e009      	b.n	8004142 <TIM6_DAC_IRQHandler+0x112>
			}
		}
		else
		{
			segmentCounterVar.segmentCCnt = 0;
 800412e:	4b61      	ldr	r3, [pc, #388]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004130:	2200      	movs	r2, #0
 8004132:	709a      	strb	r2, [r3, #2]
			displayValueHex |= (1 << 2);
 8004134:	4b60      	ldr	r3, [pc, #384]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	f043 0304 	orr.w	r3, r3, #4
 800413c:	b2da      	uxtb	r2, r3
 800413e:	4b5e      	ldr	r3, [pc, #376]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 8004140:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(D_SEG_GPIO_Port, D_SEG_Pin) == (uint8_t)RESET)
 8004142:	2110      	movs	r1, #16
 8004144:	485a      	ldr	r0, [pc, #360]	; (80042b0 <TIM6_DAC_IRQHandler+0x280>)
 8004146:	f001 fb35 	bl	80057b4 <HAL_GPIO_ReadPin>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d110      	bne.n	8004172 <TIM6_DAC_IRQHandler+0x142>
		{
			segmentCounterVar.segmentDtempCnt++;
 8004150:	4b58      	ldr	r3, [pc, #352]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004152:	889b      	ldrh	r3, [r3, #4]
 8004154:	3301      	adds	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	4b56      	ldr	r3, [pc, #344]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 800415a:	809a      	strh	r2, [r3, #4]
			if(segmentCounterVar.segmentDtempCnt >= 40)
 800415c:	4b55      	ldr	r3, [pc, #340]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 800415e:	889b      	ldrh	r3, [r3, #4]
 8004160:	2b27      	cmp	r3, #39	; 0x27
 8004162:	d90c      	bls.n	800417e <TIM6_DAC_IRQHandler+0x14e>
			{
				segmentCounterVar.segmentDtempvalue=0;
 8004164:	4b53      	ldr	r3, [pc, #332]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004166:	2200      	movs	r2, #0
 8004168:	719a      	strb	r2, [r3, #6]
				segmentCounterVar.segmentDtempCnt = 0;
 800416a:	4b52      	ldr	r3, [pc, #328]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 800416c:	2200      	movs	r2, #0
 800416e:	809a      	strh	r2, [r3, #4]
 8004170:	e005      	b.n	800417e <TIM6_DAC_IRQHandler+0x14e>
			}
		}
		else
		{
			segmentCounterVar.segmentDtempCnt = 0;
 8004172:	4b50      	ldr	r3, [pc, #320]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004174:	2200      	movs	r2, #0
 8004176:	809a      	strh	r2, [r3, #4]
			segmentCounterVar.segmentDtempvalue=1;
 8004178:	4b4e      	ldr	r3, [pc, #312]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 800417a:	2201      	movs	r2, #1
 800417c:	719a      	strb	r2, [r3, #6]
		}



		if(segmentCounterVar.segmentDtempvalue)
 800417e:	4b4d      	ldr	r3, [pc, #308]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004180:	799b      	ldrb	r3, [r3, #6]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <TIM6_DAC_IRQHandler+0x164>
		{
			segmentCounterVar.segmentDCnt++;
 8004186:	4b4b      	ldr	r3, [pc, #300]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004188:	78db      	ldrb	r3, [r3, #3]
 800418a:	3301      	adds	r3, #1
 800418c:	b2da      	uxtb	r2, r3
 800418e:	4b49      	ldr	r3, [pc, #292]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004190:	70da      	strb	r2, [r3, #3]
 8004192:	e009      	b.n	80041a8 <TIM6_DAC_IRQHandler+0x178>
				segmentCounterVar.segmentDCnt = 0;
			}
		}
		else
		{
			segmentCounterVar.segmentDCnt = 0;
 8004194:	4b47      	ldr	r3, [pc, #284]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004196:	2200      	movs	r2, #0
 8004198:	70da      	strb	r2, [r3, #3]
			displayValueHex &= ~(1 << 3);
 800419a:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	f023 0308 	bic.w	r3, r3, #8
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	4b44      	ldr	r3, [pc, #272]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 80041a6:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(E_SEG_GPIO_Port, E_SEG_Pin) == (uint8_t)RESET)
 80041a8:	2140      	movs	r1, #64	; 0x40
 80041aa:	4841      	ldr	r0, [pc, #260]	; (80042b0 <TIM6_DAC_IRQHandler+0x280>)
 80041ac:	f001 fb02 	bl	80057b4 <HAL_GPIO_ReadPin>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d114      	bne.n	80041e0 <TIM6_DAC_IRQHandler+0x1b0>
		{
			segmentCounterVar.segmentECnt++;
 80041b6:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 80041b8:	79db      	ldrb	r3, [r3, #7]
 80041ba:	3301      	adds	r3, #1
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 80041c0:	71da      	strb	r2, [r3, #7]
			if(segmentCounterVar.segmentECnt >= 40)
 80041c2:	4b3c      	ldr	r3, [pc, #240]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 80041c4:	79db      	ldrb	r3, [r3, #7]
 80041c6:	2b27      	cmp	r3, #39	; 0x27
 80041c8:	d914      	bls.n	80041f4 <TIM6_DAC_IRQHandler+0x1c4>
			{
				displayValueHex &= ~(1 << 4);
 80041ca:	4b3b      	ldr	r3, [pc, #236]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	f023 0310 	bic.w	r3, r3, #16
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	4b38      	ldr	r3, [pc, #224]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 80041d6:	701a      	strb	r2, [r3, #0]
				segmentCounterVar.segmentECnt = 0;
 80041d8:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 80041da:	2200      	movs	r2, #0
 80041dc:	71da      	strb	r2, [r3, #7]
 80041de:	e009      	b.n	80041f4 <TIM6_DAC_IRQHandler+0x1c4>
			}
		}
		else
		{
			segmentCounterVar.segmentECnt = 0;
 80041e0:	4b34      	ldr	r3, [pc, #208]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	71da      	strb	r2, [r3, #7]
			displayValueHex |= (1 << 4);
 80041e6:	4b34      	ldr	r3, [pc, #208]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	f043 0310 	orr.w	r3, r3, #16
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 80041f2:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(F_SEG_GPIO_Port, F_SEG_Pin) == (uint8_t)RESET)
 80041f4:	2180      	movs	r1, #128	; 0x80
 80041f6:	482e      	ldr	r0, [pc, #184]	; (80042b0 <TIM6_DAC_IRQHandler+0x280>)
 80041f8:	f001 fadc 	bl	80057b4 <HAL_GPIO_ReadPin>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d114      	bne.n	800422c <TIM6_DAC_IRQHandler+0x1fc>
		{
			segmentCounterVar.segmentFCnt++;
 8004202:	4b2c      	ldr	r3, [pc, #176]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004204:	7a1b      	ldrb	r3, [r3, #8]
 8004206:	3301      	adds	r3, #1
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4b2a      	ldr	r3, [pc, #168]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 800420c:	721a      	strb	r2, [r3, #8]
			if(segmentCounterVar.segmentFCnt >= 40)
 800420e:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004210:	7a1b      	ldrb	r3, [r3, #8]
 8004212:	2b27      	cmp	r3, #39	; 0x27
 8004214:	d914      	bls.n	8004240 <TIM6_DAC_IRQHandler+0x210>
			{
				displayValueHex &= ~(1 << 5);
 8004216:	4b28      	ldr	r3, [pc, #160]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	f023 0320 	bic.w	r3, r3, #32
 800421e:	b2da      	uxtb	r2, r3
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 8004222:	701a      	strb	r2, [r3, #0]
				segmentCounterVar.segmentFCnt = 0;
 8004224:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004226:	2200      	movs	r2, #0
 8004228:	721a      	strb	r2, [r3, #8]
 800422a:	e009      	b.n	8004240 <TIM6_DAC_IRQHandler+0x210>
			}
		}
		else
		{
			segmentCounterVar.segmentFCnt = 0;
 800422c:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 800422e:	2200      	movs	r2, #0
 8004230:	721a      	strb	r2, [r3, #8]
			displayValueHex |= (1 << 5);
 8004232:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	f043 0320 	orr.w	r3, r3, #32
 800423a:	b2da      	uxtb	r2, r3
 800423c:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 800423e:	701a      	strb	r2, [r3, #0]
		}
		if(HAL_GPIO_ReadPin(G_SEG_GPIO_Port, G_SEG_Pin) == (uint8_t)RESET)
 8004240:	2110      	movs	r1, #16
 8004242:	481a      	ldr	r0, [pc, #104]	; (80042ac <TIM6_DAC_IRQHandler+0x27c>)
 8004244:	f001 fab6 	bl	80057b4 <HAL_GPIO_ReadPin>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d114      	bne.n	8004278 <TIM6_DAC_IRQHandler+0x248>
		{
			segmentCounterVar.segmentGCnt++;
 800424e:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004250:	7a5b      	ldrb	r3, [r3, #9]
 8004252:	3301      	adds	r3, #1
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004258:	725a      	strb	r2, [r3, #9]
			if(segmentCounterVar.segmentGCnt >= 40)
 800425a:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 800425c:	7a5b      	ldrb	r3, [r3, #9]
 800425e:	2b27      	cmp	r3, #39	; 0x27
 8004260:	d914      	bls.n	800428c <TIM6_DAC_IRQHandler+0x25c>
			{
				displayValueHex &= ~(1 << 6);
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800426a:	b2da      	uxtb	r2, r3
 800426c:	4b12      	ldr	r3, [pc, #72]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 800426e:	701a      	strb	r2, [r3, #0]
				segmentCounterVar.segmentGCnt = 0;
 8004270:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 8004272:	2200      	movs	r2, #0
 8004274:	725a      	strb	r2, [r3, #9]
 8004276:	e009      	b.n	800428c <TIM6_DAC_IRQHandler+0x25c>
			}
		}
		else
		{
			segmentCounterVar.segmentGCnt = 0;
 8004278:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <TIM6_DAC_IRQHandler+0x284>)
 800427a:	2200      	movs	r2, #0
 800427c:	725a      	strb	r2, [r3, #9]
			displayValueHex |= (1 << 6);
 800427e:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004286:	b2da      	uxtb	r2, r3
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 800428a:	701a      	strb	r2, [r3, #0]
		}
		displayValueHex &= ~(1 << 7);
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <TIM6_DAC_IRQHandler+0x288>)
 8004298:	701a      	strb	r2, [r3, #0]
	}
	displayValueHex &= ~(1 << 7);
	#endif
#endif
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20008ef0 	.word	0x20008ef0
 80042a4:	20008f70 	.word	0x20008f70
 80042a8:	2000914c 	.word	0x2000914c
 80042ac:	40020800 	.word	0x40020800
 80042b0:	40020000 	.word	0x40020000
 80042b4:	2000913c 	.word	0x2000913c
 80042b8:	20008dc4 	.word	0x20008dc4

080042bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80042c0:	4802      	ldr	r0, [pc, #8]	; (80042cc <DMA2_Stream0_IRQHandler+0x10>)
 80042c2:	f000 fe9f 	bl	8005004 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20008f08 	.word	0x20008f08

080042d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80042d4:	4802      	ldr	r0, [pc, #8]	; (80042e0 <OTG_FS_IRQHandler+0x10>)
 80042d6:	f002 fbdc 	bl	8006a92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	2000a664 	.word	0x2000a664

080042e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
	return 1;
 80042e8:	2301      	movs	r3, #1
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_kill>:

int _kill(int pid, int sig)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042fe:	f00c fa6d 	bl	80107dc <__errno>
 8004302:	4603      	mov	r3, r0
 8004304:	2216      	movs	r2, #22
 8004306:	601a      	str	r2, [r3, #0]
	return -1;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <_exit>:

void _exit (int status)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800431c:	f04f 31ff 	mov.w	r1, #4294967295
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ffe7 	bl	80042f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004326:	e7fe      	b.n	8004326 <_exit+0x12>

08004328 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e00a      	b.n	8004350 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800433a:	f3af 8000 	nop.w
 800433e:	4601      	mov	r1, r0
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	60ba      	str	r2, [r7, #8]
 8004346:	b2ca      	uxtb	r2, r1
 8004348:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	3301      	adds	r3, #1
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	dbf0      	blt.n	800433a <_read+0x12>
	}

return len;
 8004358:	687b      	ldr	r3, [r7, #4]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e009      	b.n	8004388 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	60ba      	str	r2, [r7, #8]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	3301      	adds	r3, #1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	dbf1      	blt.n	8004374 <_write+0x12>
	}
	return len;
 8004390:	687b      	ldr	r3, [r7, #4]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <_close>:

int _close(int file)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
	return -1;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043c2:	605a      	str	r2, [r3, #4]
	return 0;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <_isatty>:

int _isatty(int file)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
	return 1;
 80043da:	2301      	movs	r3, #1
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
	return 0;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800440c:	4a14      	ldr	r2, [pc, #80]	; (8004460 <_sbrk+0x5c>)
 800440e:	4b15      	ldr	r3, [pc, #84]	; (8004464 <_sbrk+0x60>)
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004418:	4b13      	ldr	r3, [pc, #76]	; (8004468 <_sbrk+0x64>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <_sbrk+0x64>)
 8004422:	4a12      	ldr	r2, [pc, #72]	; (800446c <_sbrk+0x68>)
 8004424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004426:	4b10      	ldr	r3, [pc, #64]	; (8004468 <_sbrk+0x64>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d207      	bcs.n	8004444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004434:	f00c f9d2 	bl	80107dc <__errno>
 8004438:	4603      	mov	r3, r0
 800443a:	220c      	movs	r2, #12
 800443c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800443e:	f04f 33ff 	mov.w	r3, #4294967295
 8004442:	e009      	b.n	8004458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <_sbrk+0x64>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <_sbrk+0x64>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	4a05      	ldr	r2, [pc, #20]	; (8004468 <_sbrk+0x64>)
 8004454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20020000 	.word	0x20020000
 8004464:	00000400 	.word	0x00000400
 8004468:	200004a8 	.word	0x200004a8
 800446c:	2000aa80 	.word	0x2000aa80

08004470 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <SystemInit+0x28>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	4a07      	ldr	r2, [pc, #28]	; (8004498 <SystemInit+0x28>)
 800447c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <SystemInit+0x28>)
 8004486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800448a:	609a      	str	r2, [r3, #8]
#endif
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800449c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80044a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044a2:	e003      	b.n	80044ac <LoopCopyDataInit>

080044a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80044a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044aa:	3104      	adds	r1, #4

080044ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044ac:	480b      	ldr	r0, [pc, #44]	; (80044dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80044b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044b4:	d3f6      	bcc.n	80044a4 <CopyDataInit>
  ldr  r2, =_sbss
 80044b6:	4a0b      	ldr	r2, [pc, #44]	; (80044e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80044b8:	e002      	b.n	80044c0 <LoopFillZerobss>

080044ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044bc:	f842 3b04 	str.w	r3, [r2], #4

080044c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044c0:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80044c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044c4:	d3f9      	bcc.n	80044ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044c6:	f7ff ffd3 	bl	8004470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044ca:	f00c f98d 	bl	80107e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044ce:	f7fd fe61 	bl	8002194 <main>
  bx  lr    
 80044d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80044d8:	08015924 	.word	0x08015924
  ldr  r0, =_sdata
 80044dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80044e0:	2000036c 	.word	0x2000036c
  ldr  r2, =_sbss
 80044e4:	2000036c 	.word	0x2000036c
  ldr  r3, = _ebss
 80044e8:	2000aa7c 	.word	0x2000aa7c

080044ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044ec:	e7fe      	b.n	80044ec <ADC_IRQHandler>
	...

080044f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044f4:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <HAL_Init+0x40>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a0d      	ldr	r2, [pc, #52]	; (8004530 <HAL_Init+0x40>)
 80044fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_Init+0x40>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <HAL_Init+0x40>)
 8004506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800450a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800450c:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_Init+0x40>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a07      	ldr	r2, [pc, #28]	; (8004530 <HAL_Init+0x40>)
 8004512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004518:	2003      	movs	r0, #3
 800451a:	f000 fb5e 	bl	8004bda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800451e:	2000      	movs	r0, #0
 8004520:	f7ff fcb0 	bl	8003e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004524:	f7ff f9ec 	bl	8003900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40023c00 	.word	0x40023c00

08004534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_IncTick+0x20>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_IncTick+0x24>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4413      	add	r3, r2
 8004544:	4a04      	ldr	r2, [pc, #16]	; (8004558 <HAL_IncTick+0x24>)
 8004546:	6013      	str	r3, [r2, #0]
}
 8004548:	bf00      	nop
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	2000001c 	.word	0x2000001c
 8004558:	20009150 	.word	0x20009150

0800455c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return uwTick;
 8004560:	4b03      	ldr	r3, [pc, #12]	; (8004570 <HAL_GetTick+0x14>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20009150 	.word	0x20009150

08004574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800457c:	f7ff ffee 	bl	800455c <HAL_GetTick>
 8004580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d005      	beq.n	800459a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_Delay+0x44>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800459a:	bf00      	nop
 800459c:	f7ff ffde 	bl	800455c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d8f7      	bhi.n	800459c <HAL_Delay+0x28>
  {
  }
}
 80045ac:	bf00      	nop
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	2000001c 	.word	0x2000001c

080045bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e033      	b.n	800463a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff f9bc 	bl	8003958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d118      	bne.n	800462c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004602:	f023 0302 	bic.w	r3, r3, #2
 8004606:	f043 0202 	orr.w	r2, r3, #2
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f93a 	bl	8004888 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
 800462a:	e001      	b.n	8004630 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004638:	7bfb      	ldrb	r3, [r7, #15]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x1c>
 800465c:	2302      	movs	r3, #2
 800465e:	e105      	b.n	800486c <HAL_ADC_ConfigChannel+0x228>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b09      	cmp	r3, #9
 800466e:	d925      	bls.n	80046bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68d9      	ldr	r1, [r3, #12]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	3b1e      	subs	r3, #30
 8004686:	2207      	movs	r2, #7
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	43da      	mvns	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	400a      	ands	r2, r1
 8004694:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68d9      	ldr	r1, [r3, #12]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	4618      	mov	r0, r3
 80046a8:	4603      	mov	r3, r0
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4403      	add	r3, r0
 80046ae:	3b1e      	subs	r3, #30
 80046b0:	409a      	lsls	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	60da      	str	r2, [r3, #12]
 80046ba:	e022      	b.n	8004702 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6919      	ldr	r1, [r3, #16]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	2207      	movs	r2, #7
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43da      	mvns	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	400a      	ands	r2, r1
 80046de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6919      	ldr	r1, [r3, #16]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	4618      	mov	r0, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4403      	add	r3, r0
 80046f8:	409a      	lsls	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b06      	cmp	r3, #6
 8004708:	d824      	bhi.n	8004754 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	3b05      	subs	r3, #5
 800471c:	221f      	movs	r2, #31
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43da      	mvns	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	400a      	ands	r2, r1
 800472a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	b29b      	uxth	r3, r3
 8004738:	4618      	mov	r0, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	3b05      	subs	r3, #5
 8004746:	fa00 f203 	lsl.w	r2, r0, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	635a      	str	r2, [r3, #52]	; 0x34
 8004752:	e04c      	b.n	80047ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b0c      	cmp	r3, #12
 800475a:	d824      	bhi.n	80047a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	3b23      	subs	r3, #35	; 0x23
 800476e:	221f      	movs	r2, #31
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43da      	mvns	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	400a      	ands	r2, r1
 800477c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	4618      	mov	r0, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685a      	ldr	r2, [r3, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	3b23      	subs	r3, #35	; 0x23
 8004798:	fa00 f203 	lsl.w	r2, r0, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
 80047a4:	e023      	b.n	80047ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	3b41      	subs	r3, #65	; 0x41
 80047b8:	221f      	movs	r2, #31
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43da      	mvns	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	400a      	ands	r2, r1
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	4618      	mov	r0, r3
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	3b41      	subs	r3, #65	; 0x41
 80047e2:	fa00 f203 	lsl.w	r2, r0, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <HAL_ADC_ConfigChannel+0x234>)
 80047f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a21      	ldr	r2, [pc, #132]	; (800487c <HAL_ADC_ConfigChannel+0x238>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d109      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x1cc>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b12      	cmp	r3, #18
 8004802:	d105      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a19      	ldr	r2, [pc, #100]	; (800487c <HAL_ADC_ConfigChannel+0x238>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d123      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x21e>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b10      	cmp	r3, #16
 8004820:	d003      	beq.n	800482a <HAL_ADC_ConfigChannel+0x1e6>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b11      	cmp	r3, #17
 8004828:	d11b      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b10      	cmp	r3, #16
 800483c:	d111      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800483e:	4b10      	ldr	r3, [pc, #64]	; (8004880 <HAL_ADC_ConfigChannel+0x23c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a10      	ldr	r2, [pc, #64]	; (8004884 <HAL_ADC_ConfigChannel+0x240>)
 8004844:	fba2 2303 	umull	r2, r3, r2, r3
 8004848:	0c9a      	lsrs	r2, r3, #18
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004854:	e002      	b.n	800485c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	3b01      	subs	r3, #1
 800485a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f9      	bne.n	8004856 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	40012300 	.word	0x40012300
 800487c:	40012000 	.word	0x40012000
 8004880:	20000014 	.word	0x20000014
 8004884:	431bde83 	.word	0x431bde83

08004888 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004890:	4b79      	ldr	r3, [pc, #484]	; (8004a78 <ADC_Init+0x1f0>)
 8004892:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6859      	ldr	r1, [r3, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	021a      	lsls	r2, r3, #8
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80048e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004902:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6899      	ldr	r1, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	4a58      	ldr	r2, [pc, #352]	; (8004a7c <ADC_Init+0x1f4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d022      	beq.n	8004966 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800492e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6899      	ldr	r1, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6899      	ldr	r1, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	e00f      	b.n	8004986 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004984:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0202 	bic.w	r2, r2, #2
 8004994:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6899      	ldr	r1, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	7e1b      	ldrb	r3, [r3, #24]
 80049a0:	005a      	lsls	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01b      	beq.n	80049ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80049d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	3b01      	subs	r3, #1
 80049e0:	035a      	lsls	r2, r3, #13
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	e007      	b.n	80049fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	051a      	lsls	r2, r3, #20
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6899      	ldr	r1, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a3e:	025a      	lsls	r2, r3, #9
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6899      	ldr	r1, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	029a      	lsls	r2, r3, #10
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]
}
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40012300 	.word	0x40012300
 8004a7c:	0f000001 	.word	0x0f000001

08004a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ab2:	4a04      	ldr	r2, [pc, #16]	; (8004ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	60d3      	str	r3, [r2, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	e000ed00 	.word	0xe000ed00

08004ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004acc:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	f003 0307 	and.w	r3, r3, #7
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	db0b      	blt.n	8004b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004af6:	79fb      	ldrb	r3, [r7, #7]
 8004af8:	f003 021f 	and.w	r2, r3, #31
 8004afc:	4907      	ldr	r1, [pc, #28]	; (8004b1c <__NVIC_EnableIRQ+0x38>)
 8004afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	2001      	movs	r0, #1
 8004b06:	fa00 f202 	lsl.w	r2, r0, r2
 8004b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	e000e100 	.word	0xe000e100

08004b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	6039      	str	r1, [r7, #0]
 8004b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	db0a      	blt.n	8004b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	490c      	ldr	r1, [pc, #48]	; (8004b6c <__NVIC_SetPriority+0x4c>)
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	0112      	lsls	r2, r2, #4
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	440b      	add	r3, r1
 8004b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b48:	e00a      	b.n	8004b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	4908      	ldr	r1, [pc, #32]	; (8004b70 <__NVIC_SetPriority+0x50>)
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	3b04      	subs	r3, #4
 8004b58:	0112      	lsls	r2, r2, #4
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	761a      	strb	r2, [r3, #24]
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	e000e100 	.word	0xe000e100
 8004b70:	e000ed00 	.word	0xe000ed00

08004b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b089      	sub	sp, #36	; 0x24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f1c3 0307 	rsb	r3, r3, #7
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	bf28      	it	cs
 8004b92:	2304      	movcs	r3, #4
 8004b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	2b06      	cmp	r3, #6
 8004b9c:	d902      	bls.n	8004ba4 <NVIC_EncodePriority+0x30>
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3b03      	subs	r3, #3
 8004ba2:	e000      	b.n	8004ba6 <NVIC_EncodePriority+0x32>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43da      	mvns	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	401a      	ands	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc6:	43d9      	mvns	r1, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bcc:	4313      	orrs	r3, r2
         );
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3724      	adds	r7, #36	; 0x24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b082      	sub	sp, #8
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff ff4c 	bl	8004a80 <__NVIC_SetPriorityGrouping>
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c02:	f7ff ff61 	bl	8004ac8 <__NVIC_GetPriorityGrouping>
 8004c06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	6978      	ldr	r0, [r7, #20]
 8004c0e:	f7ff ffb1 	bl	8004b74 <NVIC_EncodePriority>
 8004c12:	4602      	mov	r2, r0
 8004c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ff80 	bl	8004b20 <__NVIC_SetPriority>
}
 8004c20:	bf00      	nop
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff ff54 	bl	8004ae4 <__NVIC_EnableIRQ>
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e014      	b.n	8004c80 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	791b      	ldrb	r3, [r3, #4]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fe ff0a 	bl	8003a80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	795b      	ldrb	r3, [r3, #5]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d101      	bne.n	8004c9e <HAL_DAC_Start+0x16>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e040      	b.n	8004d20 <HAL_DAC_Start+0x98>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10f      	bne.n	8004ce8 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004cd2:	2b3c      	cmp	r3, #60	; 0x3c
 8004cd4:	d11d      	bne.n	8004d12 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0201 	orr.w	r2, r2, #1
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	e014      	b.n	8004d12 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	213c      	movs	r1, #60	; 0x3c
 8004cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d107      	bne.n	8004d12 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0202 	orr.w	r2, r2, #2
 8004d10:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d42:	d120      	bne.n	8004d86 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d52:	d118      	bne.n	8004d86 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2204      	movs	r2, #4
 8004d58:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f043 0201 	orr.w	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f82d 	bl	8004de0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d94:	d120      	bne.n	8004dd8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da4:	d118      	bne.n	8004dd8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2204      	movs	r2, #4
 8004daa:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f043 0202 	orr.w	r2, r3, #2
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004dc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004dd0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f85d 	bl	8004e92 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	795b      	ldrb	r3, [r3, #5]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_DAC_ConfigChannel+0x18>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e03c      	b.n	8004e86 <HAL_DAC_ConfigChannel+0x92>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2202      	movs	r2, #2
 8004e16:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4013      	ands	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f003 0310 	and.w	r3, r3, #16
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6819      	ldr	r1, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	22c0      	movs	r2, #192	; 0xc0
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	400a      	ands	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004eb4:	f7ff fb52 	bl	800455c <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e099      	b.n	8004ff8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0201 	bic.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ee4:	e00f      	b.n	8004f06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ee6:	f7ff fb39 	bl	800455c <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b05      	cmp	r3, #5
 8004ef2:	d908      	bls.n	8004f06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2203      	movs	r2, #3
 8004efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e078      	b.n	8004ff8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e8      	bne.n	8004ee6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4b38      	ldr	r3, [pc, #224]	; (8005000 <HAL_DMA_Init+0x158>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d107      	bne.n	8004f70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0307 	bic.w	r3, r3, #7
 8004f86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d117      	bne.n	8004fca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00e      	beq.n	8004fca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f9e9 	bl	8005384 <DMA_CheckFifoParam>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2240      	movs	r2, #64	; 0x40
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e016      	b.n	8004ff8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f9a0 	bl	8005318 <DMA_CalcBaseAndBitshift>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe0:	223f      	movs	r2, #63	; 0x3f
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3718      	adds	r7, #24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	f010803f 	.word	0xf010803f

08005004 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005010:	4b92      	ldr	r3, [pc, #584]	; (800525c <HAL_DMA_IRQHandler+0x258>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a92      	ldr	r2, [pc, #584]	; (8005260 <HAL_DMA_IRQHandler+0x25c>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	0a9b      	lsrs	r3, r3, #10
 800501c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005022:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502e:	2208      	movs	r2, #8
 8005030:	409a      	lsls	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4013      	ands	r3, r2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01a      	beq.n	8005070 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d013      	beq.n	8005070 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0204 	bic.w	r2, r2, #4
 8005056:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505c:	2208      	movs	r2, #8
 800505e:	409a      	lsls	r2, r3
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005068:	f043 0201 	orr.w	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005074:	2201      	movs	r2, #1
 8005076:	409a      	lsls	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4013      	ands	r3, r2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d012      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00b      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005092:	2201      	movs	r2, #1
 8005094:	409a      	lsls	r2, r3
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f043 0202 	orr.w	r2, r3, #2
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050aa:	2204      	movs	r2, #4
 80050ac:	409a      	lsls	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d012      	beq.n	80050dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00b      	beq.n	80050dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c8:	2204      	movs	r2, #4
 80050ca:	409a      	lsls	r2, r3
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d4:	f043 0204 	orr.w	r2, r3, #4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e0:	2210      	movs	r2, #16
 80050e2:	409a      	lsls	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d043      	beq.n	8005174 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d03c      	beq.n	8005174 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fe:	2210      	movs	r2, #16
 8005100:	409a      	lsls	r2, r3
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d018      	beq.n	8005146 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d108      	bne.n	8005134 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d024      	beq.n	8005174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
 8005132:	e01f      	b.n	8005174 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01b      	beq.n	8005174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	4798      	blx	r3
 8005144:	e016      	b.n	8005174 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d107      	bne.n	8005164 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0208 	bic.w	r2, r2, #8
 8005162:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005178:	2220      	movs	r2, #32
 800517a:	409a      	lsls	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	f000 808e 	beq.w	80052a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8086 	beq.w	80052a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519a:	2220      	movs	r2, #32
 800519c:	409a      	lsls	r2, r3
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	d136      	bne.n	800521c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0216 	bic.w	r2, r2, #22
 80051bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695a      	ldr	r2, [r3, #20]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d103      	bne.n	80051de <HAL_DMA_IRQHandler+0x1da>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d007      	beq.n	80051ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0208 	bic.w	r2, r2, #8
 80051ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f2:	223f      	movs	r2, #63	; 0x3f
 80051f4:	409a      	lsls	r2, r3
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520e:	2b00      	cmp	r3, #0
 8005210:	d07d      	beq.n	800530e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	4798      	blx	r3
        }
        return;
 800521a:	e078      	b.n	800530e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d01c      	beq.n	8005264 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d108      	bne.n	800524a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523c:	2b00      	cmp	r3, #0
 800523e:	d030      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	4798      	blx	r3
 8005248:	e02b      	b.n	80052a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	2b00      	cmp	r3, #0
 8005250:	d027      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
 800525a:	e022      	b.n	80052a2 <HAL_DMA_IRQHandler+0x29e>
 800525c:	20000014 	.word	0x20000014
 8005260:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0210 	bic.w	r2, r2, #16
 8005280:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d032      	beq.n	8005310 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d022      	beq.n	80052fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2205      	movs	r2, #5
 80052ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0201 	bic.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	3301      	adds	r3, #1
 80052d2:	60bb      	str	r3, [r7, #8]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d307      	bcc.n	80052ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f2      	bne.n	80052ce <HAL_DMA_IRQHandler+0x2ca>
 80052e8:	e000      	b.n	80052ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80052ea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
 800530c:	e000      	b.n	8005310 <HAL_DMA_IRQHandler+0x30c>
        return;
 800530e:	bf00      	nop
    }
  }
}
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop

08005318 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	3b10      	subs	r3, #16
 8005328:	4a14      	ldr	r2, [pc, #80]	; (800537c <DMA_CalcBaseAndBitshift+0x64>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005332:	4a13      	ldr	r2, [pc, #76]	; (8005380 <DMA_CalcBaseAndBitshift+0x68>)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d909      	bls.n	800535a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	1d1a      	adds	r2, r3, #4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	659a      	str	r2, [r3, #88]	; 0x58
 8005358:	e007      	b.n	800536a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800536e:	4618      	mov	r0, r3
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	aaaaaaab 	.word	0xaaaaaaab
 8005380:	08015454 	.word	0x08015454

08005384 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005394:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d11f      	bne.n	80053de <DMA_CheckFifoParam+0x5a>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d856      	bhi.n	8005452 <DMA_CheckFifoParam+0xce>
 80053a4:	a201      	add	r2, pc, #4	; (adr r2, 80053ac <DMA_CheckFifoParam+0x28>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053bd 	.word	0x080053bd
 80053b0:	080053cf 	.word	0x080053cf
 80053b4:	080053bd 	.word	0x080053bd
 80053b8:	08005453 	.word	0x08005453
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d046      	beq.n	8005456 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053cc:	e043      	b.n	8005456 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053d6:	d140      	bne.n	800545a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053dc:	e03d      	b.n	800545a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e6:	d121      	bne.n	800542c <DMA_CheckFifoParam+0xa8>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d837      	bhi.n	800545e <DMA_CheckFifoParam+0xda>
 80053ee:	a201      	add	r2, pc, #4	; (adr r2, 80053f4 <DMA_CheckFifoParam+0x70>)
 80053f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f4:	08005405 	.word	0x08005405
 80053f8:	0800540b 	.word	0x0800540b
 80053fc:	08005405 	.word	0x08005405
 8005400:	0800541d 	.word	0x0800541d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
      break;
 8005408:	e030      	b.n	800546c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d025      	beq.n	8005462 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800541a:	e022      	b.n	8005462 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005424:	d11f      	bne.n	8005466 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800542a:	e01c      	b.n	8005466 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d903      	bls.n	800543a <DMA_CheckFifoParam+0xb6>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d003      	beq.n	8005440 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005438:	e018      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	73fb      	strb	r3, [r7, #15]
      break;
 800543e:	e015      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00e      	beq.n	800546a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
      break;
 8005450:	e00b      	b.n	800546a <DMA_CheckFifoParam+0xe6>
      break;
 8005452:	bf00      	nop
 8005454:	e00a      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 8005456:	bf00      	nop
 8005458:	e008      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 800545a:	bf00      	nop
 800545c:	e006      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 800545e:	bf00      	nop
 8005460:	e004      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 8005462:	bf00      	nop
 8005464:	e002      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;   
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <DMA_CheckFifoParam+0xe8>
      break;
 800546a:	bf00      	nop
    }
  } 
  
  return status; 
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop

0800547c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800547c:	b480      	push	{r7}
 800547e:	b089      	sub	sp, #36	; 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005492:	2300      	movs	r3, #0
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	e16b      	b.n	8005770 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005498:	2201      	movs	r2, #1
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	fa02 f303 	lsl.w	r3, r2, r3
 80054a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4013      	ands	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	f040 815a 	bne.w	800576a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d005      	beq.n	80054ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d130      	bne.n	8005530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	2203      	movs	r2, #3
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43db      	mvns	r3, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005504:	2201      	movs	r2, #1
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f003 0201 	and.w	r2, r3, #1
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	2b03      	cmp	r3, #3
 800553a:	d017      	beq.n	800556c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	2203      	movs	r2, #3
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	43db      	mvns	r3, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4013      	ands	r3, r2
 8005552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d123      	bne.n	80055c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	08da      	lsrs	r2, r3, #3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3208      	adds	r2, #8
 8005580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	220f      	movs	r2, #15
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4013      	ands	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	08da      	lsrs	r2, r3, #3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3208      	adds	r2, #8
 80055ba:	69b9      	ldr	r1, [r7, #24]
 80055bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	2203      	movs	r2, #3
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4013      	ands	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 0203 	and.w	r2, r3, #3
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80b4 	beq.w	800576a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	4b60      	ldr	r3, [pc, #384]	; (8005788 <HAL_GPIO_Init+0x30c>)
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	4a5f      	ldr	r2, [pc, #380]	; (8005788 <HAL_GPIO_Init+0x30c>)
 800560c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005610:	6453      	str	r3, [r2, #68]	; 0x44
 8005612:	4b5d      	ldr	r3, [pc, #372]	; (8005788 <HAL_GPIO_Init+0x30c>)
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800561e:	4a5b      	ldr	r2, [pc, #364]	; (800578c <HAL_GPIO_Init+0x310>)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	3302      	adds	r3, #2
 8005626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	220f      	movs	r2, #15
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43db      	mvns	r3, r3
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	4013      	ands	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a52      	ldr	r2, [pc, #328]	; (8005790 <HAL_GPIO_Init+0x314>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d02b      	beq.n	80056a2 <HAL_GPIO_Init+0x226>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a51      	ldr	r2, [pc, #324]	; (8005794 <HAL_GPIO_Init+0x318>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d025      	beq.n	800569e <HAL_GPIO_Init+0x222>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a50      	ldr	r2, [pc, #320]	; (8005798 <HAL_GPIO_Init+0x31c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01f      	beq.n	800569a <HAL_GPIO_Init+0x21e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a4f      	ldr	r2, [pc, #316]	; (800579c <HAL_GPIO_Init+0x320>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d019      	beq.n	8005696 <HAL_GPIO_Init+0x21a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a4e      	ldr	r2, [pc, #312]	; (80057a0 <HAL_GPIO_Init+0x324>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_GPIO_Init+0x216>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a4d      	ldr	r2, [pc, #308]	; (80057a4 <HAL_GPIO_Init+0x328>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00d      	beq.n	800568e <HAL_GPIO_Init+0x212>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a4c      	ldr	r2, [pc, #304]	; (80057a8 <HAL_GPIO_Init+0x32c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d007      	beq.n	800568a <HAL_GPIO_Init+0x20e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a4b      	ldr	r2, [pc, #300]	; (80057ac <HAL_GPIO_Init+0x330>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d101      	bne.n	8005686 <HAL_GPIO_Init+0x20a>
 8005682:	2307      	movs	r3, #7
 8005684:	e00e      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 8005686:	2308      	movs	r3, #8
 8005688:	e00c      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800568a:	2306      	movs	r3, #6
 800568c:	e00a      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800568e:	2305      	movs	r3, #5
 8005690:	e008      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 8005692:	2304      	movs	r3, #4
 8005694:	e006      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 8005696:	2303      	movs	r3, #3
 8005698:	e004      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800569a:	2302      	movs	r3, #2
 800569c:	e002      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <HAL_GPIO_Init+0x228>
 80056a2:	2300      	movs	r3, #0
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	f002 0203 	and.w	r2, r2, #3
 80056aa:	0092      	lsls	r2, r2, #2
 80056ac:	4093      	lsls	r3, r2
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056b4:	4935      	ldr	r1, [pc, #212]	; (800578c <HAL_GPIO_Init+0x310>)
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	089b      	lsrs	r3, r3, #2
 80056ba:	3302      	adds	r3, #2
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80056c2:	4b3b      	ldr	r3, [pc, #236]	; (80057b0 <HAL_GPIO_Init+0x334>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056e6:	4a32      	ldr	r2, [pc, #200]	; (80057b0 <HAL_GPIO_Init+0x334>)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056ec:	4b30      	ldr	r3, [pc, #192]	; (80057b0 <HAL_GPIO_Init+0x334>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005710:	4a27      	ldr	r2, [pc, #156]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005716:	4b26      	ldr	r3, [pc, #152]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	43db      	mvns	r3, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4013      	ands	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800573a:	4a1d      	ldr	r2, [pc, #116]	; (80057b0 <HAL_GPIO_Init+0x334>)
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005740:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005764:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <HAL_GPIO_Init+0x334>)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3301      	adds	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b0f      	cmp	r3, #15
 8005774:	f67f ae90 	bls.w	8005498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	3724      	adds	r7, #36	; 0x24
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40023800 	.word	0x40023800
 800578c:	40013800 	.word	0x40013800
 8005790:	40020000 	.word	0x40020000
 8005794:	40020400 	.word	0x40020400
 8005798:	40020800 	.word	0x40020800
 800579c:	40020c00 	.word	0x40020c00
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40021400 	.word	0x40021400
 80057a8:	40021800 	.word	0x40021800
 80057ac:	40021c00 	.word	0x40021c00
 80057b0:	40013c00 	.word	0x40013c00

080057b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	887b      	ldrh	r3, [r7, #2]
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
 80057d0:	e001      	b.n	80057d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]
 80057f0:	4613      	mov	r3, r2
 80057f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057f4:	787b      	ldrb	r3, [r7, #1]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005800:	e003      	b.n	800580a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005802:	887b      	ldrh	r3, [r7, #2]
 8005804:	041a      	lsls	r2, r3, #16
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	619a      	str	r2, [r3, #24]
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005816:	b480      	push	{r7}
 8005818:	b085      	sub	sp, #20
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005828:	887a      	ldrh	r2, [r7, #2]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4013      	ands	r3, r2
 800582e:	041a      	lsls	r2, r3, #16
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	43d9      	mvns	r1, r3
 8005834:	887b      	ldrh	r3, [r7, #2]
 8005836:	400b      	ands	r3, r1
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	619a      	str	r2, [r3, #24]
}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	4603      	mov	r3, r0
 8005854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005856:	4b08      	ldr	r3, [pc, #32]	; (8005878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005858:	695a      	ldr	r2, [r3, #20]
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	4013      	ands	r3, r2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d006      	beq.n	8005870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005862:	4a05      	ldr	r2, [pc, #20]	; (8005878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005868:	88fb      	ldrh	r3, [r7, #6]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f806 	bl	800587c <HAL_GPIO_EXTI_Callback>
  }
}
 8005870:	bf00      	nop
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40013c00 	.word	0x40013c00

0800587c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e12b      	b.n	8005afe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fe f92c 	bl	8003b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2224      	movs	r2, #36	; 0x24
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058f8:	f002 fd4a 	bl	8008390 <HAL_RCC_GetPCLK1Freq>
 80058fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4a81      	ldr	r2, [pc, #516]	; (8005b08 <HAL_I2C_Init+0x274>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d807      	bhi.n	8005918 <HAL_I2C_Init+0x84>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4a80      	ldr	r2, [pc, #512]	; (8005b0c <HAL_I2C_Init+0x278>)
 800590c:	4293      	cmp	r3, r2
 800590e:	bf94      	ite	ls
 8005910:	2301      	movls	r3, #1
 8005912:	2300      	movhi	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	e006      	b.n	8005926 <HAL_I2C_Init+0x92>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a7d      	ldr	r2, [pc, #500]	; (8005b10 <HAL_I2C_Init+0x27c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	bf94      	ite	ls
 8005920:	2301      	movls	r3, #1
 8005922:	2300      	movhi	r3, #0
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e0e7      	b.n	8005afe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4a78      	ldr	r2, [pc, #480]	; (8005b14 <HAL_I2C_Init+0x280>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	0c9b      	lsrs	r3, r3, #18
 8005938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	4a6a      	ldr	r2, [pc, #424]	; (8005b08 <HAL_I2C_Init+0x274>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d802      	bhi.n	8005968 <HAL_I2C_Init+0xd4>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	3301      	adds	r3, #1
 8005966:	e009      	b.n	800597c <HAL_I2C_Init+0xe8>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	4a69      	ldr	r2, [pc, #420]	; (8005b18 <HAL_I2C_Init+0x284>)
 8005974:	fba2 2303 	umull	r2, r3, r2, r3
 8005978:	099b      	lsrs	r3, r3, #6
 800597a:	3301      	adds	r3, #1
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	430b      	orrs	r3, r1
 8005982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800598e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	495c      	ldr	r1, [pc, #368]	; (8005b08 <HAL_I2C_Init+0x274>)
 8005998:	428b      	cmp	r3, r1
 800599a:	d819      	bhi.n	80059d0 <HAL_I2C_Init+0x13c>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	1e59      	subs	r1, r3, #1
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80059aa:	1c59      	adds	r1, r3, #1
 80059ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059b0:	400b      	ands	r3, r1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <HAL_I2C_Init+0x138>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1e59      	subs	r1, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80059c4:	3301      	adds	r3, #1
 80059c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ca:	e051      	b.n	8005a70 <HAL_I2C_Init+0x1dc>
 80059cc:	2304      	movs	r3, #4
 80059ce:	e04f      	b.n	8005a70 <HAL_I2C_Init+0x1dc>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d111      	bne.n	80059fc <HAL_I2C_Init+0x168>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	1e58      	subs	r0, r3, #1
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6859      	ldr	r1, [r3, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	440b      	add	r3, r1
 80059e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ea:	3301      	adds	r3, #1
 80059ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	bf0c      	ite	eq
 80059f4:	2301      	moveq	r3, #1
 80059f6:	2300      	movne	r3, #0
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	e012      	b.n	8005a22 <HAL_I2C_Init+0x18e>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1e58      	subs	r0, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6859      	ldr	r1, [r3, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	0099      	lsls	r1, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a12:	3301      	adds	r3, #1
 8005a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	bf0c      	ite	eq
 8005a1c:	2301      	moveq	r3, #1
 8005a1e:	2300      	movne	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_I2C_Init+0x196>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e022      	b.n	8005a70 <HAL_I2C_Init+0x1dc>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10e      	bne.n	8005a50 <HAL_I2C_Init+0x1bc>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1e58      	subs	r0, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6859      	ldr	r1, [r3, #4]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	440b      	add	r3, r1
 8005a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a44:	3301      	adds	r3, #1
 8005a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a4e:	e00f      	b.n	8005a70 <HAL_I2C_Init+0x1dc>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	1e58      	subs	r0, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6859      	ldr	r1, [r3, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	0099      	lsls	r1, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a66:	3301      	adds	r3, #1
 8005a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	6809      	ldr	r1, [r1, #0]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69da      	ldr	r2, [r3, #28]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6911      	ldr	r1, [r2, #16]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	68d2      	ldr	r2, [r2, #12]
 8005aaa:	4311      	orrs	r1, r2
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	430b      	orrs	r3, r1
 8005ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695a      	ldr	r2, [r3, #20]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	000186a0 	.word	0x000186a0
 8005b0c:	001e847f 	.word	0x001e847f
 8005b10:	003d08ff 	.word	0x003d08ff
 8005b14:	431bde83 	.word	0x431bde83
 8005b18:	10624dd3 	.word	0x10624dd3

08005b1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	461a      	mov	r2, r3
 8005b28:	460b      	mov	r3, r1
 8005b2a:	817b      	strh	r3, [r7, #10]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b30:	f7fe fd14 	bl	800455c <HAL_GetTick>
 8005b34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	f040 80e0 	bne.w	8005d04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	2319      	movs	r3, #25
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4970      	ldr	r1, [pc, #448]	; (8005d10 <HAL_I2C_Master_Transmit+0x1f4>)
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fc72 	bl	8006438 <I2C_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e0d3      	b.n	8005d06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_I2C_Master_Transmit+0x50>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e0cc      	b.n	8005d06 <HAL_I2C_Master_Transmit+0x1ea>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d007      	beq.n	8005b92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ba0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2221      	movs	r2, #33	; 0x21
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2210      	movs	r2, #16
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	893a      	ldrh	r2, [r7, #8]
 8005bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4a50      	ldr	r2, [pc, #320]	; (8005d14 <HAL_I2C_Master_Transmit+0x1f8>)
 8005bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bd4:	8979      	ldrh	r1, [r7, #10]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	6a3a      	ldr	r2, [r7, #32]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fac2 	bl	8006164 <I2C_MasterRequestWrite>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e08d      	b.n	8005d06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bea:	2300      	movs	r3, #0
 8005bec:	613b      	str	r3, [r7, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	613b      	str	r3, [r7, #16]
 8005bfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c00:	e066      	b.n	8005cd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	6a39      	ldr	r1, [r7, #32]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 fcec 	bl	80065e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d107      	bne.n	8005c2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e06b      	b.n	8005d06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	781a      	ldrb	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d11b      	bne.n	8005ca4 <HAL_I2C_Master_Transmit+0x188>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d017      	beq.n	8005ca4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	781a      	ldrb	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	6a39      	ldr	r1, [r7, #32]
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 fcdc 	bl	8006666 <I2C_WaitOnBTFFlagUntilTimeout>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00d      	beq.n	8005cd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d107      	bne.n	8005ccc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e01a      	b.n	8005d06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d194      	bne.n	8005c02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e000      	b.n	8005d06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d04:	2302      	movs	r3, #2
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	00100002 	.word	0x00100002
 8005d14:	ffff0000 	.word	0xffff0000

08005d18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08c      	sub	sp, #48	; 0x30
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	4608      	mov	r0, r1
 8005d22:	4611      	mov	r1, r2
 8005d24:	461a      	mov	r2, r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	817b      	strh	r3, [r7, #10]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	813b      	strh	r3, [r7, #8]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d32:	f7fe fc13 	bl	800455c <HAL_GetTick>
 8005d36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	f040 8208 	bne.w	8006156 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	2319      	movs	r3, #25
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	497b      	ldr	r1, [pc, #492]	; (8005f3c <HAL_I2C_Mem_Read+0x224>)
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fb71 	bl	8006438 <I2C_WaitOnFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e1fb      	b.n	8006158 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_I2C_Mem_Read+0x56>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e1f4      	b.n	8006158 <HAL_I2C_Mem_Read+0x440>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d007      	beq.n	8005d94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2222      	movs	r2, #34	; 0x22
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2240      	movs	r2, #64	; 0x40
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4a5b      	ldr	r2, [pc, #364]	; (8005f40 <HAL_I2C_Mem_Read+0x228>)
 8005dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dd6:	88f8      	ldrh	r0, [r7, #6]
 8005dd8:	893a      	ldrh	r2, [r7, #8]
 8005dda:	8979      	ldrh	r1, [r7, #10]
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	9301      	str	r3, [sp, #4]
 8005de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	4603      	mov	r3, r0
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fa3e 	bl	8006268 <I2C_RequestMemoryRead>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e1b0      	b.n	8006158 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d113      	bne.n	8005e26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dfe:	2300      	movs	r3, #0
 8005e00:	623b      	str	r3, [r7, #32]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	623b      	str	r3, [r7, #32]
 8005e12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	e184      	b.n	8006130 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d11b      	bne.n	8005e66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e164      	b.n	8006130 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d11b      	bne.n	8005ea6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	e144      	b.n	8006130 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	617b      	str	r3, [r7, #20]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ebc:	e138      	b.n	8006130 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	f200 80f1 	bhi.w	80060aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d123      	bne.n	8005f18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fc07 	bl	80066e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e139      	b.n	8006158 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f16:	e10b      	b.n	8006130 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d14e      	bne.n	8005fbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	2200      	movs	r2, #0
 8005f28:	4906      	ldr	r1, [pc, #24]	; (8005f44 <HAL_I2C_Mem_Read+0x22c>)
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fa84 	bl	8006438 <I2C_WaitOnFlagUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d008      	beq.n	8005f48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e10e      	b.n	8006158 <HAL_I2C_Mem_Read+0x440>
 8005f3a:	bf00      	nop
 8005f3c:	00100002 	.word	0x00100002
 8005f40:	ffff0000 	.word	0xffff0000
 8005f44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fbc:	e0b8      	b.n	8006130 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	4966      	ldr	r1, [pc, #408]	; (8006160 <HAL_I2C_Mem_Read+0x448>)
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 fa35 	bl	8006438 <I2C_WaitOnFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0bf      	b.n	8006158 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006020:	2200      	movs	r2, #0
 8006022:	494f      	ldr	r1, [pc, #316]	; (8006160 <HAL_I2C_Mem_Read+0x448>)
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 fa07 	bl	8006438 <I2C_WaitOnFlagUntilTimeout>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e091      	b.n	8006158 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006042:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	1c5a      	adds	r2, r3, #1
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060a8:	e042      	b.n	8006130 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 fb1a 	bl	80066e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e04c      	b.n	8006158 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	b2d2      	uxtb	r2, r2
 80060ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d118      	bne.n	8006130 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006134:	2b00      	cmp	r3, #0
 8006136:	f47f aec2 	bne.w	8005ebe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	e000      	b.n	8006158 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006156:	2302      	movs	r3, #2
  }
}
 8006158:	4618      	mov	r0, r3
 800615a:	3728      	adds	r7, #40	; 0x28
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	00010004 	.word	0x00010004

08006164 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	460b      	mov	r3, r1
 8006172:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d006      	beq.n	800618e <I2C_MasterRequestWrite+0x2a>
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d003      	beq.n	800618e <I2C_MasterRequestWrite+0x2a>
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800618c:	d108      	bne.n	80061a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e00b      	b.n	80061b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	2b12      	cmp	r3, #18
 80061a6:	d107      	bne.n	80061b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f937 	bl	8006438 <I2C_WaitOnFlagUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00d      	beq.n	80061ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061de:	d103      	bne.n	80061e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e035      	b.n	8006258 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061f4:	d108      	bne.n	8006208 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061f6:	897b      	ldrh	r3, [r7, #10]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006204:	611a      	str	r2, [r3, #16]
 8006206:	e01b      	b.n	8006240 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006208:	897b      	ldrh	r3, [r7, #10]
 800620a:	11db      	asrs	r3, r3, #7
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 0306 	and.w	r3, r3, #6
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f063 030f 	orn	r3, r3, #15
 8006218:	b2da      	uxtb	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	490e      	ldr	r1, [pc, #56]	; (8006260 <I2C_MasterRequestWrite+0xfc>)
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f95d 	bl	80064e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e010      	b.n	8006258 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006236:	897b      	ldrh	r3, [r7, #10]
 8006238:	b2da      	uxtb	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	4907      	ldr	r1, [pc, #28]	; (8006264 <I2C_MasterRequestWrite+0x100>)
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 f94d 	bl	80064e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	00010008 	.word	0x00010008
 8006264:	00010002 	.word	0x00010002

08006268 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	4608      	mov	r0, r1
 8006272:	4611      	mov	r1, r2
 8006274:	461a      	mov	r2, r3
 8006276:	4603      	mov	r3, r0
 8006278:	817b      	strh	r3, [r7, #10]
 800627a:	460b      	mov	r3, r1
 800627c:	813b      	strh	r3, [r7, #8]
 800627e:	4613      	mov	r3, r2
 8006280:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006290:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f8c2 	bl	8006438 <I2C_WaitOnFlagUntilTimeout>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00d      	beq.n	80062d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c8:	d103      	bne.n	80062d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e0aa      	b.n	800642c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062d6:	897b      	ldrh	r3, [r7, #10]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	461a      	mov	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	6a3a      	ldr	r2, [r7, #32]
 80062ea:	4952      	ldr	r1, [pc, #328]	; (8006434 <I2C_RequestMemoryRead+0x1cc>)
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f8fa 	bl	80064e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e097      	b.n	800642c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062fc:	2300      	movs	r3, #0
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006314:	6a39      	ldr	r1, [r7, #32]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f964 	bl	80065e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00d      	beq.n	800633e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	2b04      	cmp	r3, #4
 8006328:	d107      	bne.n	800633a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006338:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e076      	b.n	800642c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d105      	bne.n	8006350 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006344:	893b      	ldrh	r3, [r7, #8]
 8006346:	b2da      	uxtb	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	611a      	str	r2, [r3, #16]
 800634e:	e021      	b.n	8006394 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006350:	893b      	ldrh	r3, [r7, #8]
 8006352:	0a1b      	lsrs	r3, r3, #8
 8006354:	b29b      	uxth	r3, r3
 8006356:	b2da      	uxtb	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800635e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006360:	6a39      	ldr	r1, [r7, #32]
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 f93e 	bl	80065e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00d      	beq.n	800638a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	2b04      	cmp	r3, #4
 8006374:	d107      	bne.n	8006386 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006384:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e050      	b.n	800642c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800638a:	893b      	ldrh	r3, [r7, #8]
 800638c:	b2da      	uxtb	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006396:	6a39      	ldr	r1, [r7, #32]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f923 	bl	80065e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00d      	beq.n	80063c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d107      	bne.n	80063bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e035      	b.n	800642c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f82b 	bl	8006438 <I2C_WaitOnFlagUntilTimeout>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00d      	beq.n	8006404 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063f6:	d103      	bne.n	8006400 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e013      	b.n	800642c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006404:	897b      	ldrh	r3, [r7, #10]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f043 0301 	orr.w	r3, r3, #1
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	6a3a      	ldr	r2, [r7, #32]
 8006418:	4906      	ldr	r1, [pc, #24]	; (8006434 <I2C_RequestMemoryRead+0x1cc>)
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 f863 	bl	80064e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	00010002 	.word	0x00010002

08006438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	603b      	str	r3, [r7, #0]
 8006444:	4613      	mov	r3, r2
 8006446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006448:	e025      	b.n	8006496 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006450:	d021      	beq.n	8006496 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006452:	f7fe f883 	bl	800455c <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d302      	bcc.n	8006468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d116      	bne.n	8006496 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	f043 0220 	orr.w	r2, r3, #32
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e023      	b.n	80064de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b01      	cmp	r3, #1
 800649e:	d10d      	bne.n	80064bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	43da      	mvns	r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4013      	ands	r3, r2
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	bf0c      	ite	eq
 80064b2:	2301      	moveq	r3, #1
 80064b4:	2300      	movne	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	e00c      	b.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	43da      	mvns	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4013      	ands	r3, r2
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bf0c      	ite	eq
 80064ce:	2301      	moveq	r3, #1
 80064d0:	2300      	movne	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d0b6      	beq.n	800644a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	60f8      	str	r0, [r7, #12]
 80064ee:	60b9      	str	r1, [r7, #8]
 80064f0:	607a      	str	r2, [r7, #4]
 80064f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064f4:	e051      	b.n	800659a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006504:	d123      	bne.n	800654e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006514:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800651e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f043 0204 	orr.w	r2, r3, #4
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e046      	b.n	80065dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006554:	d021      	beq.n	800659a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006556:	f7fe f801 	bl	800455c <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	429a      	cmp	r2, r3
 8006564:	d302      	bcc.n	800656c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d116      	bne.n	800659a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f043 0220 	orr.w	r2, r3, #32
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e020      	b.n	80065dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	0c1b      	lsrs	r3, r3, #16
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d10c      	bne.n	80065be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	43da      	mvns	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4013      	ands	r3, r2
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bf14      	ite	ne
 80065b6:	2301      	movne	r3, #1
 80065b8:	2300      	moveq	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	e00b      	b.n	80065d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	43da      	mvns	r2, r3
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	4013      	ands	r3, r2
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bf14      	ite	ne
 80065d0:	2301      	movne	r3, #1
 80065d2:	2300      	moveq	r3, #0
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d18d      	bne.n	80064f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065f0:	e02d      	b.n	800664e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 f8ce 	bl	8006794 <I2C_IsAcknowledgeFailed>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e02d      	b.n	800665e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006608:	d021      	beq.n	800664e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800660a:	f7fd ffa7 	bl	800455c <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d116      	bne.n	800664e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f043 0220 	orr.w	r2, r3, #32
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e007      	b.n	800665e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006658:	2b80      	cmp	r3, #128	; 0x80
 800665a:	d1ca      	bne.n	80065f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006672:	e02d      	b.n	80066d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f88d 	bl	8006794 <I2C_IsAcknowledgeFailed>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e02d      	b.n	80066e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d021      	beq.n	80066d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668c:	f7fd ff66 	bl	800455c <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	429a      	cmp	r2, r3
 800669a:	d302      	bcc.n	80066a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d116      	bne.n	80066d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	f043 0220 	orr.w	r2, r3, #32
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e007      	b.n	80066e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d1ca      	bne.n	8006674 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066f4:	e042      	b.n	800677c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b10      	cmp	r3, #16
 8006702:	d119      	bne.n	8006738 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0210 	mvn.w	r2, #16
 800670c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e029      	b.n	800678c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006738:	f7fd ff10 	bl	800455c <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	429a      	cmp	r2, r3
 8006746:	d302      	bcc.n	800674e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d116      	bne.n	800677c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	f043 0220 	orr.w	r2, r3, #32
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e007      	b.n	800678c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006786:	2b40      	cmp	r3, #64	; 0x40
 8006788:	d1b5      	bne.n	80066f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067aa:	d11b      	bne.n	80067e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	f043 0204 	orr.w	r2, r3, #4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f4:	b08f      	sub	sp, #60	; 0x3c
 80067f6:	af0a      	add	r7, sp, #40	; 0x28
 80067f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e10f      	b.n	8006a24 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f009 fcba 	bl	8010198 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2203      	movs	r2, #3
 8006828:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f003 fe43 	bl	800a4ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	687e      	ldr	r6, [r7, #4]
 8006850:	466d      	mov	r5, sp
 8006852:	f106 0410 	add.w	r4, r6, #16
 8006856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800685a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800685c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800685e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006862:	e885 0003 	stmia.w	r5, {r0, r1}
 8006866:	1d33      	adds	r3, r6, #4
 8006868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800686a:	6838      	ldr	r0, [r7, #0]
 800686c:	f003 fd1a 	bl	800a2a4 <USB_CoreInit>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e0d0      	b.n	8006a24 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f003 fe31 	bl	800a4f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
 8006892:	e04a      	b.n	800692a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006894:	7bfa      	ldrb	r2, [r7, #15]
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4613      	mov	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	333d      	adds	r3, #61	; 0x3d
 80068a4:	2201      	movs	r2, #1
 80068a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80068a8:	7bfa      	ldrb	r2, [r7, #15]
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	1a9b      	subs	r3, r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	333c      	adds	r3, #60	; 0x3c
 80068b8:	7bfa      	ldrb	r2, [r7, #15]
 80068ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068bc:	7bfa      	ldrb	r2, [r7, #15]
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	b298      	uxth	r0, r3
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	1a9b      	subs	r3, r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	3342      	adds	r3, #66	; 0x42
 80068d0:	4602      	mov	r2, r0
 80068d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068d4:	7bfa      	ldrb	r2, [r7, #15]
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	1a9b      	subs	r3, r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	333f      	adds	r3, #63	; 0x3f
 80068e4:	2200      	movs	r2, #0
 80068e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068e8:	7bfa      	ldrb	r2, [r7, #15]
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	1a9b      	subs	r3, r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	3344      	adds	r3, #68	; 0x44
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068fc:	7bfa      	ldrb	r2, [r7, #15]
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	1a9b      	subs	r3, r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3348      	adds	r3, #72	; 0x48
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006910:	7bfa      	ldrb	r2, [r7, #15]
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	1a9b      	subs	r3, r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	3350      	adds	r3, #80	; 0x50
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	3301      	adds	r3, #1
 8006928:	73fb      	strb	r3, [r7, #15]
 800692a:	7bfa      	ldrb	r2, [r7, #15]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d3af      	bcc.n	8006894 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006934:	2300      	movs	r3, #0
 8006936:	73fb      	strb	r3, [r7, #15]
 8006938:	e044      	b.n	80069c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800693a:	7bfa      	ldrb	r2, [r7, #15]
 800693c:	6879      	ldr	r1, [r7, #4]
 800693e:	4613      	mov	r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	440b      	add	r3, r1
 8006948:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006950:	7bfa      	ldrb	r2, [r7, #15]
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	4613      	mov	r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006962:	7bfa      	ldrb	r2, [r7, #15]
 8006964:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006966:	7bfa      	ldrb	r2, [r7, #15]
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	4613      	mov	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	440b      	add	r3, r1
 8006974:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800697c:	7bfa      	ldrb	r2, [r7, #15]
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	4613      	mov	r3, r2
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	440b      	add	r3, r1
 800698a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006992:	7bfa      	ldrb	r2, [r7, #15]
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	1a9b      	subs	r3, r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80069a8:	7bfa      	ldrb	r2, [r7, #15]
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	4613      	mov	r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	1a9b      	subs	r3, r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	3301      	adds	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
 80069c4:	7bfa      	ldrb	r2, [r7, #15]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d3b5      	bcc.n	800693a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	687e      	ldr	r6, [r7, #4]
 80069d6:	466d      	mov	r5, sp
 80069d8:	f106 0410 	add.w	r4, r6, #16
 80069dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80069ec:	1d33      	adds	r3, r6, #4
 80069ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069f0:	6838      	ldr	r0, [r7, #0]
 80069f2:	f003 fda7 	bl	800a544 <USB_DevInit>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e00d      	b.n	8006a24 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f004 fdef 	bl	800b600 <USB_DevDisconnect>

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_PCD_Start+0x1c>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e020      	b.n	8006a8a <HAL_PCD_Start+0x5e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d109      	bne.n	8006a6c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d005      	beq.n	8006a6c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f003 fd1b 	bl	800a4ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f004 fd9f 	bl	800b5be <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a92:	b590      	push	{r4, r7, lr}
 8006a94:	b08d      	sub	sp, #52	; 0x34
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f004 fe5d 	bl	800b768 <USB_GetMode>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f040 839d 	bne.w	80071f0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f004 fdc1 	bl	800b642 <USB_ReadInterrupts>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 8393 	beq.w	80071ee <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f004 fdb8 	bl	800b642 <USB_ReadInterrupts>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d107      	bne.n	8006aec <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f002 0202 	and.w	r2, r2, #2
 8006aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f004 fda6 	bl	800b642 <USB_ReadInterrupts>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b10      	cmp	r3, #16
 8006afe:	d161      	bne.n	8006bc4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0210 	bic.w	r2, r2, #16
 8006b0e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	0c5b      	lsrs	r3, r3, #17
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d124      	bne.n	8006b86 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d035      	beq.n	8006bb4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	091b      	lsrs	r3, r3, #4
 8006b50:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6a38      	ldr	r0, [r7, #32]
 8006b5c:	f004 fc0c 	bl	800b378 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	091b      	lsrs	r3, r3, #4
 8006b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b6c:	441a      	add	r2, r3
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	091b      	lsrs	r3, r3, #4
 8006b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b7e:	441a      	add	r2, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	619a      	str	r2, [r3, #24]
 8006b84:	e016      	b.n	8006bb4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	0c5b      	lsrs	r3, r3, #17
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	2b06      	cmp	r3, #6
 8006b90:	d110      	bne.n	8006bb4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b98:	2208      	movs	r2, #8
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6a38      	ldr	r0, [r7, #32]
 8006b9e:	f004 fbeb 	bl	800b378 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	699a      	ldr	r2, [r3, #24]
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	091b      	lsrs	r3, r3, #4
 8006baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bae:	441a      	add	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0210 	orr.w	r2, r2, #16
 8006bc2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f004 fd3a 	bl	800b642 <USB_ReadInterrupts>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bd8:	d16e      	bne.n	8006cb8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f004 fd40 	bl	800b668 <USB_ReadDevAllOutEpInterrupt>
 8006be8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006bea:	e062      	b.n	8006cb2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d057      	beq.n	8006ca6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	4611      	mov	r1, r2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f004 fd65 	bl	800b6d0 <USB_ReadDevOutEPInterrupt>
 8006c06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00c      	beq.n	8006c2c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1e:	461a      	mov	r2, r3
 8006c20:	2301      	movs	r3, #1
 8006c22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fdb0 	bl	800778c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00c      	beq.n	8006c50 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c42:	461a      	mov	r2, r3
 8006c44:	2308      	movs	r3, #8
 8006c46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 feaa 	bl	80079a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f003 0310 	and.w	r3, r3, #16
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d008      	beq.n	8006c6c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	461a      	mov	r2, r3
 8006c68:	2310      	movs	r3, #16
 8006c6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d008      	beq.n	8006c88 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c82:	461a      	mov	r2, r3
 8006c84:	2320      	movs	r3, #32
 8006c86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ca4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	3301      	adds	r3, #1
 8006caa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d199      	bne.n	8006bec <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f004 fcc0 	bl	800b642 <USB_ReadInterrupts>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ccc:	f040 80c0 	bne.w	8006e50 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f004 fce1 	bl	800b69c <USB_ReadDevAllInEpInterrupt>
 8006cda:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006ce0:	e0b2      	b.n	8006e48 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 80a7 	beq.w	8006e3c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f004 fd07 	bl	800b70c <USB_ReadDevInEPInterrupt>
 8006cfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d057      	beq.n	8006dba <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	f003 030f 	and.w	r3, r3, #15
 8006d10:	2201      	movs	r2, #1
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	43db      	mvns	r3, r3
 8006d24:	69f9      	ldr	r1, [r7, #28]
 8006d26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d132      	bne.n	8006dae <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	3348      	adds	r3, #72	; 0x48
 8006d58:	6819      	ldr	r1, [r3, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5e:	4613      	mov	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4403      	add	r3, r0
 8006d68:	3344      	adds	r3, #68	; 0x44
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4419      	add	r1, r3
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d72:	4613      	mov	r3, r2
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	1a9b      	subs	r3, r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4403      	add	r3, r0
 8006d7c:	3348      	adds	r3, #72	; 0x48
 8006d7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d113      	bne.n	8006dae <HAL_PCD_IRQHandler+0x31c>
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	3350      	adds	r3, #80	; 0x50
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d108      	bne.n	8006dae <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006da6:	461a      	mov	r2, r3
 8006da8:	2101      	movs	r1, #1
 8006daa:	f004 fd0f 	bl	800b7cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f009 fa7e 	bl	80102b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d008      	beq.n	8006dd6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2308      	movs	r3, #8
 8006dd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f003 0310 	and.w	r3, r3, #16
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d008      	beq.n	8006df2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dec:	461a      	mov	r2, r3
 8006dee:	2310      	movs	r3, #16
 8006df0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d008      	beq.n	8006e0e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e08:	461a      	mov	r2, r3
 8006e0a:	2340      	movs	r3, #64	; 0x40
 8006e0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d008      	beq.n	8006e2a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e24:	461a      	mov	r2, r3
 8006e26:	2302      	movs	r3, #2
 8006e28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fc1b 	bl	8007672 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	3301      	adds	r3, #1
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	085b      	lsrs	r3, r3, #1
 8006e46:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f47f af49 	bne.w	8006ce2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f004 fbf4 	bl	800b642 <USB_ReadInterrupts>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e64:	d122      	bne.n	8006eac <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d108      	bne.n	8006e96 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fe26 	bl	8007ae0 <HAL_PCDEx_LPM_Callback>
 8006e94:	e002      	b.n	8006e9c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f009 fa84 	bl	80103a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695a      	ldr	r2, [r3, #20]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f004 fbc6 	bl	800b642 <USB_ReadInterrupts>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ec0:	d112      	bne.n	8006ee8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d102      	bne.n	8006ed8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f009 fa40 	bl	8010358 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695a      	ldr	r2, [r3, #20]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006ee6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f004 fba8 	bl	800b642 <USB_ReadInterrupts>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efc:	f040 80c7 	bne.w	800708e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f0e:	f023 0301 	bic.w	r3, r3, #1
 8006f12:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2110      	movs	r1, #16
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f003 fc76 	bl	800a80c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f20:	2300      	movs	r3, #0
 8006f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f24:	e056      	b.n	8006fd4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f32:	461a      	mov	r2, r3
 8006f34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f38:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f58:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f6a:	0151      	lsls	r1, r2, #5
 8006f6c:	69fa      	ldr	r2, [r7, #28]
 8006f6e:	440a      	add	r2, r1
 8006f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	461a      	mov	r2, r3
 8006f88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f8c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	69fa      	ldr	r2, [r7, #28]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	69fa      	ldr	r2, [r7, #28]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fcc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d3a3      	bcc.n	8006f26 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006ff0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d016      	beq.n	8007028 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800700a:	f043 030b 	orr.w	r3, r3, #11
 800700e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701a:	69fa      	ldr	r2, [r7, #28]
 800701c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007020:	f043 030b 	orr.w	r3, r3, #11
 8007024:	6453      	str	r3, [r2, #68]	; 0x44
 8007026:	e015      	b.n	8007054 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007036:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800703a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800703e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	69fa      	ldr	r2, [r7, #28]
 800704a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800704e:	f043 030b 	orr.w	r3, r3, #11
 8007052:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007062:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007066:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6818      	ldr	r0, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007078:	461a      	mov	r2, r3
 800707a:	f004 fba7 	bl	800b7cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695a      	ldr	r2, [r3, #20]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800708c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f004 fad5 	bl	800b642 <USB_ReadInterrupts>
 8007098:	4603      	mov	r3, r0
 800709a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800709e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a2:	d124      	bne.n	80070ee <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f004 fb6b 	bl	800b784 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f003 fc0b 	bl	800a8ce <USB_GetDevSpeed>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681c      	ldr	r4, [r3, #0]
 80070c4:	f001 f958 	bl	8008378 <HAL_RCC_GetHCLKFreq>
 80070c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	461a      	mov	r2, r3
 80070d2:	4620      	mov	r0, r4
 80070d4:	f003 f948 	bl	800a368 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f009 f914 	bl	8010306 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695a      	ldr	r2, [r3, #20]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80070ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f004 faa5 	bl	800b642 <USB_ReadInterrupts>
 80070f8:	4603      	mov	r3, r0
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b08      	cmp	r3, #8
 8007100:	d10a      	bne.n	8007118 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f009 f8f1 	bl	80102ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695a      	ldr	r2, [r3, #20]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f002 0208 	and.w	r2, r2, #8
 8007116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f004 fa90 	bl	800b642 <USB_ReadInterrupts>
 8007122:	4603      	mov	r3, r0
 8007124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800712c:	d10f      	bne.n	800714e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	b2db      	uxtb	r3, r3
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f009 f953 	bl	80103e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695a      	ldr	r2, [r3, #20]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800714c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f004 fa75 	bl	800b642 <USB_ReadInterrupts>
 8007158:	4603      	mov	r3, r0
 800715a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800715e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007162:	d10f      	bne.n	8007184 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	b2db      	uxtb	r3, r3
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f009 f926 	bl	80103c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695a      	ldr	r2, [r3, #20]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f004 fa5a 	bl	800b642 <USB_ReadInterrupts>
 800718e:	4603      	mov	r3, r0
 8007190:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007198:	d10a      	bne.n	80071b0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f009 f934 	bl	8010408 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695a      	ldr	r2, [r3, #20]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80071ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f004 fa44 	bl	800b642 <USB_ReadInterrupts>
 80071ba:	4603      	mov	r3, r0
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b04      	cmp	r3, #4
 80071c2:	d115      	bne.n	80071f0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f009 f924 	bl	8010424 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6859      	ldr	r1, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	605a      	str	r2, [r3, #4]
 80071ec:	e000      	b.n	80071f0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80071ee:	bf00      	nop
    }
  }
}
 80071f0:	3734      	adds	r7, #52	; 0x34
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd90      	pop	{r4, r7, pc}

080071f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_PCD_SetAddress+0x1a>
 800720c:	2302      	movs	r3, #2
 800720e:	e013      	b.n	8007238 <HAL_PCD_SetAddress+0x42>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	78fa      	ldrb	r2, [r7, #3]
 800721c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	78fa      	ldrb	r2, [r7, #3]
 8007226:	4611      	mov	r1, r2
 8007228:	4618      	mov	r0, r3
 800722a:	f004 f9a2 	bl	800b572 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	4603      	mov	r3, r0
 8007250:	70fb      	strb	r3, [r7, #3]
 8007252:	460b      	mov	r3, r1
 8007254:	803b      	strh	r3, [r7, #0]
 8007256:	4613      	mov	r3, r2
 8007258:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800725e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007262:	2b00      	cmp	r3, #0
 8007264:	da0f      	bge.n	8007286 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	f003 020f 	and.w	r2, r3, #15
 800726c:	4613      	mov	r3, r2
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	1a9b      	subs	r3, r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	3338      	adds	r3, #56	; 0x38
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	4413      	add	r3, r2
 800727a:	3304      	adds	r3, #4
 800727c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	705a      	strb	r2, [r3, #1]
 8007284:	e00f      	b.n	80072a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007286:	78fb      	ldrb	r3, [r7, #3]
 8007288:	f003 020f 	and.w	r2, r3, #15
 800728c:	4613      	mov	r3, r2
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	1a9b      	subs	r3, r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	4413      	add	r3, r2
 800729c:	3304      	adds	r3, #4
 800729e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	f003 030f 	and.w	r3, r3, #15
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80072b2:	883a      	ldrh	r2, [r7, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	78ba      	ldrb	r2, [r7, #2]
 80072bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	785b      	ldrb	r3, [r3, #1]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d004      	beq.n	80072d0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80072d0:	78bb      	ldrb	r3, [r7, #2]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d102      	bne.n	80072dc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d101      	bne.n	80072ea <HAL_PCD_EP_Open+0xaa>
 80072e6:	2302      	movs	r3, #2
 80072e8:	e00e      	b.n	8007308 <HAL_PCD_EP_Open+0xc8>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68f9      	ldr	r1, [r7, #12]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f003 fb0d 	bl	800a918 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007306:	7afb      	ldrb	r3, [r7, #11]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800731c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007320:	2b00      	cmp	r3, #0
 8007322:	da0f      	bge.n	8007344 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	f003 020f 	and.w	r2, r3, #15
 800732a:	4613      	mov	r3, r2
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	1a9b      	subs	r3, r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	3338      	adds	r3, #56	; 0x38
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	4413      	add	r3, r2
 8007338:	3304      	adds	r3, #4
 800733a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2201      	movs	r2, #1
 8007340:	705a      	strb	r2, [r3, #1]
 8007342:	e00f      	b.n	8007364 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	f003 020f 	and.w	r2, r3, #15
 800734a:	4613      	mov	r3, r2
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	1a9b      	subs	r3, r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	4413      	add	r3, r2
 800735a:	3304      	adds	r3, #4
 800735c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	b2da      	uxtb	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_PCD_EP_Close+0x6e>
 800737a:	2302      	movs	r3, #2
 800737c:	e00e      	b.n	800739c <HAL_PCD_EP_Close+0x8c>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	4618      	mov	r0, r3
 800738e:	f003 fb4b 	bl	800aa28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	607a      	str	r2, [r7, #4]
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	460b      	mov	r3, r1
 80073b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	f003 020f 	and.w	r2, r3, #15
 80073ba:	4613      	mov	r3, r2
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4413      	add	r3, r2
 80073ca:	3304      	adds	r3, #4
 80073cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2200      	movs	r2, #0
 80073de:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2200      	movs	r2, #0
 80073e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	f003 030f 	and.w	r3, r3, #15
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d102      	bne.n	8007400 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007400:	7afb      	ldrb	r3, [r7, #11]
 8007402:	f003 030f 	and.w	r3, r3, #15
 8007406:	2b00      	cmp	r3, #0
 8007408:	d109      	bne.n	800741e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	461a      	mov	r2, r3
 8007416:	6979      	ldr	r1, [r7, #20]
 8007418:	f003 fe26 	bl	800b068 <USB_EP0StartXfer>
 800741c:	e008      	b.n	8007430 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	b2db      	uxtb	r3, r3
 8007428:	461a      	mov	r2, r3
 800742a:	6979      	ldr	r1, [r7, #20]
 800742c:	f003 fbd8 	bl	800abe0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	460b      	mov	r3, r1
 8007444:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007446:	78fb      	ldrb	r3, [r7, #3]
 8007448:	f003 020f 	and.w	r2, r3, #15
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	4613      	mov	r3, r2
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	440b      	add	r3, r1
 8007458:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800745c:	681b      	ldr	r3, [r3, #0]
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b086      	sub	sp, #24
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
 8007476:	460b      	mov	r3, r1
 8007478:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	f003 020f 	and.w	r2, r3, #15
 8007480:	4613      	mov	r3, r2
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	3338      	adds	r3, #56	; 0x38
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	3304      	adds	r3, #4
 8007490:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2200      	movs	r2, #0
 80074a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2201      	movs	r2, #1
 80074a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074aa:	7afb      	ldrb	r3, [r7, #11]
 80074ac:	f003 030f 	and.w	r3, r3, #15
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d102      	bne.n	80074c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d109      	bne.n	80074e2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6818      	ldr	r0, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	6979      	ldr	r1, [r7, #20]
 80074dc:	f003 fdc4 	bl	800b068 <USB_EP0StartXfer>
 80074e0:	e008      	b.n	80074f4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	6979      	ldr	r1, [r7, #20]
 80074f0:	f003 fb76 	bl	800abe0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	f003 020f 	and.w	r2, r3, #15
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	429a      	cmp	r2, r3
 8007516:	d901      	bls.n	800751c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e050      	b.n	80075be <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800751c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007520:	2b00      	cmp	r3, #0
 8007522:	da0f      	bge.n	8007544 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	f003 020f 	and.w	r2, r3, #15
 800752a:	4613      	mov	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	1a9b      	subs	r3, r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	3338      	adds	r3, #56	; 0x38
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	4413      	add	r3, r2
 8007538:	3304      	adds	r3, #4
 800753a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	705a      	strb	r2, [r3, #1]
 8007542:	e00d      	b.n	8007560 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	4613      	mov	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	4413      	add	r3, r2
 8007556:	3304      	adds	r3, #4
 8007558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007566:	78fb      	ldrb	r3, [r7, #3]
 8007568:	f003 030f 	and.w	r3, r3, #15
 800756c:	b2da      	uxtb	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_PCD_EP_SetStall+0x82>
 800757c:	2302      	movs	r3, #2
 800757e:	e01e      	b.n	80075be <HAL_PCD_EP_SetStall+0xc0>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68f9      	ldr	r1, [r7, #12]
 800758e:	4618      	mov	r0, r3
 8007590:	f003 ff1b 	bl	800b3ca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	b2d9      	uxtb	r1, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075ae:	461a      	mov	r2, r3
 80075b0:	f004 f90c 	bl	800b7cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b084      	sub	sp, #16
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	f003 020f 	and.w	r2, r3, #15
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d901      	bls.n	80075e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e042      	b.n	800766a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80075e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	da0f      	bge.n	800760c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	f003 020f 	and.w	r2, r3, #15
 80075f2:	4613      	mov	r3, r2
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	1a9b      	subs	r3, r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	3338      	adds	r3, #56	; 0x38
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4413      	add	r3, r2
 8007600:	3304      	adds	r3, #4
 8007602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2201      	movs	r2, #1
 8007608:	705a      	strb	r2, [r3, #1]
 800760a:	e00f      	b.n	800762c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800760c:	78fb      	ldrb	r3, [r7, #3]
 800760e:	f003 020f 	and.w	r2, r3, #15
 8007612:	4613      	mov	r3, r2
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	1a9b      	subs	r3, r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	4413      	add	r3, r2
 8007622:	3304      	adds	r3, #4
 8007624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007632:	78fb      	ldrb	r3, [r7, #3]
 8007634:	f003 030f 	and.w	r3, r3, #15
 8007638:	b2da      	uxtb	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_PCD_EP_ClrStall+0x86>
 8007648:	2302      	movs	r3, #2
 800764a:	e00e      	b.n	800766a <HAL_PCD_EP_ClrStall+0xa4>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68f9      	ldr	r1, [r7, #12]
 800765a:	4618      	mov	r0, r3
 800765c:	f003 ff23 	bl	800b4a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b08a      	sub	sp, #40	; 0x28
 8007676:	af02      	add	r7, sp, #8
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	4613      	mov	r3, r2
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	1a9b      	subs	r3, r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	3338      	adds	r3, #56	; 0x38
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	4413      	add	r3, r2
 8007696:	3304      	adds	r3, #4
 8007698:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d901      	bls.n	80076aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e06c      	b.n	8007784 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	695a      	ldr	r2, [r3, #20]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d902      	bls.n	80076c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	3303      	adds	r3, #3
 80076ca:	089b      	lsrs	r3, r3, #2
 80076cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076ce:	e02b      	b.n	8007728 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	695a      	ldr	r2, [r3, #20]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d902      	bls.n	80076ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	3303      	adds	r3, #3
 80076f0:	089b      	lsrs	r3, r3, #2
 80076f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	68d9      	ldr	r1, [r3, #12]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007704:	b2db      	uxtb	r3, r3
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	4603      	mov	r3, r0
 800770a:	6978      	ldr	r0, [r7, #20]
 800770c:	f003 fdff 	bl	800b30e <USB_WritePacket>

    ep->xfer_buff  += len;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	441a      	add	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	699a      	ldr	r2, [r3, #24]
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	441a      	add	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	b29b      	uxth	r3, r3
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	429a      	cmp	r2, r3
 800773c:	d809      	bhi.n	8007752 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	699a      	ldr	r2, [r3, #24]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007746:	429a      	cmp	r2, r3
 8007748:	d203      	bcs.n	8007752 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1be      	bne.n	80076d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	695a      	ldr	r2, [r3, #20]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	429a      	cmp	r2, r3
 800775c:	d811      	bhi.n	8007782 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	f003 030f 	and.w	r3, r3, #15
 8007764:	2201      	movs	r2, #1
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	43db      	mvns	r3, r3
 8007778:	6939      	ldr	r1, [r7, #16]
 800777a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800777e:	4013      	ands	r3, r2
 8007780:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3720      	adds	r7, #32
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	333c      	adds	r3, #60	; 0x3c
 80077a4:	3304      	adds	r3, #4
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	f040 80a0 	bne.w	8007904 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d015      	beq.n	80077fa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	4a72      	ldr	r2, [pc, #456]	; (800799c <PCD_EP_OutXfrComplete_int+0x210>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	f240 80dd 	bls.w	8007992 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 80d7 	beq.w	8007992 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f0:	461a      	mov	r2, r3
 80077f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077f6:	6093      	str	r3, [r2, #8]
 80077f8:	e0cb      	b.n	8007992 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f003 0320 	and.w	r3, r3, #32
 8007800:	2b00      	cmp	r3, #0
 8007802:	d009      	beq.n	8007818 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007810:	461a      	mov	r2, r3
 8007812:	2320      	movs	r3, #32
 8007814:	6093      	str	r3, [r2, #8]
 8007816:	e0bc      	b.n	8007992 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800781e:	2b00      	cmp	r3, #0
 8007820:	f040 80b7 	bne.w	8007992 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4a5d      	ldr	r2, [pc, #372]	; (800799c <PCD_EP_OutXfrComplete_int+0x210>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d90f      	bls.n	800784c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	4413      	add	r3, r2
 800783e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007842:	461a      	mov	r2, r3
 8007844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007848:	6093      	str	r3, [r2, #8]
 800784a:	e0a2      	b.n	8007992 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	4613      	mov	r3, r2
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	1a9b      	subs	r3, r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	440b      	add	r3, r1
 800785a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800785e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	0159      	lsls	r1, r3, #5
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	440b      	add	r3, r1
 8007868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007872:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	4613      	mov	r3, r2
 800787a:	00db      	lsls	r3, r3, #3
 800787c:	1a9b      	subs	r3, r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4403      	add	r3, r0
 8007882:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007886:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007888:	6879      	ldr	r1, [r7, #4]
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	4613      	mov	r3, r2
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	1a9b      	subs	r3, r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	440b      	add	r3, r1
 8007896:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800789a:	6819      	ldr	r1, [r3, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	4613      	mov	r3, r2
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4403      	add	r3, r0
 80078aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4419      	add	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	4613      	mov	r3, r2
 80078b8:	00db      	lsls	r3, r3, #3
 80078ba:	1a9b      	subs	r3, r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4403      	add	r3, r0
 80078c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80078c4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d114      	bne.n	80078f6 <PCD_EP_OutXfrComplete_int+0x16a>
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	4613      	mov	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	1a9b      	subs	r3, r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	440b      	add	r3, r1
 80078da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d108      	bne.n	80078f6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6818      	ldr	r0, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078ee:	461a      	mov	r2, r3
 80078f0:	2101      	movs	r1, #1
 80078f2:	f003 ff6b 	bl	800b7cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f008 fcbf 	bl	8010280 <HAL_PCD_DataOutStageCallback>
 8007902:	e046      	b.n	8007992 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4a26      	ldr	r2, [pc, #152]	; (80079a0 <PCD_EP_OutXfrComplete_int+0x214>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d124      	bne.n	8007956 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	4413      	add	r3, r2
 800791e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007922:	461a      	mov	r2, r3
 8007924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007928:	6093      	str	r3, [r2, #8]
 800792a:	e032      	b.n	8007992 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b00      	cmp	r3, #0
 8007934:	d008      	beq.n	8007948 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	461a      	mov	r2, r3
 8007944:	2320      	movs	r3, #32
 8007946:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f008 fc96 	bl	8010280 <HAL_PCD_DataOutStageCallback>
 8007954:	e01d      	b.n	8007992 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d114      	bne.n	8007986 <PCD_EP_OutXfrComplete_int+0x1fa>
 800795c:	6879      	ldr	r1, [r7, #4]
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	4613      	mov	r3, r2
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	440b      	add	r3, r1
 800796a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d108      	bne.n	8007986 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6818      	ldr	r0, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800797e:	461a      	mov	r2, r3
 8007980:	2100      	movs	r1, #0
 8007982:	f003 ff23 	bl	800b7cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f008 fc77 	bl	8010280 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	4f54300a 	.word	0x4f54300a
 80079a0:	4f54310a 	.word	0x4f54310a

080079a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	333c      	adds	r3, #60	; 0x3c
 80079bc:	3304      	adds	r3, #4
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4a15      	ldr	r2, [pc, #84]	; (8007a2c <PCD_EP_OutSetupPacket_int+0x88>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d90e      	bls.n	80079f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f0:	461a      	mov	r2, r3
 80079f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f008 fc2f 	bl	801025c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4a0a      	ldr	r2, [pc, #40]	; (8007a2c <PCD_EP_OutSetupPacket_int+0x88>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d90c      	bls.n	8007a20 <PCD_EP_OutSetupPacket_int+0x7c>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d108      	bne.n	8007a20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a18:	461a      	mov	r2, r3
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	f003 fed6 	bl	800b7cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	4f54300a 	.word	0x4f54300a

08007a30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d107      	bne.n	8007a5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007a4e:	883b      	ldrh	r3, [r7, #0]
 8007a50:	0419      	lsls	r1, r3, #16
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8007a5c:	e028      	b.n	8007ab0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	0c1b      	lsrs	r3, r3, #16
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	4413      	add	r3, r2
 8007a6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]
 8007a70:	e00d      	b.n	8007a8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	3340      	adds	r3, #64	; 0x40
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	0c1b      	lsrs	r3, r3, #16
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	4413      	add	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	73fb      	strb	r3, [r7, #15]
 8007a8e:	7bfa      	ldrb	r2, [r7, #15]
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d3ec      	bcc.n	8007a72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007a98:	883b      	ldrh	r3, [r7, #0]
 8007a9a:	0418      	lsls	r0, r3, #16
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6819      	ldr	r1, [r3, #0]
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	4302      	orrs	r2, r0
 8007aa8:	3340      	adds	r3, #64	; 0x40
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	440b      	add	r3, r1
 8007aae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	887a      	ldrh	r2, [r7, #2]
 8007ad0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e264      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d075      	beq.n	8007c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b16:	4ba3      	ldr	r3, [pc, #652]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f003 030c 	and.w	r3, r3, #12
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d00c      	beq.n	8007b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b22:	4ba0      	ldr	r3, [pc, #640]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b2a:	2b08      	cmp	r3, #8
 8007b2c:	d112      	bne.n	8007b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b2e:	4b9d      	ldr	r3, [pc, #628]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b3a:	d10b      	bne.n	8007b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b3c:	4b99      	ldr	r3, [pc, #612]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d05b      	beq.n	8007c00 <HAL_RCC_OscConfig+0x108>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d157      	bne.n	8007c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e23f      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5c:	d106      	bne.n	8007b6c <HAL_RCC_OscConfig+0x74>
 8007b5e:	4b91      	ldr	r3, [pc, #580]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a90      	ldr	r2, [pc, #576]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	e01d      	b.n	8007ba8 <HAL_RCC_OscConfig+0xb0>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b74:	d10c      	bne.n	8007b90 <HAL_RCC_OscConfig+0x98>
 8007b76:	4b8b      	ldr	r3, [pc, #556]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a8a      	ldr	r2, [pc, #552]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	4b88      	ldr	r3, [pc, #544]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a87      	ldr	r2, [pc, #540]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	e00b      	b.n	8007ba8 <HAL_RCC_OscConfig+0xb0>
 8007b90:	4b84      	ldr	r3, [pc, #528]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a83      	ldr	r2, [pc, #524]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	4b81      	ldr	r3, [pc, #516]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a80      	ldr	r2, [pc, #512]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d013      	beq.n	8007bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bb0:	f7fc fcd4 	bl	800455c <HAL_GetTick>
 8007bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007bb8:	f7fc fcd0 	bl	800455c <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b64      	cmp	r3, #100	; 0x64
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e204      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bca:	4b76      	ldr	r3, [pc, #472]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f0      	beq.n	8007bb8 <HAL_RCC_OscConfig+0xc0>
 8007bd6:	e014      	b.n	8007c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd8:	f7fc fcc0 	bl	800455c <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007be0:	f7fc fcbc 	bl	800455c <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b64      	cmp	r3, #100	; 0x64
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e1f0      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bf2:	4b6c      	ldr	r3, [pc, #432]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f0      	bne.n	8007be0 <HAL_RCC_OscConfig+0xe8>
 8007bfe:	e000      	b.n	8007c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d063      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c0e:	4b65      	ldr	r3, [pc, #404]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 030c 	and.w	r3, r3, #12
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00b      	beq.n	8007c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c1a:	4b62      	ldr	r3, [pc, #392]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c22:	2b08      	cmp	r3, #8
 8007c24:	d11c      	bne.n	8007c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c26:	4b5f      	ldr	r3, [pc, #380]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d116      	bne.n	8007c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c32:	4b5c      	ldr	r3, [pc, #368]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d005      	beq.n	8007c4a <HAL_RCC_OscConfig+0x152>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d001      	beq.n	8007c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e1c4      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c4a:	4b56      	ldr	r3, [pc, #344]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	4952      	ldr	r1, [pc, #328]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c5e:	e03a      	b.n	8007cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d020      	beq.n	8007caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c68:	4b4f      	ldr	r3, [pc, #316]	; (8007da8 <HAL_RCC_OscConfig+0x2b0>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c6e:	f7fc fc75 	bl	800455c <HAL_GetTick>
 8007c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c74:	e008      	b.n	8007c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c76:	f7fc fc71 	bl	800455c <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e1a5      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c88:	4b46      	ldr	r3, [pc, #280]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0f0      	beq.n	8007c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c94:	4b43      	ldr	r3, [pc, #268]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	4940      	ldr	r1, [pc, #256]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	600b      	str	r3, [r1, #0]
 8007ca8:	e015      	b.n	8007cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007caa:	4b3f      	ldr	r3, [pc, #252]	; (8007da8 <HAL_RCC_OscConfig+0x2b0>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb0:	f7fc fc54 	bl	800455c <HAL_GetTick>
 8007cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cb6:	e008      	b.n	8007cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cb8:	f7fc fc50 	bl	800455c <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e184      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cca:	4b36      	ldr	r3, [pc, #216]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f0      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d030      	beq.n	8007d44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d016      	beq.n	8007d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cea:	4b30      	ldr	r3, [pc, #192]	; (8007dac <HAL_RCC_OscConfig+0x2b4>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf0:	f7fc fc34 	bl	800455c <HAL_GetTick>
 8007cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cf8:	f7fc fc30 	bl	800455c <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e164      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d0a:	4b26      	ldr	r3, [pc, #152]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f0      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x200>
 8007d16:	e015      	b.n	8007d44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d18:	4b24      	ldr	r3, [pc, #144]	; (8007dac <HAL_RCC_OscConfig+0x2b4>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d1e:	f7fc fc1d 	bl	800455c <HAL_GetTick>
 8007d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d24:	e008      	b.n	8007d38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d26:	f7fc fc19 	bl	800455c <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d901      	bls.n	8007d38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e14d      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d38:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1f0      	bne.n	8007d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 80a0 	beq.w	8007e92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d52:	2300      	movs	r3, #0
 8007d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d56:	4b13      	ldr	r3, [pc, #76]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10f      	bne.n	8007d82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d62:	2300      	movs	r3, #0
 8007d64:	60bb      	str	r3, [r7, #8]
 8007d66:	4b0f      	ldr	r3, [pc, #60]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6a:	4a0e      	ldr	r2, [pc, #56]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d70:	6413      	str	r3, [r2, #64]	; 0x40
 8007d72:	4b0c      	ldr	r3, [pc, #48]	; (8007da4 <HAL_RCC_OscConfig+0x2ac>)
 8007d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d7a:	60bb      	str	r3, [r7, #8]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d82:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <HAL_RCC_OscConfig+0x2b8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d121      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d8e:	4b08      	ldr	r3, [pc, #32]	; (8007db0 <HAL_RCC_OscConfig+0x2b8>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a07      	ldr	r2, [pc, #28]	; (8007db0 <HAL_RCC_OscConfig+0x2b8>)
 8007d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d9a:	f7fc fbdf 	bl	800455c <HAL_GetTick>
 8007d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da0:	e011      	b.n	8007dc6 <HAL_RCC_OscConfig+0x2ce>
 8007da2:	bf00      	nop
 8007da4:	40023800 	.word	0x40023800
 8007da8:	42470000 	.word	0x42470000
 8007dac:	42470e80 	.word	0x42470e80
 8007db0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007db4:	f7fc fbd2 	bl	800455c <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e106      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dc6:	4b85      	ldr	r3, [pc, #532]	; (8007fdc <HAL_RCC_OscConfig+0x4e4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0f0      	beq.n	8007db4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d106      	bne.n	8007de8 <HAL_RCC_OscConfig+0x2f0>
 8007dda:	4b81      	ldr	r3, [pc, #516]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	4a80      	ldr	r2, [pc, #512]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007de0:	f043 0301 	orr.w	r3, r3, #1
 8007de4:	6713      	str	r3, [r2, #112]	; 0x70
 8007de6:	e01c      	b.n	8007e22 <HAL_RCC_OscConfig+0x32a>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	2b05      	cmp	r3, #5
 8007dee:	d10c      	bne.n	8007e0a <HAL_RCC_OscConfig+0x312>
 8007df0:	4b7b      	ldr	r3, [pc, #492]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df4:	4a7a      	ldr	r2, [pc, #488]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007df6:	f043 0304 	orr.w	r3, r3, #4
 8007dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8007dfc:	4b78      	ldr	r3, [pc, #480]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e00:	4a77      	ldr	r2, [pc, #476]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007e02:	f043 0301 	orr.w	r3, r3, #1
 8007e06:	6713      	str	r3, [r2, #112]	; 0x70
 8007e08:	e00b      	b.n	8007e22 <HAL_RCC_OscConfig+0x32a>
 8007e0a:	4b75      	ldr	r3, [pc, #468]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0e:	4a74      	ldr	r2, [pc, #464]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	6713      	str	r3, [r2, #112]	; 0x70
 8007e16:	4b72      	ldr	r3, [pc, #456]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1a:	4a71      	ldr	r2, [pc, #452]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007e1c:	f023 0304 	bic.w	r3, r3, #4
 8007e20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d015      	beq.n	8007e56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e2a:	f7fc fb97 	bl	800455c <HAL_GetTick>
 8007e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e30:	e00a      	b.n	8007e48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e32:	f7fc fb93 	bl	800455c <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d901      	bls.n	8007e48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e0c5      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e48:	4b65      	ldr	r3, [pc, #404]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0ee      	beq.n	8007e32 <HAL_RCC_OscConfig+0x33a>
 8007e54:	e014      	b.n	8007e80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e56:	f7fc fb81 	bl	800455c <HAL_GetTick>
 8007e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e5c:	e00a      	b.n	8007e74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e5e:	f7fc fb7d 	bl	800455c <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e0af      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e74:	4b5a      	ldr	r3, [pc, #360]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1ee      	bne.n	8007e5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d105      	bne.n	8007e92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e86:	4b56      	ldr	r3, [pc, #344]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	4a55      	ldr	r2, [pc, #340]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 809b 	beq.w	8007fd2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e9c:	4b50      	ldr	r3, [pc, #320]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f003 030c 	and.w	r3, r3, #12
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d05c      	beq.n	8007f62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d141      	bne.n	8007f34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007eb0:	4b4c      	ldr	r3, [pc, #304]	; (8007fe4 <HAL_RCC_OscConfig+0x4ec>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eb6:	f7fc fb51 	bl	800455c <HAL_GetTick>
 8007eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ebc:	e008      	b.n	8007ed0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ebe:	f7fc fb4d 	bl	800455c <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d901      	bls.n	8007ed0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e081      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ed0:	4b43      	ldr	r3, [pc, #268]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f0      	bne.n	8007ebe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a1b      	ldr	r3, [r3, #32]
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	019b      	lsls	r3, r3, #6
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	041b      	lsls	r3, r3, #16
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	061b      	lsls	r3, r3, #24
 8007f00:	4937      	ldr	r1, [pc, #220]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f06:	4b37      	ldr	r3, [pc, #220]	; (8007fe4 <HAL_RCC_OscConfig+0x4ec>)
 8007f08:	2201      	movs	r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f0c:	f7fc fb26 	bl	800455c <HAL_GetTick>
 8007f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f12:	e008      	b.n	8007f26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f14:	f7fc fb22 	bl	800455c <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e056      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f26:	4b2e      	ldr	r3, [pc, #184]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0f0      	beq.n	8007f14 <HAL_RCC_OscConfig+0x41c>
 8007f32:	e04e      	b.n	8007fd2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f34:	4b2b      	ldr	r3, [pc, #172]	; (8007fe4 <HAL_RCC_OscConfig+0x4ec>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f3a:	f7fc fb0f 	bl	800455c <HAL_GetTick>
 8007f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f40:	e008      	b.n	8007f54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f42:	f7fc fb0b 	bl	800455c <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d901      	bls.n	8007f54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e03f      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f54:	4b22      	ldr	r3, [pc, #136]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1f0      	bne.n	8007f42 <HAL_RCC_OscConfig+0x44a>
 8007f60:	e037      	b.n	8007fd2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d101      	bne.n	8007f6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e032      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f6e:	4b1c      	ldr	r3, [pc, #112]	; (8007fe0 <HAL_RCC_OscConfig+0x4e8>)
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d028      	beq.n	8007fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d121      	bne.n	8007fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d11a      	bne.n	8007fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007fa4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d111      	bne.n	8007fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d107      	bne.n	8007fce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d001      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	40007000 	.word	0x40007000
 8007fe0:	40023800 	.word	0x40023800
 8007fe4:	42470060 	.word	0x42470060

08007fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e0cc      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ffc:	4b68      	ldr	r3, [pc, #416]	; (80081a0 <HAL_RCC_ClockConfig+0x1b8>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	429a      	cmp	r2, r3
 8008008:	d90c      	bls.n	8008024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800800a:	4b65      	ldr	r3, [pc, #404]	; (80081a0 <HAL_RCC_ClockConfig+0x1b8>)
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008012:	4b63      	ldr	r3, [pc, #396]	; (80081a0 <HAL_RCC_ClockConfig+0x1b8>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	429a      	cmp	r2, r3
 800801e:	d001      	beq.n	8008024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e0b8      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d020      	beq.n	8008072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b00      	cmp	r3, #0
 800803a:	d005      	beq.n	8008048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800803c:	4b59      	ldr	r3, [pc, #356]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	4a58      	ldr	r2, [pc, #352]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0308 	and.w	r3, r3, #8
 8008050:	2b00      	cmp	r3, #0
 8008052:	d005      	beq.n	8008060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008054:	4b53      	ldr	r3, [pc, #332]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	4a52      	ldr	r2, [pc, #328]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 800805a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800805e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008060:	4b50      	ldr	r3, [pc, #320]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	494d      	ldr	r1, [pc, #308]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 800806e:	4313      	orrs	r3, r2
 8008070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d044      	beq.n	8008108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d107      	bne.n	8008096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008086:	4b47      	ldr	r3, [pc, #284]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d119      	bne.n	80080c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e07f      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d003      	beq.n	80080a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d107      	bne.n	80080b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080a6:	4b3f      	ldr	r3, [pc, #252]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d109      	bne.n	80080c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e06f      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080b6:	4b3b      	ldr	r3, [pc, #236]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e067      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080c6:	4b37      	ldr	r3, [pc, #220]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f023 0203 	bic.w	r2, r3, #3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	4934      	ldr	r1, [pc, #208]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080d8:	f7fc fa40 	bl	800455c <HAL_GetTick>
 80080dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080de:	e00a      	b.n	80080f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080e0:	f7fc fa3c 	bl	800455c <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e04f      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080f6:	4b2b      	ldr	r3, [pc, #172]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f003 020c 	and.w	r2, r3, #12
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	429a      	cmp	r2, r3
 8008106:	d1eb      	bne.n	80080e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008108:	4b25      	ldr	r3, [pc, #148]	; (80081a0 <HAL_RCC_ClockConfig+0x1b8>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d20c      	bcs.n	8008130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008116:	4b22      	ldr	r3, [pc, #136]	; (80081a0 <HAL_RCC_ClockConfig+0x1b8>)
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	b2d2      	uxtb	r2, r2
 800811c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800811e:	4b20      	ldr	r3, [pc, #128]	; (80081a0 <HAL_RCC_ClockConfig+0x1b8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0307 	and.w	r3, r3, #7
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d001      	beq.n	8008130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e032      	b.n	8008196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d008      	beq.n	800814e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800813c:	4b19      	ldr	r3, [pc, #100]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	4916      	ldr	r1, [pc, #88]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 800814a:	4313      	orrs	r3, r2
 800814c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0308 	and.w	r3, r3, #8
 8008156:	2b00      	cmp	r3, #0
 8008158:	d009      	beq.n	800816e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800815a:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	00db      	lsls	r3, r3, #3
 8008168:	490e      	ldr	r1, [pc, #56]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 800816a:	4313      	orrs	r3, r2
 800816c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800816e:	f000 f821 	bl	80081b4 <HAL_RCC_GetSysClockFreq>
 8008172:	4602      	mov	r2, r0
 8008174:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <HAL_RCC_ClockConfig+0x1bc>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	091b      	lsrs	r3, r3, #4
 800817a:	f003 030f 	and.w	r3, r3, #15
 800817e:	490a      	ldr	r1, [pc, #40]	; (80081a8 <HAL_RCC_ClockConfig+0x1c0>)
 8008180:	5ccb      	ldrb	r3, [r1, r3]
 8008182:	fa22 f303 	lsr.w	r3, r2, r3
 8008186:	4a09      	ldr	r2, [pc, #36]	; (80081ac <HAL_RCC_ClockConfig+0x1c4>)
 8008188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800818a:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <HAL_RCC_ClockConfig+0x1c8>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f7fb fe78 	bl	8003e84 <HAL_InitTick>

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40023c00 	.word	0x40023c00
 80081a4:	40023800 	.word	0x40023800
 80081a8:	0801543c 	.word	0x0801543c
 80081ac:	20000014 	.word	0x20000014
 80081b0:	20000018 	.word	0x20000018

080081b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	607b      	str	r3, [r7, #4]
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	2300      	movs	r3, #0
 80081c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081cc:	4b67      	ldr	r3, [pc, #412]	; (800836c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f003 030c 	and.w	r3, r3, #12
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d00d      	beq.n	80081f4 <HAL_RCC_GetSysClockFreq+0x40>
 80081d8:	2b08      	cmp	r3, #8
 80081da:	f200 80bd 	bhi.w	8008358 <HAL_RCC_GetSysClockFreq+0x1a4>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <HAL_RCC_GetSysClockFreq+0x34>
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d003      	beq.n	80081ee <HAL_RCC_GetSysClockFreq+0x3a>
 80081e6:	e0b7      	b.n	8008358 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081e8:	4b61      	ldr	r3, [pc, #388]	; (8008370 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80081ea:	60bb      	str	r3, [r7, #8]
       break;
 80081ec:	e0b7      	b.n	800835e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081ee:	4b61      	ldr	r3, [pc, #388]	; (8008374 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80081f0:	60bb      	str	r3, [r7, #8]
      break;
 80081f2:	e0b4      	b.n	800835e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081f4:	4b5d      	ldr	r3, [pc, #372]	; (800836c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081fe:	4b5b      	ldr	r3, [pc, #364]	; (800836c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d04d      	beq.n	80082a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800820a:	4b58      	ldr	r3, [pc, #352]	; (800836c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	099b      	lsrs	r3, r3, #6
 8008210:	461a      	mov	r2, r3
 8008212:	f04f 0300 	mov.w	r3, #0
 8008216:	f240 10ff 	movw	r0, #511	; 0x1ff
 800821a:	f04f 0100 	mov.w	r1, #0
 800821e:	ea02 0800 	and.w	r8, r2, r0
 8008222:	ea03 0901 	and.w	r9, r3, r1
 8008226:	4640      	mov	r0, r8
 8008228:	4649      	mov	r1, r9
 800822a:	f04f 0200 	mov.w	r2, #0
 800822e:	f04f 0300 	mov.w	r3, #0
 8008232:	014b      	lsls	r3, r1, #5
 8008234:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008238:	0142      	lsls	r2, r0, #5
 800823a:	4610      	mov	r0, r2
 800823c:	4619      	mov	r1, r3
 800823e:	ebb0 0008 	subs.w	r0, r0, r8
 8008242:	eb61 0109 	sbc.w	r1, r1, r9
 8008246:	f04f 0200 	mov.w	r2, #0
 800824a:	f04f 0300 	mov.w	r3, #0
 800824e:	018b      	lsls	r3, r1, #6
 8008250:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008254:	0182      	lsls	r2, r0, #6
 8008256:	1a12      	subs	r2, r2, r0
 8008258:	eb63 0301 	sbc.w	r3, r3, r1
 800825c:	f04f 0000 	mov.w	r0, #0
 8008260:	f04f 0100 	mov.w	r1, #0
 8008264:	00d9      	lsls	r1, r3, #3
 8008266:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800826a:	00d0      	lsls	r0, r2, #3
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	eb12 0208 	adds.w	r2, r2, r8
 8008274:	eb43 0309 	adc.w	r3, r3, r9
 8008278:	f04f 0000 	mov.w	r0, #0
 800827c:	f04f 0100 	mov.w	r1, #0
 8008280:	0259      	lsls	r1, r3, #9
 8008282:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008286:	0250      	lsls	r0, r2, #9
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4610      	mov	r0, r2
 800828e:	4619      	mov	r1, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	461a      	mov	r2, r3
 8008294:	f04f 0300 	mov.w	r3, #0
 8008298:	f7f8 fcf6 	bl	8000c88 <__aeabi_uldivmod>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4613      	mov	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	e04a      	b.n	800833c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082a6:	4b31      	ldr	r3, [pc, #196]	; (800836c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	099b      	lsrs	r3, r3, #6
 80082ac:	461a      	mov	r2, r3
 80082ae:	f04f 0300 	mov.w	r3, #0
 80082b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80082b6:	f04f 0100 	mov.w	r1, #0
 80082ba:	ea02 0400 	and.w	r4, r2, r0
 80082be:	ea03 0501 	and.w	r5, r3, r1
 80082c2:	4620      	mov	r0, r4
 80082c4:	4629      	mov	r1, r5
 80082c6:	f04f 0200 	mov.w	r2, #0
 80082ca:	f04f 0300 	mov.w	r3, #0
 80082ce:	014b      	lsls	r3, r1, #5
 80082d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80082d4:	0142      	lsls	r2, r0, #5
 80082d6:	4610      	mov	r0, r2
 80082d8:	4619      	mov	r1, r3
 80082da:	1b00      	subs	r0, r0, r4
 80082dc:	eb61 0105 	sbc.w	r1, r1, r5
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	018b      	lsls	r3, r1, #6
 80082ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80082ee:	0182      	lsls	r2, r0, #6
 80082f0:	1a12      	subs	r2, r2, r0
 80082f2:	eb63 0301 	sbc.w	r3, r3, r1
 80082f6:	f04f 0000 	mov.w	r0, #0
 80082fa:	f04f 0100 	mov.w	r1, #0
 80082fe:	00d9      	lsls	r1, r3, #3
 8008300:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008304:	00d0      	lsls	r0, r2, #3
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	1912      	adds	r2, r2, r4
 800830c:	eb45 0303 	adc.w	r3, r5, r3
 8008310:	f04f 0000 	mov.w	r0, #0
 8008314:	f04f 0100 	mov.w	r1, #0
 8008318:	0299      	lsls	r1, r3, #10
 800831a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800831e:	0290      	lsls	r0, r2, #10
 8008320:	4602      	mov	r2, r0
 8008322:	460b      	mov	r3, r1
 8008324:	4610      	mov	r0, r2
 8008326:	4619      	mov	r1, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	461a      	mov	r2, r3
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	f7f8 fcaa 	bl	8000c88 <__aeabi_uldivmod>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4613      	mov	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800833c:	4b0b      	ldr	r3, [pc, #44]	; (800836c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	0c1b      	lsrs	r3, r3, #16
 8008342:	f003 0303 	and.w	r3, r3, #3
 8008346:	3301      	adds	r3, #1
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	fbb2 f3f3 	udiv	r3, r2, r3
 8008354:	60bb      	str	r3, [r7, #8]
      break;
 8008356:	e002      	b.n	800835e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800835a:	60bb      	str	r3, [r7, #8]
      break;
 800835c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800835e:	68bb      	ldr	r3, [r7, #8]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800836a:	bf00      	nop
 800836c:	40023800 	.word	0x40023800
 8008370:	00f42400 	.word	0x00f42400
 8008374:	007a1200 	.word	0x007a1200

08008378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800837c:	4b03      	ldr	r3, [pc, #12]	; (800838c <HAL_RCC_GetHCLKFreq+0x14>)
 800837e:	681b      	ldr	r3, [r3, #0]
}
 8008380:	4618      	mov	r0, r3
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	20000014 	.word	0x20000014

08008390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008394:	f7ff fff0 	bl	8008378 <HAL_RCC_GetHCLKFreq>
 8008398:	4602      	mov	r2, r0
 800839a:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	0a9b      	lsrs	r3, r3, #10
 80083a0:	f003 0307 	and.w	r3, r3, #7
 80083a4:	4903      	ldr	r1, [pc, #12]	; (80083b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083a6:	5ccb      	ldrb	r3, [r1, r3]
 80083a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	40023800 	.word	0x40023800
 80083b4:	0801544c 	.word	0x0801544c

080083b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80083bc:	f7ff ffdc 	bl	8008378 <HAL_RCC_GetHCLKFreq>
 80083c0:	4602      	mov	r2, r0
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	0b5b      	lsrs	r3, r3, #13
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	4903      	ldr	r1, [pc, #12]	; (80083dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80083ce:	5ccb      	ldrb	r3, [r1, r3]
 80083d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40023800 	.word	0x40023800
 80083dc:	0801544c 	.word	0x0801544c

080083e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	220f      	movs	r2, #15
 80083ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80083f0:	4b12      	ldr	r3, [pc, #72]	; (800843c <HAL_RCC_GetClockConfig+0x5c>)
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f003 0203 	and.w	r2, r3, #3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80083fc:	4b0f      	ldr	r3, [pc, #60]	; (800843c <HAL_RCC_GetClockConfig+0x5c>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008408:	4b0c      	ldr	r3, [pc, #48]	; (800843c <HAL_RCC_GetClockConfig+0x5c>)
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008414:	4b09      	ldr	r3, [pc, #36]	; (800843c <HAL_RCC_GetClockConfig+0x5c>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	08db      	lsrs	r3, r3, #3
 800841a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008422:	4b07      	ldr	r3, [pc, #28]	; (8008440 <HAL_RCC_GetClockConfig+0x60>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0207 	and.w	r2, r3, #7
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	601a      	str	r2, [r3, #0]
}
 800842e:	bf00      	nop
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	40023800 	.word	0x40023800
 8008440:	40023c00 	.word	0x40023c00

08008444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e07b      	b.n	800854e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	2b00      	cmp	r3, #0
 800845c:	d108      	bne.n	8008470 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008466:	d009      	beq.n	800847c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	61da      	str	r2, [r3, #28]
 800846e:	e005      	b.n	800847c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fb fb86 	bl	8003ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084ce:	431a      	orrs	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008500:	ea42 0103 	orr.w	r1, r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	430a      	orrs	r2, r1
 8008512:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	0c1b      	lsrs	r3, r3, #16
 800851a:	f003 0104 	and.w	r1, r3, #4
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	f003 0210 	and.w	r2, r3, #16
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69da      	ldr	r2, [r3, #28]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800853c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b082      	sub	sp, #8
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e041      	b.n	80085ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	d106      	bne.n	8008582 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fb fb5b 	bl	8003c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	3304      	adds	r3, #4
 8008592:	4619      	mov	r1, r3
 8008594:	4610      	mov	r0, r2
 8008596:	f000 fe77 	bl	8009288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b01      	cmp	r3, #1
 8008606:	d001      	beq.n	800860c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e04e      	b.n	80086aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f042 0201 	orr.w	r2, r2, #1
 8008622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a23      	ldr	r2, [pc, #140]	; (80086b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d022      	beq.n	8008674 <HAL_TIM_Base_Start_IT+0x80>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008636:	d01d      	beq.n	8008674 <HAL_TIM_Base_Start_IT+0x80>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1f      	ldr	r2, [pc, #124]	; (80086bc <HAL_TIM_Base_Start_IT+0xc8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d018      	beq.n	8008674 <HAL_TIM_Base_Start_IT+0x80>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a1e      	ldr	r2, [pc, #120]	; (80086c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d013      	beq.n	8008674 <HAL_TIM_Base_Start_IT+0x80>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a1c      	ldr	r2, [pc, #112]	; (80086c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d00e      	beq.n	8008674 <HAL_TIM_Base_Start_IT+0x80>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a1b      	ldr	r2, [pc, #108]	; (80086c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d009      	beq.n	8008674 <HAL_TIM_Base_Start_IT+0x80>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a19      	ldr	r2, [pc, #100]	; (80086cc <HAL_TIM_Base_Start_IT+0xd8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d004      	beq.n	8008674 <HAL_TIM_Base_Start_IT+0x80>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a18      	ldr	r2, [pc, #96]	; (80086d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d111      	bne.n	8008698 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f003 0307 	and.w	r3, r3, #7
 800867e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b06      	cmp	r3, #6
 8008684:	d010      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f042 0201 	orr.w	r2, r2, #1
 8008694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008696:	e007      	b.n	80086a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f042 0201 	orr.w	r2, r2, #1
 80086a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	40010000 	.word	0x40010000
 80086bc:	40000400 	.word	0x40000400
 80086c0:	40000800 	.word	0x40000800
 80086c4:	40000c00 	.word	0x40000c00
 80086c8:	40010400 	.word	0x40010400
 80086cc:	40014000 	.word	0x40014000
 80086d0:	40001800 	.word	0x40001800

080086d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e041      	b.n	800876a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d106      	bne.n	8008700 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f839 	bl	8008772 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3304      	adds	r3, #4
 8008710:	4619      	mov	r1, r3
 8008712:	4610      	mov	r0, r2
 8008714:	f000 fdb8 	bl	8009288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
	...

08008788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d109      	bne.n	80087ac <HAL_TIM_PWM_Start+0x24>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	bf14      	ite	ne
 80087a4:	2301      	movne	r3, #1
 80087a6:	2300      	moveq	r3, #0
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	e022      	b.n	80087f2 <HAL_TIM_PWM_Start+0x6a>
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	d109      	bne.n	80087c6 <HAL_TIM_PWM_Start+0x3e>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	bf14      	ite	ne
 80087be:	2301      	movne	r3, #1
 80087c0:	2300      	moveq	r3, #0
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	e015      	b.n	80087f2 <HAL_TIM_PWM_Start+0x6a>
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d109      	bne.n	80087e0 <HAL_TIM_PWM_Start+0x58>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	bf14      	ite	ne
 80087d8:	2301      	movne	r3, #1
 80087da:	2300      	moveq	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	e008      	b.n	80087f2 <HAL_TIM_PWM_Start+0x6a>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	bf14      	ite	ne
 80087ec:	2301      	movne	r3, #1
 80087ee:	2300      	moveq	r3, #0
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e07c      	b.n	80088f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d104      	bne.n	800880a <HAL_TIM_PWM_Start+0x82>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008808:	e013      	b.n	8008832 <HAL_TIM_PWM_Start+0xaa>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b04      	cmp	r3, #4
 800880e:	d104      	bne.n	800881a <HAL_TIM_PWM_Start+0x92>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008818:	e00b      	b.n	8008832 <HAL_TIM_PWM_Start+0xaa>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b08      	cmp	r3, #8
 800881e:	d104      	bne.n	800882a <HAL_TIM_PWM_Start+0xa2>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008828:	e003      	b.n	8008832 <HAL_TIM_PWM_Start+0xaa>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2202      	movs	r2, #2
 800882e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2201      	movs	r2, #1
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f001 f938 	bl	8009ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a2d      	ldr	r2, [pc, #180]	; (80088fc <HAL_TIM_PWM_Start+0x174>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d004      	beq.n	8008854 <HAL_TIM_PWM_Start+0xcc>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a2c      	ldr	r2, [pc, #176]	; (8008900 <HAL_TIM_PWM_Start+0x178>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d101      	bne.n	8008858 <HAL_TIM_PWM_Start+0xd0>
 8008854:	2301      	movs	r3, #1
 8008856:	e000      	b.n	800885a <HAL_TIM_PWM_Start+0xd2>
 8008858:	2300      	movs	r3, #0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d007      	beq.n	800886e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800886c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a22      	ldr	r2, [pc, #136]	; (80088fc <HAL_TIM_PWM_Start+0x174>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d022      	beq.n	80088be <HAL_TIM_PWM_Start+0x136>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008880:	d01d      	beq.n	80088be <HAL_TIM_PWM_Start+0x136>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a1f      	ldr	r2, [pc, #124]	; (8008904 <HAL_TIM_PWM_Start+0x17c>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d018      	beq.n	80088be <HAL_TIM_PWM_Start+0x136>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a1d      	ldr	r2, [pc, #116]	; (8008908 <HAL_TIM_PWM_Start+0x180>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d013      	beq.n	80088be <HAL_TIM_PWM_Start+0x136>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a1c      	ldr	r2, [pc, #112]	; (800890c <HAL_TIM_PWM_Start+0x184>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00e      	beq.n	80088be <HAL_TIM_PWM_Start+0x136>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a16      	ldr	r2, [pc, #88]	; (8008900 <HAL_TIM_PWM_Start+0x178>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d009      	beq.n	80088be <HAL_TIM_PWM_Start+0x136>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a18      	ldr	r2, [pc, #96]	; (8008910 <HAL_TIM_PWM_Start+0x188>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d004      	beq.n	80088be <HAL_TIM_PWM_Start+0x136>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a16      	ldr	r2, [pc, #88]	; (8008914 <HAL_TIM_PWM_Start+0x18c>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d111      	bne.n	80088e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f003 0307 	and.w	r3, r3, #7
 80088c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b06      	cmp	r3, #6
 80088ce:	d010      	beq.n	80088f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f042 0201 	orr.w	r2, r2, #1
 80088de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088e0:	e007      	b.n	80088f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f042 0201 	orr.w	r2, r2, #1
 80088f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	40010000 	.word	0x40010000
 8008900:	40010400 	.word	0x40010400
 8008904:	40000400 	.word	0x40000400
 8008908:	40000800 	.word	0x40000800
 800890c:	40000c00 	.word	0x40000c00
 8008910:	40014000 	.word	0x40014000
 8008914:	40001800 	.word	0x40001800

08008918 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e041      	b.n	80089ae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f839 	bl	80089b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3304      	adds	r3, #4
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f000 fc96 	bl	8009288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80089be:	bf00      	nop
 80089c0:	370c      	adds	r7, #12
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
	...

080089cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d104      	bne.n	80089e6 <HAL_TIM_IC_Start_IT+0x1a>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	e013      	b.n	8008a0e <HAL_TIM_IC_Start_IT+0x42>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2b04      	cmp	r3, #4
 80089ea:	d104      	bne.n	80089f6 <HAL_TIM_IC_Start_IT+0x2a>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	e00b      	b.n	8008a0e <HAL_TIM_IC_Start_IT+0x42>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d104      	bne.n	8008a06 <HAL_TIM_IC_Start_IT+0x3a>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	e003      	b.n	8008a0e <HAL_TIM_IC_Start_IT+0x42>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d104      	bne.n	8008a20 <HAL_TIM_IC_Start_IT+0x54>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	e013      	b.n	8008a48 <HAL_TIM_IC_Start_IT+0x7c>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	d104      	bne.n	8008a30 <HAL_TIM_IC_Start_IT+0x64>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	e00b      	b.n	8008a48 <HAL_TIM_IC_Start_IT+0x7c>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d104      	bne.n	8008a40 <HAL_TIM_IC_Start_IT+0x74>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	e003      	b.n	8008a48 <HAL_TIM_IC_Start_IT+0x7c>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d102      	bne.n	8008a56 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d001      	beq.n	8008a5a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e0c7      	b.n	8008bea <HAL_TIM_IC_Start_IT+0x21e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d104      	bne.n	8008a6a <HAL_TIM_IC_Start_IT+0x9e>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a68:	e013      	b.n	8008a92 <HAL_TIM_IC_Start_IT+0xc6>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b04      	cmp	r3, #4
 8008a6e:	d104      	bne.n	8008a7a <HAL_TIM_IC_Start_IT+0xae>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a78:	e00b      	b.n	8008a92 <HAL_TIM_IC_Start_IT+0xc6>
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b08      	cmp	r3, #8
 8008a7e:	d104      	bne.n	8008a8a <HAL_TIM_IC_Start_IT+0xbe>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a88:	e003      	b.n	8008a92 <HAL_TIM_IC_Start_IT+0xc6>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d104      	bne.n	8008aa2 <HAL_TIM_IC_Start_IT+0xd6>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2202      	movs	r2, #2
 8008a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008aa0:	e013      	b.n	8008aca <HAL_TIM_IC_Start_IT+0xfe>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d104      	bne.n	8008ab2 <HAL_TIM_IC_Start_IT+0xe6>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ab0:	e00b      	b.n	8008aca <HAL_TIM_IC_Start_IT+0xfe>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d104      	bne.n	8008ac2 <HAL_TIM_IC_Start_IT+0xf6>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ac0:	e003      	b.n	8008aca <HAL_TIM_IC_Start_IT+0xfe>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2b0c      	cmp	r3, #12
 8008ace:	d841      	bhi.n	8008b54 <HAL_TIM_IC_Start_IT+0x188>
 8008ad0:	a201      	add	r2, pc, #4	; (adr r2, 8008ad8 <HAL_TIM_IC_Start_IT+0x10c>)
 8008ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad6:	bf00      	nop
 8008ad8:	08008b0d 	.word	0x08008b0d
 8008adc:	08008b55 	.word	0x08008b55
 8008ae0:	08008b55 	.word	0x08008b55
 8008ae4:	08008b55 	.word	0x08008b55
 8008ae8:	08008b1f 	.word	0x08008b1f
 8008aec:	08008b55 	.word	0x08008b55
 8008af0:	08008b55 	.word	0x08008b55
 8008af4:	08008b55 	.word	0x08008b55
 8008af8:	08008b31 	.word	0x08008b31
 8008afc:	08008b55 	.word	0x08008b55
 8008b00:	08008b55 	.word	0x08008b55
 8008b04:	08008b55 	.word	0x08008b55
 8008b08:	08008b43 	.word	0x08008b43
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f042 0202 	orr.w	r2, r2, #2
 8008b1a:	60da      	str	r2, [r3, #12]
      break;
 8008b1c:	e01b      	b.n	8008b56 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	68da      	ldr	r2, [r3, #12]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f042 0204 	orr.w	r2, r2, #4
 8008b2c:	60da      	str	r2, [r3, #12]
      break;
 8008b2e:	e012      	b.n	8008b56 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68da      	ldr	r2, [r3, #12]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0208 	orr.w	r2, r2, #8
 8008b3e:	60da      	str	r2, [r3, #12]
      break;
 8008b40:	e009      	b.n	8008b56 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68da      	ldr	r2, [r3, #12]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f042 0210 	orr.w	r2, r2, #16
 8008b50:	60da      	str	r2, [r3, #12]
      break;
 8008b52:	e000      	b.n	8008b56 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8008b54:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 ffa6 	bl	8009ab0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a22      	ldr	r2, [pc, #136]	; (8008bf4 <HAL_TIM_IC_Start_IT+0x228>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d022      	beq.n	8008bb4 <HAL_TIM_IC_Start_IT+0x1e8>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b76:	d01d      	beq.n	8008bb4 <HAL_TIM_IC_Start_IT+0x1e8>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a1e      	ldr	r2, [pc, #120]	; (8008bf8 <HAL_TIM_IC_Start_IT+0x22c>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d018      	beq.n	8008bb4 <HAL_TIM_IC_Start_IT+0x1e8>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a1d      	ldr	r2, [pc, #116]	; (8008bfc <HAL_TIM_IC_Start_IT+0x230>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d013      	beq.n	8008bb4 <HAL_TIM_IC_Start_IT+0x1e8>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a1b      	ldr	r2, [pc, #108]	; (8008c00 <HAL_TIM_IC_Start_IT+0x234>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d00e      	beq.n	8008bb4 <HAL_TIM_IC_Start_IT+0x1e8>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a1a      	ldr	r2, [pc, #104]	; (8008c04 <HAL_TIM_IC_Start_IT+0x238>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d009      	beq.n	8008bb4 <HAL_TIM_IC_Start_IT+0x1e8>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a18      	ldr	r2, [pc, #96]	; (8008c08 <HAL_TIM_IC_Start_IT+0x23c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d004      	beq.n	8008bb4 <HAL_TIM_IC_Start_IT+0x1e8>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a17      	ldr	r2, [pc, #92]	; (8008c0c <HAL_TIM_IC_Start_IT+0x240>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d111      	bne.n	8008bd8 <HAL_TIM_IC_Start_IT+0x20c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f003 0307 	and.w	r3, r3, #7
 8008bbe:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b06      	cmp	r3, #6
 8008bc4:	d010      	beq.n	8008be8 <HAL_TIM_IC_Start_IT+0x21c>
    {
      __HAL_TIM_ENABLE(htim);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f042 0201 	orr.w	r2, r2, #1
 8008bd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bd6:	e007      	b.n	8008be8 <HAL_TIM_IC_Start_IT+0x21c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f042 0201 	orr.w	r2, r2, #1
 8008be6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	40010000 	.word	0x40010000
 8008bf8:	40000400 	.word	0x40000400
 8008bfc:	40000800 	.word	0x40000800
 8008c00:	40000c00 	.word	0x40000c00
 8008c04:	40010400 	.word	0x40010400
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40001800 	.word	0x40001800

08008c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d122      	bne.n	8008c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d11b      	bne.n	8008c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f06f 0202 	mvn.w	r2, #2
 8008c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7f9 ff7c 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 8008c58:	e005      	b.n	8008c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 faf6 	bl	800924c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fafd 	bl	8009260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f003 0304 	and.w	r3, r3, #4
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	d122      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d11b      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f06f 0204 	mvn.w	r2, #4
 8008c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2202      	movs	r2, #2
 8008c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f7f9 ff52 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 8008cac:	e005      	b.n	8008cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 facc 	bl	800924c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fad3 	bl	8009260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0308 	and.w	r3, r3, #8
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d122      	bne.n	8008d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f003 0308 	and.w	r3, r3, #8
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d11b      	bne.n	8008d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f06f 0208 	mvn.w	r2, #8
 8008ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2204      	movs	r2, #4
 8008cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	f003 0303 	and.w	r3, r3, #3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f7f9 ff28 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 8008d00:	e005      	b.n	8008d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 faa2 	bl	800924c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 faa9 	bl	8009260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f003 0310 	and.w	r3, r3, #16
 8008d1e:	2b10      	cmp	r3, #16
 8008d20:	d122      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f003 0310 	and.w	r3, r3, #16
 8008d2c:	2b10      	cmp	r3, #16
 8008d2e:	d11b      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f06f 0210 	mvn.w	r2, #16
 8008d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2208      	movs	r2, #8
 8008d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7f9 fefe 	bl	8002b50 <HAL_TIM_IC_CaptureCallback>
 8008d54:	e005      	b.n	8008d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa78 	bl	800924c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa7f 	bl	8009260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d10e      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d107      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0201 	mvn.w	r2, #1
 8008d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fa fc08 	bl	80035a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d9e:	2b80      	cmp	r3, #128	; 0x80
 8008da0:	d10e      	bne.n	8008dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dac:	2b80      	cmp	r3, #128	; 0x80
 8008dae:	d107      	bne.n	8008dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 ff76 	bl	8009cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dca:	2b40      	cmp	r3, #64	; 0x40
 8008dcc:	d10e      	bne.n	8008dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd8:	2b40      	cmp	r3, #64	; 0x40
 8008dda:	d107      	bne.n	8008dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fa44 	bl	8009274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	f003 0320 	and.w	r3, r3, #32
 8008df6:	2b20      	cmp	r3, #32
 8008df8:	d10e      	bne.n	8008e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f003 0320 	and.w	r3, r3, #32
 8008e04:	2b20      	cmp	r3, #32
 8008e06:	d107      	bne.n	8008e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f06f 0220 	mvn.w	r2, #32
 8008e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 ff40 	bl	8009c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d101      	bne.n	8008e3a <HAL_TIM_IC_ConfigChannel+0x1a>
 8008e36:	2302      	movs	r3, #2
 8008e38:	e082      	b.n	8008f40 <HAL_TIM_IC_ConfigChannel+0x120>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d11b      	bne.n	8008e80 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	6819      	ldr	r1, [r3, #0]
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	685a      	ldr	r2, [r3, #4]
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f000 fc66 	bl	8009728 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	699a      	ldr	r2, [r3, #24]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f022 020c 	bic.w	r2, r2, #12
 8008e6a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6999      	ldr	r1, [r3, #24]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	689a      	ldr	r2, [r3, #8]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	430a      	orrs	r2, r1
 8008e7c:	619a      	str	r2, [r3, #24]
 8008e7e:	e05a      	b.n	8008f36 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d11c      	bne.n	8008ec0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	6819      	ldr	r1, [r3, #0]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f000 fcea 	bl	800986e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	699a      	ldr	r2, [r3, #24]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008ea8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6999      	ldr	r1, [r3, #24]
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	021a      	lsls	r2, r3, #8
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	619a      	str	r2, [r3, #24]
 8008ebe:	e03a      	b.n	8008f36 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b08      	cmp	r3, #8
 8008ec4:	d11b      	bne.n	8008efe <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	6819      	ldr	r1, [r3, #0]
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	f000 fd37 	bl	8009948 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69da      	ldr	r2, [r3, #28]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f022 020c 	bic.w	r2, r2, #12
 8008ee8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69d9      	ldr	r1, [r3, #28]
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	689a      	ldr	r2, [r3, #8]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	61da      	str	r2, [r3, #28]
 8008efc:	e01b      	b.n	8008f36 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	6819      	ldr	r1, [r3, #0]
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f000 fd57 	bl	80099c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69da      	ldr	r2, [r3, #28]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008f20:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69d9      	ldr	r1, [r3, #28]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	021a      	lsls	r2, r3, #8
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d101      	bne.n	8008f62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008f5e:	2302      	movs	r3, #2
 8008f60:	e0ac      	b.n	80090bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b0c      	cmp	r3, #12
 8008f6e:	f200 809f 	bhi.w	80090b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008f72:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f78:	08008fad 	.word	0x08008fad
 8008f7c:	080090b1 	.word	0x080090b1
 8008f80:	080090b1 	.word	0x080090b1
 8008f84:	080090b1 	.word	0x080090b1
 8008f88:	08008fed 	.word	0x08008fed
 8008f8c:	080090b1 	.word	0x080090b1
 8008f90:	080090b1 	.word	0x080090b1
 8008f94:	080090b1 	.word	0x080090b1
 8008f98:	0800902f 	.word	0x0800902f
 8008f9c:	080090b1 	.word	0x080090b1
 8008fa0:	080090b1 	.word	0x080090b1
 8008fa4:	080090b1 	.word	0x080090b1
 8008fa8:	0800906f 	.word	0x0800906f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68b9      	ldr	r1, [r7, #8]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fa08 	bl	80093c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	699a      	ldr	r2, [r3, #24]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0208 	orr.w	r2, r2, #8
 8008fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	699a      	ldr	r2, [r3, #24]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0204 	bic.w	r2, r2, #4
 8008fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6999      	ldr	r1, [r3, #24]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	691a      	ldr	r2, [r3, #16]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	619a      	str	r2, [r3, #24]
      break;
 8008fea:	e062      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68b9      	ldr	r1, [r7, #8]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fa58 	bl	80094a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	699a      	ldr	r2, [r3, #24]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6999      	ldr	r1, [r3, #24]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	021a      	lsls	r2, r3, #8
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	430a      	orrs	r2, r1
 800902a:	619a      	str	r2, [r3, #24]
      break;
 800902c:	e041      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68b9      	ldr	r1, [r7, #8]
 8009034:	4618      	mov	r0, r3
 8009036:	f000 faad 	bl	8009594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	69da      	ldr	r2, [r3, #28]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f042 0208 	orr.w	r2, r2, #8
 8009048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	69da      	ldr	r2, [r3, #28]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 0204 	bic.w	r2, r2, #4
 8009058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69d9      	ldr	r1, [r3, #28]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	691a      	ldr	r2, [r3, #16]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	430a      	orrs	r2, r1
 800906a:	61da      	str	r2, [r3, #28]
      break;
 800906c:	e021      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68b9      	ldr	r1, [r7, #8]
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fb01 	bl	800967c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	69da      	ldr	r2, [r3, #28]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	69da      	ldr	r2, [r3, #28]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69d9      	ldr	r1, [r3, #28]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	021a      	lsls	r2, r3, #8
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	430a      	orrs	r2, r1
 80090ac:	61da      	str	r2, [r3, #28]
      break;
 80090ae:	e000      	b.n	80090b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80090b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d101      	bne.n	80090dc <HAL_TIM_ConfigClockSource+0x18>
 80090d8:	2302      	movs	r3, #2
 80090da:	e0b3      	b.n	8009244 <HAL_TIM_ConfigClockSource+0x180>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2202      	movs	r2, #2
 80090e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80090fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009102:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009114:	d03e      	beq.n	8009194 <HAL_TIM_ConfigClockSource+0xd0>
 8009116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800911a:	f200 8087 	bhi.w	800922c <HAL_TIM_ConfigClockSource+0x168>
 800911e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009122:	f000 8085 	beq.w	8009230 <HAL_TIM_ConfigClockSource+0x16c>
 8009126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800912a:	d87f      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x168>
 800912c:	2b70      	cmp	r3, #112	; 0x70
 800912e:	d01a      	beq.n	8009166 <HAL_TIM_ConfigClockSource+0xa2>
 8009130:	2b70      	cmp	r3, #112	; 0x70
 8009132:	d87b      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x168>
 8009134:	2b60      	cmp	r3, #96	; 0x60
 8009136:	d050      	beq.n	80091da <HAL_TIM_ConfigClockSource+0x116>
 8009138:	2b60      	cmp	r3, #96	; 0x60
 800913a:	d877      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x168>
 800913c:	2b50      	cmp	r3, #80	; 0x50
 800913e:	d03c      	beq.n	80091ba <HAL_TIM_ConfigClockSource+0xf6>
 8009140:	2b50      	cmp	r3, #80	; 0x50
 8009142:	d873      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x168>
 8009144:	2b40      	cmp	r3, #64	; 0x40
 8009146:	d058      	beq.n	80091fa <HAL_TIM_ConfigClockSource+0x136>
 8009148:	2b40      	cmp	r3, #64	; 0x40
 800914a:	d86f      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x168>
 800914c:	2b30      	cmp	r3, #48	; 0x30
 800914e:	d064      	beq.n	800921a <HAL_TIM_ConfigClockSource+0x156>
 8009150:	2b30      	cmp	r3, #48	; 0x30
 8009152:	d86b      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x168>
 8009154:	2b20      	cmp	r3, #32
 8009156:	d060      	beq.n	800921a <HAL_TIM_ConfigClockSource+0x156>
 8009158:	2b20      	cmp	r3, #32
 800915a:	d867      	bhi.n	800922c <HAL_TIM_ConfigClockSource+0x168>
 800915c:	2b00      	cmp	r3, #0
 800915e:	d05c      	beq.n	800921a <HAL_TIM_ConfigClockSource+0x156>
 8009160:	2b10      	cmp	r3, #16
 8009162:	d05a      	beq.n	800921a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009164:	e062      	b.n	800922c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6818      	ldr	r0, [r3, #0]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	6899      	ldr	r1, [r3, #8]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f000 fc7b 	bl	8009a70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009188:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	609a      	str	r2, [r3, #8]
      break;
 8009192:	e04e      	b.n	8009232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	6899      	ldr	r1, [r3, #8]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f000 fc64 	bl	8009a70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689a      	ldr	r2, [r3, #8]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091b6:	609a      	str	r2, [r3, #8]
      break;
 80091b8:	e03b      	b.n	8009232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	6859      	ldr	r1, [r3, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f000 fb22 	bl	8009810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2150      	movs	r1, #80	; 0x50
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 fc31 	bl	8009a3a <TIM_ITRx_SetConfig>
      break;
 80091d8:	e02b      	b.n	8009232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	6859      	ldr	r1, [r3, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	461a      	mov	r2, r3
 80091e8:	f000 fb7e 	bl	80098e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2160      	movs	r1, #96	; 0x60
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fc21 	bl	8009a3a <TIM_ITRx_SetConfig>
      break;
 80091f8:	e01b      	b.n	8009232 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6818      	ldr	r0, [r3, #0]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	6859      	ldr	r1, [r3, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	461a      	mov	r2, r3
 8009208:	f000 fb02 	bl	8009810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2140      	movs	r1, #64	; 0x40
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fc11 	bl	8009a3a <TIM_ITRx_SetConfig>
      break;
 8009218:	e00b      	b.n	8009232 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4619      	mov	r1, r3
 8009224:	4610      	mov	r0, r2
 8009226:	f000 fc08 	bl	8009a3a <TIM_ITRx_SetConfig>
        break;
 800922a:	e002      	b.n	8009232 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800922c:	bf00      	nop
 800922e:	e000      	b.n	8009232 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009230:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a40      	ldr	r2, [pc, #256]	; (800939c <TIM_Base_SetConfig+0x114>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d013      	beq.n	80092c8 <TIM_Base_SetConfig+0x40>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092a6:	d00f      	beq.n	80092c8 <TIM_Base_SetConfig+0x40>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a3d      	ldr	r2, [pc, #244]	; (80093a0 <TIM_Base_SetConfig+0x118>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00b      	beq.n	80092c8 <TIM_Base_SetConfig+0x40>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a3c      	ldr	r2, [pc, #240]	; (80093a4 <TIM_Base_SetConfig+0x11c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d007      	beq.n	80092c8 <TIM_Base_SetConfig+0x40>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a3b      	ldr	r2, [pc, #236]	; (80093a8 <TIM_Base_SetConfig+0x120>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d003      	beq.n	80092c8 <TIM_Base_SetConfig+0x40>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a3a      	ldr	r2, [pc, #232]	; (80093ac <TIM_Base_SetConfig+0x124>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d108      	bne.n	80092da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a2f      	ldr	r2, [pc, #188]	; (800939c <TIM_Base_SetConfig+0x114>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d02b      	beq.n	800933a <TIM_Base_SetConfig+0xb2>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092e8:	d027      	beq.n	800933a <TIM_Base_SetConfig+0xb2>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a2c      	ldr	r2, [pc, #176]	; (80093a0 <TIM_Base_SetConfig+0x118>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d023      	beq.n	800933a <TIM_Base_SetConfig+0xb2>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a2b      	ldr	r2, [pc, #172]	; (80093a4 <TIM_Base_SetConfig+0x11c>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d01f      	beq.n	800933a <TIM_Base_SetConfig+0xb2>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a2a      	ldr	r2, [pc, #168]	; (80093a8 <TIM_Base_SetConfig+0x120>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d01b      	beq.n	800933a <TIM_Base_SetConfig+0xb2>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a29      	ldr	r2, [pc, #164]	; (80093ac <TIM_Base_SetConfig+0x124>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d017      	beq.n	800933a <TIM_Base_SetConfig+0xb2>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a28      	ldr	r2, [pc, #160]	; (80093b0 <TIM_Base_SetConfig+0x128>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d013      	beq.n	800933a <TIM_Base_SetConfig+0xb2>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a27      	ldr	r2, [pc, #156]	; (80093b4 <TIM_Base_SetConfig+0x12c>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d00f      	beq.n	800933a <TIM_Base_SetConfig+0xb2>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a26      	ldr	r2, [pc, #152]	; (80093b8 <TIM_Base_SetConfig+0x130>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00b      	beq.n	800933a <TIM_Base_SetConfig+0xb2>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a25      	ldr	r2, [pc, #148]	; (80093bc <TIM_Base_SetConfig+0x134>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d007      	beq.n	800933a <TIM_Base_SetConfig+0xb2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a24      	ldr	r2, [pc, #144]	; (80093c0 <TIM_Base_SetConfig+0x138>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d003      	beq.n	800933a <TIM_Base_SetConfig+0xb2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a23      	ldr	r2, [pc, #140]	; (80093c4 <TIM_Base_SetConfig+0x13c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d108      	bne.n	800934c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	4313      	orrs	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	4313      	orrs	r3, r2
 8009358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a0a      	ldr	r2, [pc, #40]	; (800939c <TIM_Base_SetConfig+0x114>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d003      	beq.n	8009380 <TIM_Base_SetConfig+0xf8>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a0c      	ldr	r2, [pc, #48]	; (80093ac <TIM_Base_SetConfig+0x124>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d103      	bne.n	8009388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	691a      	ldr	r2, [r3, #16]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	615a      	str	r2, [r3, #20]
}
 800938e:	bf00      	nop
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	40010000 	.word	0x40010000
 80093a0:	40000400 	.word	0x40000400
 80093a4:	40000800 	.word	0x40000800
 80093a8:	40000c00 	.word	0x40000c00
 80093ac:	40010400 	.word	0x40010400
 80093b0:	40014000 	.word	0x40014000
 80093b4:	40014400 	.word	0x40014400
 80093b8:	40014800 	.word	0x40014800
 80093bc:	40001800 	.word	0x40001800
 80093c0:	40001c00 	.word	0x40001c00
 80093c4:	40002000 	.word	0x40002000

080093c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	f023 0201 	bic.w	r2, r3, #1
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f023 0303 	bic.w	r3, r3, #3
 80093fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	4313      	orrs	r3, r2
 8009408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f023 0302 	bic.w	r3, r3, #2
 8009410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	4313      	orrs	r3, r2
 800941a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a20      	ldr	r2, [pc, #128]	; (80094a0 <TIM_OC1_SetConfig+0xd8>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d003      	beq.n	800942c <TIM_OC1_SetConfig+0x64>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a1f      	ldr	r2, [pc, #124]	; (80094a4 <TIM_OC1_SetConfig+0xdc>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d10c      	bne.n	8009446 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f023 0308 	bic.w	r3, r3, #8
 8009432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	4313      	orrs	r3, r2
 800943c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f023 0304 	bic.w	r3, r3, #4
 8009444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a15      	ldr	r2, [pc, #84]	; (80094a0 <TIM_OC1_SetConfig+0xd8>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d003      	beq.n	8009456 <TIM_OC1_SetConfig+0x8e>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a14      	ldr	r2, [pc, #80]	; (80094a4 <TIM_OC1_SetConfig+0xdc>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d111      	bne.n	800947a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800945c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4313      	orrs	r3, r2
 800946e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	4313      	orrs	r3, r2
 8009478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	621a      	str	r2, [r3, #32]
}
 8009494:	bf00      	nop
 8009496:	371c      	adds	r7, #28
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	40010000 	.word	0x40010000
 80094a4:	40010400 	.word	0x40010400

080094a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	f023 0210 	bic.w	r2, r3, #16
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	021b      	lsls	r3, r3, #8
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	f023 0320 	bic.w	r3, r3, #32
 80094f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	011b      	lsls	r3, r3, #4
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a22      	ldr	r2, [pc, #136]	; (800958c <TIM_OC2_SetConfig+0xe4>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d003      	beq.n	8009510 <TIM_OC2_SetConfig+0x68>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a21      	ldr	r2, [pc, #132]	; (8009590 <TIM_OC2_SetConfig+0xe8>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d10d      	bne.n	800952c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	011b      	lsls	r3, r3, #4
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	4313      	orrs	r3, r2
 8009522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800952a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a17      	ldr	r2, [pc, #92]	; (800958c <TIM_OC2_SetConfig+0xe4>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d003      	beq.n	800953c <TIM_OC2_SetConfig+0x94>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a16      	ldr	r2, [pc, #88]	; (8009590 <TIM_OC2_SetConfig+0xe8>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d113      	bne.n	8009564 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009542:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800954a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	4313      	orrs	r3, r2
 8009556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	4313      	orrs	r3, r2
 8009562:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	685a      	ldr	r2, [r3, #4]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	697a      	ldr	r2, [r7, #20]
 800957c:	621a      	str	r2, [r3, #32]
}
 800957e:	bf00      	nop
 8009580:	371c      	adds	r7, #28
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	40010000 	.word	0x40010000
 8009590:	40010400 	.word	0x40010400

08009594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f023 0303 	bic.w	r3, r3, #3
 80095ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	4313      	orrs	r3, r2
 80095d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	021b      	lsls	r3, r3, #8
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a21      	ldr	r2, [pc, #132]	; (8009674 <TIM_OC3_SetConfig+0xe0>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d003      	beq.n	80095fa <TIM_OC3_SetConfig+0x66>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a20      	ldr	r2, [pc, #128]	; (8009678 <TIM_OC3_SetConfig+0xe4>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d10d      	bne.n	8009616 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009600:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	021b      	lsls	r3, r3, #8
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	4313      	orrs	r3, r2
 800960c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a16      	ldr	r2, [pc, #88]	; (8009674 <TIM_OC3_SetConfig+0xe0>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d003      	beq.n	8009626 <TIM_OC3_SetConfig+0x92>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a15      	ldr	r2, [pc, #84]	; (8009678 <TIM_OC3_SetConfig+0xe4>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d113      	bne.n	800964e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800962c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009634:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	011b      	lsls	r3, r3, #4
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	4313      	orrs	r3, r2
 8009640:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	011b      	lsls	r3, r3, #4
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	4313      	orrs	r3, r2
 800964c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	621a      	str	r2, [r3, #32]
}
 8009668:	bf00      	nop
 800966a:	371c      	adds	r7, #28
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	40010000 	.word	0x40010000
 8009678:	40010400 	.word	0x40010400

0800967c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800967c:	b480      	push	{r7}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	021b      	lsls	r3, r3, #8
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	4313      	orrs	r3, r2
 80096be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	031b      	lsls	r3, r3, #12
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a12      	ldr	r2, [pc, #72]	; (8009720 <TIM_OC4_SetConfig+0xa4>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d003      	beq.n	80096e4 <TIM_OC4_SetConfig+0x68>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a11      	ldr	r2, [pc, #68]	; (8009724 <TIM_OC4_SetConfig+0xa8>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d109      	bne.n	80096f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	019b      	lsls	r3, r3, #6
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	621a      	str	r2, [r3, #32]
}
 8009712:	bf00      	nop
 8009714:	371c      	adds	r7, #28
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	40010000 	.word	0x40010000
 8009724:	40010400 	.word	0x40010400

08009728 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009728:	b480      	push	{r7}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
 8009734:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	f023 0201 	bic.w	r2, r3, #1
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4a28      	ldr	r2, [pc, #160]	; (80097f4 <TIM_TI1_SetConfig+0xcc>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d01b      	beq.n	800978e <TIM_TI1_SetConfig+0x66>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800975c:	d017      	beq.n	800978e <TIM_TI1_SetConfig+0x66>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	4a25      	ldr	r2, [pc, #148]	; (80097f8 <TIM_TI1_SetConfig+0xd0>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d013      	beq.n	800978e <TIM_TI1_SetConfig+0x66>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4a24      	ldr	r2, [pc, #144]	; (80097fc <TIM_TI1_SetConfig+0xd4>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00f      	beq.n	800978e <TIM_TI1_SetConfig+0x66>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	4a23      	ldr	r2, [pc, #140]	; (8009800 <TIM_TI1_SetConfig+0xd8>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00b      	beq.n	800978e <TIM_TI1_SetConfig+0x66>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	4a22      	ldr	r2, [pc, #136]	; (8009804 <TIM_TI1_SetConfig+0xdc>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d007      	beq.n	800978e <TIM_TI1_SetConfig+0x66>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4a21      	ldr	r2, [pc, #132]	; (8009808 <TIM_TI1_SetConfig+0xe0>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d003      	beq.n	800978e <TIM_TI1_SetConfig+0x66>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	4a20      	ldr	r2, [pc, #128]	; (800980c <TIM_TI1_SetConfig+0xe4>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d101      	bne.n	8009792 <TIM_TI1_SetConfig+0x6a>
 800978e:	2301      	movs	r3, #1
 8009790:	e000      	b.n	8009794 <TIM_TI1_SetConfig+0x6c>
 8009792:	2300      	movs	r3, #0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d008      	beq.n	80097aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f023 0303 	bic.w	r3, r3, #3
 800979e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80097a0:	697a      	ldr	r2, [r7, #20]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	617b      	str	r3, [r7, #20]
 80097a8:	e003      	b.n	80097b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f043 0301 	orr.w	r3, r3, #1
 80097b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	011b      	lsls	r3, r3, #4
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f023 030a 	bic.w	r3, r3, #10
 80097cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	f003 030a 	and.w	r3, r3, #10
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	621a      	str	r2, [r3, #32]
}
 80097e6:	bf00      	nop
 80097e8:	371c      	adds	r7, #28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40000400 	.word	0x40000400
 80097fc:	40000800 	.word	0x40000800
 8009800:	40000c00 	.word	0x40000c00
 8009804:	40010400 	.word	0x40010400
 8009808:	40014000 	.word	0x40014000
 800980c:	40001800 	.word	0x40001800

08009810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	f023 0201 	bic.w	r2, r3, #1
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800983a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	4313      	orrs	r3, r2
 8009844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f023 030a 	bic.w	r3, r3, #10
 800984c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	4313      	orrs	r3, r2
 8009854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	621a      	str	r2, [r3, #32]
}
 8009862:	bf00      	nop
 8009864:	371c      	adds	r7, #28
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800986e:	b480      	push	{r7}
 8009870:	b087      	sub	sp, #28
 8009872:	af00      	add	r7, sp, #0
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	607a      	str	r2, [r7, #4]
 800987a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	f023 0210 	bic.w	r2, r3, #16
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800989a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	021b      	lsls	r3, r3, #8
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	031b      	lsls	r3, r3, #12
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	011b      	lsls	r3, r3, #4
 80098c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	621a      	str	r2, [r3, #32]
}
 80098dc:	bf00      	nop
 80098de:	371c      	adds	r7, #28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	f023 0210 	bic.w	r2, r3, #16
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009912:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	031b      	lsls	r3, r3, #12
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009924:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	011b      	lsls	r3, r3, #4
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	4313      	orrs	r3, r2
 800992e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	621a      	str	r2, [r3, #32]
}
 800993c:	bf00      	nop
 800993e:	371c      	adds	r7, #28
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6a1b      	ldr	r3, [r3, #32]
 800996c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f023 0303 	bic.w	r3, r3, #3
 8009974:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4313      	orrs	r3, r2
 800997c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009984:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	011b      	lsls	r3, r3, #4
 800998a:	b2db      	uxtb	r3, r3
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	4313      	orrs	r3, r2
 8009990:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009998:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	021b      	lsls	r3, r3, #8
 800999e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	621a      	str	r2, [r3, #32]
}
 80099b4:	bf00      	nop
 80099b6:	371c      	adds	r7, #28
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	021b      	lsls	r3, r3, #8
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	031b      	lsls	r3, r3, #12
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009a12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	031b      	lsls	r3, r3, #12
 8009a18:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009a1c:	693a      	ldr	r2, [r7, #16]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	621a      	str	r2, [r3, #32]
}
 8009a2e:	bf00      	nop
 8009a30:	371c      	adds	r7, #28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr

08009a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b085      	sub	sp, #20
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	f043 0307 	orr.w	r3, r3, #7
 8009a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	609a      	str	r2, [r3, #8]
}
 8009a64:	bf00      	nop
 8009a66:	3714      	adds	r7, #20
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	021a      	lsls	r2, r3, #8
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	431a      	orrs	r2, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	609a      	str	r2, [r3, #8]
}
 8009aa4:	bf00      	nop
 8009aa6:	371c      	adds	r7, #28
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	f003 031f 	and.w	r3, r3, #31
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1a      	ldr	r2, [r3, #32]
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	401a      	ands	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a1a      	ldr	r2, [r3, #32]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	f003 031f 	and.w	r3, r3, #31
 8009ae2:	6879      	ldr	r1, [r7, #4]
 8009ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	621a      	str	r2, [r3, #32]
}
 8009aee:	bf00      	nop
 8009af0:	371c      	adds	r7, #28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
	...

08009afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d101      	bne.n	8009b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b10:	2302      	movs	r3, #2
 8009b12:	e05a      	b.n	8009bca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2202      	movs	r2, #2
 8009b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a21      	ldr	r2, [pc, #132]	; (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d022      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b60:	d01d      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a1d      	ldr	r2, [pc, #116]	; (8009bdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d018      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a1b      	ldr	r2, [pc, #108]	; (8009be0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d013      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a1a      	ldr	r2, [pc, #104]	; (8009be4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d00e      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a18      	ldr	r2, [pc, #96]	; (8009be8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d009      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a17      	ldr	r2, [pc, #92]	; (8009bec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d004      	beq.n	8009b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a15      	ldr	r2, [pc, #84]	; (8009bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d10c      	bne.n	8009bb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68ba      	ldr	r2, [r7, #8]
 8009bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	40010000 	.word	0x40010000
 8009bdc:	40000400 	.word	0x40000400
 8009be0:	40000800 	.word	0x40000800
 8009be4:	40000c00 	.word	0x40000c00
 8009be8:	40010400 	.word	0x40010400
 8009bec:	40014000 	.word	0x40014000
 8009bf0:	40001800 	.word	0x40001800

08009bf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d101      	bne.n	8009c10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	e03d      	b.n	8009c8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	69db      	ldr	r3, [r3, #28]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e03f      	b.n	8009d52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d106      	bne.n	8009cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f7fa f884 	bl	8003df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2224      	movs	r2, #36	; 0x24
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68da      	ldr	r2, [r3, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f905 	bl	8009f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	691a      	ldr	r2, [r3, #16]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695a      	ldr	r2, [r3, #20]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68da      	ldr	r2, [r3, #12]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b08a      	sub	sp, #40	; 0x28
 8009d5e:	af02      	add	r7, sp, #8
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	603b      	str	r3, [r7, #0]
 8009d66:	4613      	mov	r3, r2
 8009d68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b20      	cmp	r3, #32
 8009d78:	d17c      	bne.n	8009e74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <HAL_UART_Transmit+0x2c>
 8009d80:	88fb      	ldrh	r3, [r7, #6]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e075      	b.n	8009e76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <HAL_UART_Transmit+0x3e>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e06e      	b.n	8009e76 <HAL_UART_Transmit+0x11c>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2221      	movs	r2, #33	; 0x21
 8009daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009dae:	f7fa fbd5 	bl	800455c <HAL_GetTick>
 8009db2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	88fa      	ldrh	r2, [r7, #6]
 8009db8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	88fa      	ldrh	r2, [r7, #6]
 8009dbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dc8:	d108      	bne.n	8009ddc <HAL_UART_Transmit+0x82>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d104      	bne.n	8009ddc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	61bb      	str	r3, [r7, #24]
 8009dda:	e003      	b.n	8009de4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009dec:	e02a      	b.n	8009e44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2200      	movs	r2, #0
 8009df6:	2180      	movs	r1, #128	; 0x80
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 f840 	bl	8009e7e <UART_WaitOnFlagUntilTimeout>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e036      	b.n	8009e76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10b      	bne.n	8009e26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	3302      	adds	r3, #2
 8009e22:	61bb      	str	r3, [r7, #24]
 8009e24:	e007      	b.n	8009e36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	781a      	ldrb	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	3301      	adds	r3, #1
 8009e34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1cf      	bne.n	8009dee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2200      	movs	r2, #0
 8009e56:	2140      	movs	r1, #64	; 0x40
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 f810 	bl	8009e7e <UART_WaitOnFlagUntilTimeout>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e006      	b.n	8009e76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	e000      	b.n	8009e76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009e74:	2302      	movs	r3, #2
  }
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	60b9      	str	r1, [r7, #8]
 8009e88:	603b      	str	r3, [r7, #0]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e8e:	e02c      	b.n	8009eea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e96:	d028      	beq.n	8009eea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d007      	beq.n	8009eae <UART_WaitOnFlagUntilTimeout+0x30>
 8009e9e:	f7fa fb5d 	bl	800455c <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	69ba      	ldr	r2, [r7, #24]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d21d      	bcs.n	8009eea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68da      	ldr	r2, [r3, #12]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ebc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	695a      	ldr	r2, [r3, #20]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f022 0201 	bic.w	r2, r2, #1
 8009ecc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2220      	movs	r2, #32
 8009eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e00f      	b.n	8009f0a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	bf0c      	ite	eq
 8009efa:	2301      	moveq	r3, #1
 8009efc:	2300      	movne	r3, #0
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	461a      	mov	r2, r3
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d0c3      	beq.n	8009e90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
	...

08009f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f18:	b09f      	sub	sp, #124	; 0x7c
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f2a:	68d9      	ldr	r1, [r3, #12]
 8009f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	ea40 0301 	orr.w	r3, r0, r1
 8009f34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	431a      	orrs	r2, r3
 8009f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009f58:	f021 010c 	bic.w	r1, r1, #12
 8009f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f62:	430b      	orrs	r3, r1
 8009f64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f72:	6999      	ldr	r1, [r3, #24]
 8009f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	ea40 0301 	orr.w	r3, r0, r1
 8009f7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	4bc5      	ldr	r3, [pc, #788]	; (800a298 <UART_SetConfig+0x384>)
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d004      	beq.n	8009f92 <UART_SetConfig+0x7e>
 8009f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	4bc3      	ldr	r3, [pc, #780]	; (800a29c <UART_SetConfig+0x388>)
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d103      	bne.n	8009f9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f92:	f7fe fa11 	bl	80083b8 <HAL_RCC_GetPCLK2Freq>
 8009f96:	6778      	str	r0, [r7, #116]	; 0x74
 8009f98:	e002      	b.n	8009fa0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f9a:	f7fe f9f9 	bl	8008390 <HAL_RCC_GetPCLK1Freq>
 8009f9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fa8:	f040 80b6 	bne.w	800a118 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fae:	461c      	mov	r4, r3
 8009fb0:	f04f 0500 	mov.w	r5, #0
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	462b      	mov	r3, r5
 8009fb8:	1891      	adds	r1, r2, r2
 8009fba:	6439      	str	r1, [r7, #64]	; 0x40
 8009fbc:	415b      	adcs	r3, r3
 8009fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8009fc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009fc4:	1912      	adds	r2, r2, r4
 8009fc6:	eb45 0303 	adc.w	r3, r5, r3
 8009fca:	f04f 0000 	mov.w	r0, #0
 8009fce:	f04f 0100 	mov.w	r1, #0
 8009fd2:	00d9      	lsls	r1, r3, #3
 8009fd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009fd8:	00d0      	lsls	r0, r2, #3
 8009fda:	4602      	mov	r2, r0
 8009fdc:	460b      	mov	r3, r1
 8009fde:	1911      	adds	r1, r2, r4
 8009fe0:	6639      	str	r1, [r7, #96]	; 0x60
 8009fe2:	416b      	adcs	r3, r5
 8009fe4:	667b      	str	r3, [r7, #100]	; 0x64
 8009fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	461a      	mov	r2, r3
 8009fec:	f04f 0300 	mov.w	r3, #0
 8009ff0:	1891      	adds	r1, r2, r2
 8009ff2:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ff4:	415b      	adcs	r3, r3
 8009ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009ffc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a000:	f7f6 fe42 	bl	8000c88 <__aeabi_uldivmod>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	4ba5      	ldr	r3, [pc, #660]	; (800a2a0 <UART_SetConfig+0x38c>)
 800a00a:	fba3 2302 	umull	r2, r3, r3, r2
 800a00e:	095b      	lsrs	r3, r3, #5
 800a010:	011e      	lsls	r6, r3, #4
 800a012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a014:	461c      	mov	r4, r3
 800a016:	f04f 0500 	mov.w	r5, #0
 800a01a:	4622      	mov	r2, r4
 800a01c:	462b      	mov	r3, r5
 800a01e:	1891      	adds	r1, r2, r2
 800a020:	6339      	str	r1, [r7, #48]	; 0x30
 800a022:	415b      	adcs	r3, r3
 800a024:	637b      	str	r3, [r7, #52]	; 0x34
 800a026:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a02a:	1912      	adds	r2, r2, r4
 800a02c:	eb45 0303 	adc.w	r3, r5, r3
 800a030:	f04f 0000 	mov.w	r0, #0
 800a034:	f04f 0100 	mov.w	r1, #0
 800a038:	00d9      	lsls	r1, r3, #3
 800a03a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a03e:	00d0      	lsls	r0, r2, #3
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	1911      	adds	r1, r2, r4
 800a046:	65b9      	str	r1, [r7, #88]	; 0x58
 800a048:	416b      	adcs	r3, r5
 800a04a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	461a      	mov	r2, r3
 800a052:	f04f 0300 	mov.w	r3, #0
 800a056:	1891      	adds	r1, r2, r2
 800a058:	62b9      	str	r1, [r7, #40]	; 0x28
 800a05a:	415b      	adcs	r3, r3
 800a05c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a05e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a062:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a066:	f7f6 fe0f 	bl	8000c88 <__aeabi_uldivmod>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	4b8c      	ldr	r3, [pc, #560]	; (800a2a0 <UART_SetConfig+0x38c>)
 800a070:	fba3 1302 	umull	r1, r3, r3, r2
 800a074:	095b      	lsrs	r3, r3, #5
 800a076:	2164      	movs	r1, #100	; 0x64
 800a078:	fb01 f303 	mul.w	r3, r1, r3
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	00db      	lsls	r3, r3, #3
 800a080:	3332      	adds	r3, #50	; 0x32
 800a082:	4a87      	ldr	r2, [pc, #540]	; (800a2a0 <UART_SetConfig+0x38c>)
 800a084:	fba2 2303 	umull	r2, r3, r2, r3
 800a088:	095b      	lsrs	r3, r3, #5
 800a08a:	005b      	lsls	r3, r3, #1
 800a08c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a090:	441e      	add	r6, r3
 800a092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a094:	4618      	mov	r0, r3
 800a096:	f04f 0100 	mov.w	r1, #0
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	1894      	adds	r4, r2, r2
 800a0a0:	623c      	str	r4, [r7, #32]
 800a0a2:	415b      	adcs	r3, r3
 800a0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a0aa:	1812      	adds	r2, r2, r0
 800a0ac:	eb41 0303 	adc.w	r3, r1, r3
 800a0b0:	f04f 0400 	mov.w	r4, #0
 800a0b4:	f04f 0500 	mov.w	r5, #0
 800a0b8:	00dd      	lsls	r5, r3, #3
 800a0ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a0be:	00d4      	lsls	r4, r2, #3
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	462b      	mov	r3, r5
 800a0c4:	1814      	adds	r4, r2, r0
 800a0c6:	653c      	str	r4, [r7, #80]	; 0x50
 800a0c8:	414b      	adcs	r3, r1
 800a0ca:	657b      	str	r3, [r7, #84]	; 0x54
 800a0cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	f04f 0300 	mov.w	r3, #0
 800a0d6:	1891      	adds	r1, r2, r2
 800a0d8:	61b9      	str	r1, [r7, #24]
 800a0da:	415b      	adcs	r3, r3
 800a0dc:	61fb      	str	r3, [r7, #28]
 800a0de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a0e6:	f7f6 fdcf 	bl	8000c88 <__aeabi_uldivmod>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4b6c      	ldr	r3, [pc, #432]	; (800a2a0 <UART_SetConfig+0x38c>)
 800a0f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a0f4:	095b      	lsrs	r3, r3, #5
 800a0f6:	2164      	movs	r1, #100	; 0x64
 800a0f8:	fb01 f303 	mul.w	r3, r1, r3
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	00db      	lsls	r3, r3, #3
 800a100:	3332      	adds	r3, #50	; 0x32
 800a102:	4a67      	ldr	r2, [pc, #412]	; (800a2a0 <UART_SetConfig+0x38c>)
 800a104:	fba2 2303 	umull	r2, r3, r2, r3
 800a108:	095b      	lsrs	r3, r3, #5
 800a10a:	f003 0207 	and.w	r2, r3, #7
 800a10e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4432      	add	r2, r6
 800a114:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a116:	e0b9      	b.n	800a28c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a11a:	461c      	mov	r4, r3
 800a11c:	f04f 0500 	mov.w	r5, #0
 800a120:	4622      	mov	r2, r4
 800a122:	462b      	mov	r3, r5
 800a124:	1891      	adds	r1, r2, r2
 800a126:	6139      	str	r1, [r7, #16]
 800a128:	415b      	adcs	r3, r3
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a130:	1912      	adds	r2, r2, r4
 800a132:	eb45 0303 	adc.w	r3, r5, r3
 800a136:	f04f 0000 	mov.w	r0, #0
 800a13a:	f04f 0100 	mov.w	r1, #0
 800a13e:	00d9      	lsls	r1, r3, #3
 800a140:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a144:	00d0      	lsls	r0, r2, #3
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	eb12 0804 	adds.w	r8, r2, r4
 800a14e:	eb43 0905 	adc.w	r9, r3, r5
 800a152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	4618      	mov	r0, r3
 800a158:	f04f 0100 	mov.w	r1, #0
 800a15c:	f04f 0200 	mov.w	r2, #0
 800a160:	f04f 0300 	mov.w	r3, #0
 800a164:	008b      	lsls	r3, r1, #2
 800a166:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a16a:	0082      	lsls	r2, r0, #2
 800a16c:	4640      	mov	r0, r8
 800a16e:	4649      	mov	r1, r9
 800a170:	f7f6 fd8a 	bl	8000c88 <__aeabi_uldivmod>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4b49      	ldr	r3, [pc, #292]	; (800a2a0 <UART_SetConfig+0x38c>)
 800a17a:	fba3 2302 	umull	r2, r3, r3, r2
 800a17e:	095b      	lsrs	r3, r3, #5
 800a180:	011e      	lsls	r6, r3, #4
 800a182:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a184:	4618      	mov	r0, r3
 800a186:	f04f 0100 	mov.w	r1, #0
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	1894      	adds	r4, r2, r2
 800a190:	60bc      	str	r4, [r7, #8]
 800a192:	415b      	adcs	r3, r3
 800a194:	60fb      	str	r3, [r7, #12]
 800a196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a19a:	1812      	adds	r2, r2, r0
 800a19c:	eb41 0303 	adc.w	r3, r1, r3
 800a1a0:	f04f 0400 	mov.w	r4, #0
 800a1a4:	f04f 0500 	mov.w	r5, #0
 800a1a8:	00dd      	lsls	r5, r3, #3
 800a1aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a1ae:	00d4      	lsls	r4, r2, #3
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	462b      	mov	r3, r5
 800a1b4:	1814      	adds	r4, r2, r0
 800a1b6:	64bc      	str	r4, [r7, #72]	; 0x48
 800a1b8:	414b      	adcs	r3, r1
 800a1ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f04f 0100 	mov.w	r1, #0
 800a1c6:	f04f 0200 	mov.w	r2, #0
 800a1ca:	f04f 0300 	mov.w	r3, #0
 800a1ce:	008b      	lsls	r3, r1, #2
 800a1d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a1d4:	0082      	lsls	r2, r0, #2
 800a1d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a1da:	f7f6 fd55 	bl	8000c88 <__aeabi_uldivmod>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	4b2f      	ldr	r3, [pc, #188]	; (800a2a0 <UART_SetConfig+0x38c>)
 800a1e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a1e8:	095b      	lsrs	r3, r3, #5
 800a1ea:	2164      	movs	r1, #100	; 0x64
 800a1ec:	fb01 f303 	mul.w	r3, r1, r3
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	011b      	lsls	r3, r3, #4
 800a1f4:	3332      	adds	r3, #50	; 0x32
 800a1f6:	4a2a      	ldr	r2, [pc, #168]	; (800a2a0 <UART_SetConfig+0x38c>)
 800a1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1fc:	095b      	lsrs	r3, r3, #5
 800a1fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a202:	441e      	add	r6, r3
 800a204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a206:	4618      	mov	r0, r3
 800a208:	f04f 0100 	mov.w	r1, #0
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	1894      	adds	r4, r2, r2
 800a212:	603c      	str	r4, [r7, #0]
 800a214:	415b      	adcs	r3, r3
 800a216:	607b      	str	r3, [r7, #4]
 800a218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a21c:	1812      	adds	r2, r2, r0
 800a21e:	eb41 0303 	adc.w	r3, r1, r3
 800a222:	f04f 0400 	mov.w	r4, #0
 800a226:	f04f 0500 	mov.w	r5, #0
 800a22a:	00dd      	lsls	r5, r3, #3
 800a22c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a230:	00d4      	lsls	r4, r2, #3
 800a232:	4622      	mov	r2, r4
 800a234:	462b      	mov	r3, r5
 800a236:	eb12 0a00 	adds.w	sl, r2, r0
 800a23a:	eb43 0b01 	adc.w	fp, r3, r1
 800a23e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	4618      	mov	r0, r3
 800a244:	f04f 0100 	mov.w	r1, #0
 800a248:	f04f 0200 	mov.w	r2, #0
 800a24c:	f04f 0300 	mov.w	r3, #0
 800a250:	008b      	lsls	r3, r1, #2
 800a252:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a256:	0082      	lsls	r2, r0, #2
 800a258:	4650      	mov	r0, sl
 800a25a:	4659      	mov	r1, fp
 800a25c:	f7f6 fd14 	bl	8000c88 <__aeabi_uldivmod>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	4b0e      	ldr	r3, [pc, #56]	; (800a2a0 <UART_SetConfig+0x38c>)
 800a266:	fba3 1302 	umull	r1, r3, r3, r2
 800a26a:	095b      	lsrs	r3, r3, #5
 800a26c:	2164      	movs	r1, #100	; 0x64
 800a26e:	fb01 f303 	mul.w	r3, r1, r3
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	011b      	lsls	r3, r3, #4
 800a276:	3332      	adds	r3, #50	; 0x32
 800a278:	4a09      	ldr	r2, [pc, #36]	; (800a2a0 <UART_SetConfig+0x38c>)
 800a27a:	fba2 2303 	umull	r2, r3, r2, r3
 800a27e:	095b      	lsrs	r3, r3, #5
 800a280:	f003 020f 	and.w	r2, r3, #15
 800a284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4432      	add	r2, r6
 800a28a:	609a      	str	r2, [r3, #8]
}
 800a28c:	bf00      	nop
 800a28e:	377c      	adds	r7, #124	; 0x7c
 800a290:	46bd      	mov	sp, r7
 800a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a296:	bf00      	nop
 800a298:	40011000 	.word	0x40011000
 800a29c:	40011400 	.word	0x40011400
 800a2a0:	51eb851f 	.word	0x51eb851f

0800a2a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	f107 001c 	add.w	r0, r7, #28
 800a2b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d122      	bne.n	800a302 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a2d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d105      	bne.n	800a2f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f001 fac6 	bl	800b888 <USB_CoreReset>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	73fb      	strb	r3, [r7, #15]
 800a300:	e01a      	b.n	800a338 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f001 faba 	bl	800b888 <USB_CoreReset>
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d106      	bne.n	800a32c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a322:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	639a      	str	r2, [r3, #56]	; 0x38
 800a32a:	e005      	b.n	800a338 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a330:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d10b      	bne.n	800a356 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	f043 0206 	orr.w	r2, r3, #6
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f043 0220 	orr.w	r2, r3, #32
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a356:	7bfb      	ldrb	r3, [r7, #15]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a362:	b004      	add	sp, #16
 800a364:	4770      	bx	lr
	...

0800a368 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a368:	b480      	push	{r7}
 800a36a:	b087      	sub	sp, #28
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	4613      	mov	r3, r2
 800a374:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a376:	79fb      	ldrb	r3, [r7, #7]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d165      	bne.n	800a448 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	4a41      	ldr	r2, [pc, #260]	; (800a484 <USB_SetTurnaroundTime+0x11c>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d906      	bls.n	800a392 <USB_SetTurnaroundTime+0x2a>
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	4a40      	ldr	r2, [pc, #256]	; (800a488 <USB_SetTurnaroundTime+0x120>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d202      	bcs.n	800a392 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a38c:	230f      	movs	r3, #15
 800a38e:	617b      	str	r3, [r7, #20]
 800a390:	e062      	b.n	800a458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	4a3c      	ldr	r2, [pc, #240]	; (800a488 <USB_SetTurnaroundTime+0x120>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d306      	bcc.n	800a3a8 <USB_SetTurnaroundTime+0x40>
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	4a3b      	ldr	r2, [pc, #236]	; (800a48c <USB_SetTurnaroundTime+0x124>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d202      	bcs.n	800a3a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a3a2:	230e      	movs	r3, #14
 800a3a4:	617b      	str	r3, [r7, #20]
 800a3a6:	e057      	b.n	800a458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	4a38      	ldr	r2, [pc, #224]	; (800a48c <USB_SetTurnaroundTime+0x124>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d306      	bcc.n	800a3be <USB_SetTurnaroundTime+0x56>
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	4a37      	ldr	r2, [pc, #220]	; (800a490 <USB_SetTurnaroundTime+0x128>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d202      	bcs.n	800a3be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a3b8:	230d      	movs	r3, #13
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	e04c      	b.n	800a458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	4a33      	ldr	r2, [pc, #204]	; (800a490 <USB_SetTurnaroundTime+0x128>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d306      	bcc.n	800a3d4 <USB_SetTurnaroundTime+0x6c>
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	4a32      	ldr	r2, [pc, #200]	; (800a494 <USB_SetTurnaroundTime+0x12c>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d802      	bhi.n	800a3d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a3ce:	230c      	movs	r3, #12
 800a3d0:	617b      	str	r3, [r7, #20]
 800a3d2:	e041      	b.n	800a458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	4a2f      	ldr	r2, [pc, #188]	; (800a494 <USB_SetTurnaroundTime+0x12c>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d906      	bls.n	800a3ea <USB_SetTurnaroundTime+0x82>
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	4a2e      	ldr	r2, [pc, #184]	; (800a498 <USB_SetTurnaroundTime+0x130>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d802      	bhi.n	800a3ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a3e4:	230b      	movs	r3, #11
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	e036      	b.n	800a458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	4a2a      	ldr	r2, [pc, #168]	; (800a498 <USB_SetTurnaroundTime+0x130>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d906      	bls.n	800a400 <USB_SetTurnaroundTime+0x98>
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	4a29      	ldr	r2, [pc, #164]	; (800a49c <USB_SetTurnaroundTime+0x134>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d802      	bhi.n	800a400 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a3fa:	230a      	movs	r3, #10
 800a3fc:	617b      	str	r3, [r7, #20]
 800a3fe:	e02b      	b.n	800a458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	4a26      	ldr	r2, [pc, #152]	; (800a49c <USB_SetTurnaroundTime+0x134>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d906      	bls.n	800a416 <USB_SetTurnaroundTime+0xae>
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	4a25      	ldr	r2, [pc, #148]	; (800a4a0 <USB_SetTurnaroundTime+0x138>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d202      	bcs.n	800a416 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a410:	2309      	movs	r3, #9
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	e020      	b.n	800a458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	4a21      	ldr	r2, [pc, #132]	; (800a4a0 <USB_SetTurnaroundTime+0x138>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d306      	bcc.n	800a42c <USB_SetTurnaroundTime+0xc4>
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	4a20      	ldr	r2, [pc, #128]	; (800a4a4 <USB_SetTurnaroundTime+0x13c>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d802      	bhi.n	800a42c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a426:	2308      	movs	r3, #8
 800a428:	617b      	str	r3, [r7, #20]
 800a42a:	e015      	b.n	800a458 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4a1d      	ldr	r2, [pc, #116]	; (800a4a4 <USB_SetTurnaroundTime+0x13c>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d906      	bls.n	800a442 <USB_SetTurnaroundTime+0xda>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	4a1c      	ldr	r2, [pc, #112]	; (800a4a8 <USB_SetTurnaroundTime+0x140>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d202      	bcs.n	800a442 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a43c:	2307      	movs	r3, #7
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	e00a      	b.n	800a458 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a442:	2306      	movs	r3, #6
 800a444:	617b      	str	r3, [r7, #20]
 800a446:	e007      	b.n	800a458 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d102      	bne.n	800a454 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a44e:	2309      	movs	r3, #9
 800a450:	617b      	str	r3, [r7, #20]
 800a452:	e001      	b.n	800a458 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a454:	2309      	movs	r3, #9
 800a456:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	68da      	ldr	r2, [r3, #12]
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	029b      	lsls	r3, r3, #10
 800a46c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a470:	431a      	orrs	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	371c      	adds	r7, #28
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	00d8acbf 	.word	0x00d8acbf
 800a488:	00e4e1c0 	.word	0x00e4e1c0
 800a48c:	00f42400 	.word	0x00f42400
 800a490:	01067380 	.word	0x01067380
 800a494:	011a499f 	.word	0x011a499f
 800a498:	01312cff 	.word	0x01312cff
 800a49c:	014ca43f 	.word	0x014ca43f
 800a4a0:	016e3600 	.word	0x016e3600
 800a4a4:	01a6ab1f 	.word	0x01a6ab1f
 800a4a8:	01e84800 	.word	0x01e84800

0800a4ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f043 0201 	orr.w	r2, r3, #1
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b083      	sub	sp, #12
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f023 0201 	bic.w	r2, r3, #1
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a508:	78fb      	ldrb	r3, [r7, #3]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d106      	bne.n	800a51c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	60da      	str	r2, [r3, #12]
 800a51a:	e00b      	b.n	800a534 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a51c:	78fb      	ldrb	r3, [r7, #3]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d106      	bne.n	800a530 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	60da      	str	r2, [r3, #12]
 800a52e:	e001      	b.n	800a534 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e003      	b.n	800a53c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a534:	2032      	movs	r0, #50	; 0x32
 800a536:	f7fa f81d 	bl	8004574 <HAL_Delay>

  return HAL_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a544:	b084      	sub	sp, #16
 800a546:	b580      	push	{r7, lr}
 800a548:	b086      	sub	sp, #24
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
 800a54e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a55e:	2300      	movs	r3, #0
 800a560:	613b      	str	r3, [r7, #16]
 800a562:	e009      	b.n	800a578 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	3340      	adds	r3, #64	; 0x40
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	3301      	adds	r3, #1
 800a576:	613b      	str	r3, [r7, #16]
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2b0e      	cmp	r3, #14
 800a57c:	d9f2      	bls.n	800a564 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a580:	2b00      	cmp	r3, #0
 800a582:	d11c      	bne.n	800a5be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a592:	f043 0302 	orr.w	r3, r3, #2
 800a596:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	639a      	str	r2, [r3, #56]	; 0x38
 800a5bc:	e00b      	b.n	800a5d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5dc:	461a      	mov	r2, r3
 800a5de:	2300      	movs	r3, #0
 800a5e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	680b      	ldr	r3, [r1, #0]
 800a5f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d10c      	bne.n	800a616 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d104      	bne.n	800a60c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a602:	2100      	movs	r1, #0
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f949 	bl	800a89c <USB_SetDevSpeed>
 800a60a:	e008      	b.n	800a61e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a60c:	2101      	movs	r1, #1
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f944 	bl	800a89c <USB_SetDevSpeed>
 800a614:	e003      	b.n	800a61e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a616:	2103      	movs	r1, #3
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 f93f 	bl	800a89c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a61e:	2110      	movs	r1, #16
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f8f3 	bl	800a80c <USB_FlushTxFifo>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f911 	bl	800a858 <USB_FlushRxFifo>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a646:	461a      	mov	r2, r3
 800a648:	2300      	movs	r3, #0
 800a64a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a652:	461a      	mov	r2, r3
 800a654:	2300      	movs	r3, #0
 800a656:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a65e:	461a      	mov	r2, r3
 800a660:	2300      	movs	r3, #0
 800a662:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a664:	2300      	movs	r3, #0
 800a666:	613b      	str	r3, [r7, #16]
 800a668:	e043      	b.n	800a6f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	015a      	lsls	r2, r3, #5
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4413      	add	r3, r2
 800a672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a67c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a680:	d118      	bne.n	800a6b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10a      	bne.n	800a69e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	015a      	lsls	r2, r3, #5
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4413      	add	r3, r2
 800a690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a694:	461a      	mov	r2, r3
 800a696:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a69a:	6013      	str	r3, [r2, #0]
 800a69c:	e013      	b.n	800a6c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a6b0:	6013      	str	r3, [r2, #0]
 800a6b2:	e008      	b.n	800a6c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	015a      	lsls	r2, r3, #5
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	015a      	lsls	r2, r3, #5
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	4413      	add	r3, r2
 800a6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a6ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	613b      	str	r3, [r7, #16]
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d3b7      	bcc.n	800a66a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	613b      	str	r3, [r7, #16]
 800a6fe:	e043      	b.n	800a788 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a716:	d118      	bne.n	800a74a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10a      	bne.n	800a734 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	4413      	add	r3, r2
 800a726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a72a:	461a      	mov	r2, r3
 800a72c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	e013      	b.n	800a75c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a740:	461a      	mov	r2, r3
 800a742:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	e008      	b.n	800a75c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4413      	add	r3, r2
 800a752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a756:	461a      	mov	r2, r3
 800a758:	2300      	movs	r3, #0
 800a75a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	015a      	lsls	r2, r3, #5
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4413      	add	r3, r2
 800a764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a768:	461a      	mov	r2, r3
 800a76a:	2300      	movs	r3, #0
 800a76c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	4413      	add	r3, r2
 800a776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77a:	461a      	mov	r2, r3
 800a77c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a780:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	3301      	adds	r3, #1
 800a786:	613b      	str	r3, [r7, #16]
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d3b7      	bcc.n	800a700 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a79e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a7b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d105      	bne.n	800a7c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	f043 0210 	orr.w	r2, r3, #16
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	699a      	ldr	r2, [r3, #24]
 800a7c8:	4b0f      	ldr	r3, [pc, #60]	; (800a808 <USB_DevInit+0x2c4>)
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d005      	beq.n	800a7e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	f043 0208 	orr.w	r2, r3, #8
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d107      	bne.n	800a7f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7f0:	f043 0304 	orr.w	r3, r3, #4
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3718      	adds	r7, #24
 800a7fe:	46bd      	mov	sp, r7
 800a800:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a804:	b004      	add	sp, #16
 800a806:	4770      	bx	lr
 800a808:	803c3800 	.word	0x803c3800

0800a80c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a816:	2300      	movs	r3, #0
 800a818:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	019b      	lsls	r3, r3, #6
 800a81e:	f043 0220 	orr.w	r2, r3, #32
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3301      	adds	r3, #1
 800a82a:	60fb      	str	r3, [r7, #12]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4a09      	ldr	r2, [pc, #36]	; (800a854 <USB_FlushTxFifo+0x48>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d901      	bls.n	800a838 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e006      	b.n	800a846 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	f003 0320 	and.w	r3, r3, #32
 800a840:	2b20      	cmp	r3, #32
 800a842:	d0f0      	beq.n	800a826 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a844:	2300      	movs	r3, #0
}
 800a846:	4618      	mov	r0, r3
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	00030d40 	.word	0x00030d40

0800a858 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2210      	movs	r2, #16
 800a868:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60fb      	str	r3, [r7, #12]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4a09      	ldr	r2, [pc, #36]	; (800a898 <USB_FlushRxFifo+0x40>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d901      	bls.n	800a87c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e006      	b.n	800a88a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	f003 0310 	and.w	r3, r3, #16
 800a884:	2b10      	cmp	r3, #16
 800a886:	d0f0      	beq.n	800a86a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	00030d40 	.word	0x00030d40

0800a89c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	78fb      	ldrb	r3, [r7, #3]
 800a8b6:	68f9      	ldr	r1, [r7, #12]
 800a8b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b087      	sub	sp, #28
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	f003 0306 	and.w	r3, r3, #6
 800a8e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d102      	bne.n	800a8f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	75fb      	strb	r3, [r7, #23]
 800a8f2:	e00a      	b.n	800a90a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d002      	beq.n	800a900 <USB_GetDevSpeed+0x32>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b06      	cmp	r3, #6
 800a8fe:	d102      	bne.n	800a906 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a900:	2302      	movs	r3, #2
 800a902:	75fb      	strb	r3, [r7, #23]
 800a904:	e001      	b.n	800a90a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a906:	230f      	movs	r3, #15
 800a908:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	371c      	adds	r7, #28
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	785b      	ldrb	r3, [r3, #1]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d13a      	bne.n	800a9aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93a:	69da      	ldr	r2, [r3, #28]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	f003 030f 	and.w	r3, r3, #15
 800a944:	2101      	movs	r1, #1
 800a946:	fa01 f303 	lsl.w	r3, r1, r3
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	68f9      	ldr	r1, [r7, #12]
 800a94e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a952:	4313      	orrs	r3, r2
 800a954:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d155      	bne.n	800aa18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	015a      	lsls	r2, r3, #5
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	4413      	add	r3, r2
 800a974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	78db      	ldrb	r3, [r3, #3]
 800a986:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a988:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	059b      	lsls	r3, r3, #22
 800a98e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a990:	4313      	orrs	r3, r2
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	0151      	lsls	r1, r2, #5
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	440a      	add	r2, r1
 800a99a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a99e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9a6:	6013      	str	r3, [r2, #0]
 800a9a8:	e036      	b.n	800aa18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b0:	69da      	ldr	r2, [r3, #28]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	f003 030f 	and.w	r3, r3, #15
 800a9ba:	2101      	movs	r1, #1
 800a9bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a9c0:	041b      	lsls	r3, r3, #16
 800a9c2:	68f9      	ldr	r1, [r7, #12]
 800a9c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d11a      	bne.n	800aa18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	78db      	ldrb	r3, [r3, #3]
 800a9fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a9fe:	430b      	orrs	r3, r1
 800aa00:	4313      	orrs	r3, r2
 800aa02:	68ba      	ldr	r2, [r7, #8]
 800aa04:	0151      	lsls	r1, r2, #5
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	440a      	add	r2, r1
 800aa0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
	...

0800aa28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	785b      	ldrb	r3, [r3, #1]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d161      	bne.n	800ab08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	015a      	lsls	r2, r3, #5
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	4413      	add	r3, r2
 800aa4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa5a:	d11f      	bne.n	800aa9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	0151      	lsls	r1, r2, #5
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	440a      	add	r2, r1
 800aa72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aa7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	015a      	lsls	r2, r3, #5
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4413      	add	r3, r2
 800aa84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	0151      	lsls	r1, r2, #5
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	440a      	add	r2, r1
 800aa92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	f003 030f 	and.w	r3, r3, #15
 800aaac:	2101      	movs	r1, #1
 800aaae:	fa01 f303 	lsl.w	r3, r1, r3
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	43db      	mvns	r3, r3
 800aab6:	68f9      	ldr	r1, [r7, #12]
 800aab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aabc:	4013      	ands	r3, r2
 800aabe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac6:	69da      	ldr	r2, [r3, #28]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	f003 030f 	and.w	r3, r3, #15
 800aad0:	2101      	movs	r1, #1
 800aad2:	fa01 f303 	lsl.w	r3, r1, r3
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	43db      	mvns	r3, r3
 800aada:	68f9      	ldr	r1, [r7, #12]
 800aadc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aae0:	4013      	ands	r3, r2
 800aae2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	0159      	lsls	r1, r3, #5
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	440b      	add	r3, r1
 800aafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aafe:	4619      	mov	r1, r3
 800ab00:	4b35      	ldr	r3, [pc, #212]	; (800abd8 <USB_DeactivateEndpoint+0x1b0>)
 800ab02:	4013      	ands	r3, r2
 800ab04:	600b      	str	r3, [r1, #0]
 800ab06:	e060      	b.n	800abca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab1e:	d11f      	bne.n	800ab60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	0151      	lsls	r1, r2, #5
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	440a      	add	r2, r1
 800ab36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	0151      	lsls	r1, r2, #5
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	440a      	add	r2, r1
 800ab56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	f003 030f 	and.w	r3, r3, #15
 800ab70:	2101      	movs	r1, #1
 800ab72:	fa01 f303 	lsl.w	r3, r1, r3
 800ab76:	041b      	lsls	r3, r3, #16
 800ab78:	43db      	mvns	r3, r3
 800ab7a:	68f9      	ldr	r1, [r7, #12]
 800ab7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab80:	4013      	ands	r3, r2
 800ab82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab8a:	69da      	ldr	r2, [r3, #28]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	f003 030f 	and.w	r3, r3, #15
 800ab94:	2101      	movs	r1, #1
 800ab96:	fa01 f303 	lsl.w	r3, r1, r3
 800ab9a:	041b      	lsls	r3, r3, #16
 800ab9c:	43db      	mvns	r3, r3
 800ab9e:	68f9      	ldr	r1, [r7, #12]
 800aba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aba4:	4013      	ands	r3, r2
 800aba6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	015a      	lsls	r2, r3, #5
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4413      	add	r3, r2
 800abb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	0159      	lsls	r1, r3, #5
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	440b      	add	r3, r1
 800abbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc2:	4619      	mov	r1, r3
 800abc4:	4b05      	ldr	r3, [pc, #20]	; (800abdc <USB_DeactivateEndpoint+0x1b4>)
 800abc6:	4013      	ands	r3, r2
 800abc8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3714      	adds	r7, #20
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	ec337800 	.word	0xec337800
 800abdc:	eff37800 	.word	0xeff37800

0800abe0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b08a      	sub	sp, #40	; 0x28
 800abe4:	af02      	add	r7, sp, #8
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	4613      	mov	r3, r2
 800abec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	785b      	ldrb	r3, [r3, #1]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	f040 815c 	bne.w	800aeba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d132      	bne.n	800ac70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	015a      	lsls	r2, r3, #5
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	4413      	add	r3, r2
 800ac12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	0151      	lsls	r1, r2, #5
 800ac1c:	69fa      	ldr	r2, [r7, #28]
 800ac1e:	440a      	add	r2, r1
 800ac20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	015a      	lsls	r2, r3, #5
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	4413      	add	r3, r2
 800ac36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	69ba      	ldr	r2, [r7, #24]
 800ac3e:	0151      	lsls	r1, r2, #5
 800ac40:	69fa      	ldr	r2, [r7, #28]
 800ac42:	440a      	add	r2, r1
 800ac44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	0151      	lsls	r1, r2, #5
 800ac60:	69fa      	ldr	r2, [r7, #28]
 800ac62:	440a      	add	r2, r1
 800ac64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac68:	0cdb      	lsrs	r3, r3, #19
 800ac6a:	04db      	lsls	r3, r3, #19
 800ac6c:	6113      	str	r3, [r2, #16]
 800ac6e:	e074      	b.n	800ad5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	015a      	lsls	r2, r3, #5
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	4413      	add	r3, r2
 800ac78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	0151      	lsls	r1, r2, #5
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	440a      	add	r2, r1
 800ac86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac8a:	0cdb      	lsrs	r3, r3, #19
 800ac8c:	04db      	lsls	r3, r3, #19
 800ac8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	69ba      	ldr	r2, [r7, #24]
 800aca0:	0151      	lsls	r1, r2, #5
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	440a      	add	r2, r1
 800aca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acaa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800acae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800acb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	015a      	lsls	r2, r3, #5
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	4413      	add	r3, r2
 800acbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc0:	691a      	ldr	r2, [r3, #16]
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	6959      	ldr	r1, [r3, #20]
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	440b      	add	r3, r1
 800accc:	1e59      	subs	r1, r3, #1
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	fbb1 f3f3 	udiv	r3, r1, r3
 800acd6:	04d9      	lsls	r1, r3, #19
 800acd8:	4b9d      	ldr	r3, [pc, #628]	; (800af50 <USB_EPStartXfer+0x370>)
 800acda:	400b      	ands	r3, r1
 800acdc:	69b9      	ldr	r1, [r7, #24]
 800acde:	0148      	lsls	r0, r1, #5
 800ace0:	69f9      	ldr	r1, [r7, #28]
 800ace2:	4401      	add	r1, r0
 800ace4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ace8:	4313      	orrs	r3, r2
 800acea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf8:	691a      	ldr	r2, [r3, #16]
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	695b      	ldr	r3, [r3, #20]
 800acfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad02:	69b9      	ldr	r1, [r7, #24]
 800ad04:	0148      	lsls	r0, r1, #5
 800ad06:	69f9      	ldr	r1, [r7, #28]
 800ad08:	4401      	add	r1, r0
 800ad0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	78db      	ldrb	r3, [r3, #3]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d11f      	bne.n	800ad5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	015a      	lsls	r2, r3, #5
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	4413      	add	r3, r2
 800ad22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	0151      	lsls	r1, r2, #5
 800ad2c:	69fa      	ldr	r2, [r7, #28]
 800ad2e:	440a      	add	r2, r1
 800ad30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ad38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	015a      	lsls	r2, r3, #5
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	4413      	add	r3, r2
 800ad42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	69ba      	ldr	r2, [r7, #24]
 800ad4a:	0151      	lsls	r1, r2, #5
 800ad4c:	69fa      	ldr	r2, [r7, #28]
 800ad4e:	440a      	add	r2, r1
 800ad50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d14b      	bne.n	800adf8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d009      	beq.n	800ad7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad74:	461a      	mov	r2, r3
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	78db      	ldrb	r3, [r3, #3]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d128      	bne.n	800add6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d110      	bne.n	800adb6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	015a      	lsls	r2, r3, #5
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	69ba      	ldr	r2, [r7, #24]
 800ada4:	0151      	lsls	r1, r2, #5
 800ada6:	69fa      	ldr	r2, [r7, #28]
 800ada8:	440a      	add	r2, r1
 800adaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800adb2:	6013      	str	r3, [r2, #0]
 800adb4:	e00f      	b.n	800add6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	015a      	lsls	r2, r3, #5
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	4413      	add	r3, r2
 800adbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	69ba      	ldr	r2, [r7, #24]
 800adc6:	0151      	lsls	r1, r2, #5
 800adc8:	69fa      	ldr	r2, [r7, #28]
 800adca:	440a      	add	r2, r1
 800adcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800add0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800add4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	015a      	lsls	r2, r3, #5
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	4413      	add	r3, r2
 800adde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	0151      	lsls	r1, r2, #5
 800ade8:	69fa      	ldr	r2, [r7, #28]
 800adea:	440a      	add	r2, r1
 800adec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800adf4:	6013      	str	r3, [r2, #0]
 800adf6:	e12f      	b.n	800b058 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	015a      	lsls	r2, r3, #5
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	4413      	add	r3, r2
 800ae00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	69ba      	ldr	r2, [r7, #24]
 800ae08:	0151      	lsls	r1, r2, #5
 800ae0a:	69fa      	ldr	r2, [r7, #28]
 800ae0c:	440a      	add	r2, r1
 800ae0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	78db      	ldrb	r3, [r3, #3]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d015      	beq.n	800ae4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 8117 	beq.w	800b058 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	f003 030f 	and.w	r3, r3, #15
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae40:	69f9      	ldr	r1, [r7, #28]
 800ae42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae46:	4313      	orrs	r3, r2
 800ae48:	634b      	str	r3, [r1, #52]	; 0x34
 800ae4a:	e105      	b.n	800b058 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d110      	bne.n	800ae7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	69ba      	ldr	r2, [r7, #24]
 800ae6c:	0151      	lsls	r1, r2, #5
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	440a      	add	r2, r1
 800ae72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae7a:	6013      	str	r3, [r2, #0]
 800ae7c:	e00f      	b.n	800ae9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	015a      	lsls	r2, r3, #5
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	4413      	add	r3, r2
 800ae86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	69ba      	ldr	r2, [r7, #24]
 800ae8e:	0151      	lsls	r1, r2, #5
 800ae90:	69fa      	ldr	r2, [r7, #28]
 800ae92:	440a      	add	r2, r1
 800ae94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	68d9      	ldr	r1, [r3, #12]
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	781a      	ldrb	r2, [r3, #0]
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	b298      	uxth	r0, r3
 800aeac:	79fb      	ldrb	r3, [r7, #7]
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 fa2b 	bl	800b30e <USB_WritePacket>
 800aeb8:	e0ce      	b.n	800b058 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	015a      	lsls	r2, r3, #5
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	4413      	add	r3, r2
 800aec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	0151      	lsls	r1, r2, #5
 800aecc:	69fa      	ldr	r2, [r7, #28]
 800aece:	440a      	add	r2, r1
 800aed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aed4:	0cdb      	lsrs	r3, r3, #19
 800aed6:	04db      	lsls	r3, r3, #19
 800aed8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	015a      	lsls	r2, r3, #5
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	4413      	add	r3, r2
 800aee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	69ba      	ldr	r2, [r7, #24]
 800aeea:	0151      	lsls	r1, r2, #5
 800aeec:	69fa      	ldr	r2, [r7, #28]
 800aeee:	440a      	add	r2, r1
 800aef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aef4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aef8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aefc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	695b      	ldr	r3, [r3, #20]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d126      	bne.n	800af54 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	015a      	lsls	r2, r3, #5
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	4413      	add	r3, r2
 800af0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af12:	691a      	ldr	r2, [r3, #16]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af1c:	69b9      	ldr	r1, [r7, #24]
 800af1e:	0148      	lsls	r0, r1, #5
 800af20:	69f9      	ldr	r1, [r7, #28]
 800af22:	4401      	add	r1, r0
 800af24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af28:	4313      	orrs	r3, r2
 800af2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	015a      	lsls	r2, r3, #5
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	4413      	add	r3, r2
 800af34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	69ba      	ldr	r2, [r7, #24]
 800af3c:	0151      	lsls	r1, r2, #5
 800af3e:	69fa      	ldr	r2, [r7, #28]
 800af40:	440a      	add	r2, r1
 800af42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af4a:	6113      	str	r3, [r2, #16]
 800af4c:	e036      	b.n	800afbc <USB_EPStartXfer+0x3dc>
 800af4e:	bf00      	nop
 800af50:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	695a      	ldr	r2, [r3, #20]
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	4413      	add	r3, r2
 800af5e:	1e5a      	subs	r2, r3, #1
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	fbb2 f3f3 	udiv	r3, r2, r3
 800af68:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af76:	691a      	ldr	r2, [r3, #16]
 800af78:	8afb      	ldrh	r3, [r7, #22]
 800af7a:	04d9      	lsls	r1, r3, #19
 800af7c:	4b39      	ldr	r3, [pc, #228]	; (800b064 <USB_EPStartXfer+0x484>)
 800af7e:	400b      	ands	r3, r1
 800af80:	69b9      	ldr	r1, [r7, #24]
 800af82:	0148      	lsls	r0, r1, #5
 800af84:	69f9      	ldr	r1, [r7, #28]
 800af86:	4401      	add	r1, r0
 800af88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800af8c:	4313      	orrs	r3, r2
 800af8e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	4413      	add	r3, r2
 800af98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af9c:	691a      	ldr	r2, [r3, #16]
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	8af9      	ldrh	r1, [r7, #22]
 800afa4:	fb01 f303 	mul.w	r3, r1, r3
 800afa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afac:	69b9      	ldr	r1, [r7, #24]
 800afae:	0148      	lsls	r0, r1, #5
 800afb0:	69f9      	ldr	r1, [r7, #28]
 800afb2:	4401      	add	r1, r0
 800afb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800afb8:	4313      	orrs	r3, r2
 800afba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800afbc:	79fb      	ldrb	r3, [r7, #7]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d10d      	bne.n	800afde <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d009      	beq.n	800afde <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	68d9      	ldr	r1, [r3, #12]
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	015a      	lsls	r2, r3, #5
 800afd2:	69fb      	ldr	r3, [r7, #28]
 800afd4:	4413      	add	r3, r2
 800afd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afda:	460a      	mov	r2, r1
 800afdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	78db      	ldrb	r3, [r3, #3]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d128      	bne.n	800b038 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d110      	bne.n	800b018 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	015a      	lsls	r2, r3, #5
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	4413      	add	r3, r2
 800affe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	69ba      	ldr	r2, [r7, #24]
 800b006:	0151      	lsls	r1, r2, #5
 800b008:	69fa      	ldr	r2, [r7, #28]
 800b00a:	440a      	add	r2, r1
 800b00c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b010:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b014:	6013      	str	r3, [r2, #0]
 800b016:	e00f      	b.n	800b038 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	015a      	lsls	r2, r3, #5
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	0151      	lsls	r1, r2, #5
 800b02a:	69fa      	ldr	r2, [r7, #28]
 800b02c:	440a      	add	r2, r1
 800b02e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b036:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	015a      	lsls	r2, r3, #5
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	0151      	lsls	r1, r2, #5
 800b04a:	69fa      	ldr	r2, [r7, #28]
 800b04c:	440a      	add	r2, r1
 800b04e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b052:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b056:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3720      	adds	r7, #32
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	1ff80000 	.word	0x1ff80000

0800b068 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b068:	b480      	push	{r7}
 800b06a:	b087      	sub	sp, #28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	4613      	mov	r3, r2
 800b074:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	785b      	ldrb	r3, [r3, #1]
 800b084:	2b01      	cmp	r3, #1
 800b086:	f040 80cd 	bne.w	800b224 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	695b      	ldr	r3, [r3, #20]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d132      	bne.n	800b0f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	015a      	lsls	r2, r3, #5
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	4413      	add	r3, r2
 800b09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	0151      	lsls	r1, r2, #5
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	440a      	add	r2, r1
 800b0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	0151      	lsls	r1, r2, #5
 800b0c8:	697a      	ldr	r2, [r7, #20]
 800b0ca:	440a      	add	r2, r1
 800b0cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	0151      	lsls	r1, r2, #5
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	440a      	add	r2, r1
 800b0ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0f0:	0cdb      	lsrs	r3, r3, #19
 800b0f2:	04db      	lsls	r3, r3, #19
 800b0f4:	6113      	str	r3, [r2, #16]
 800b0f6:	e04e      	b.n	800b196 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	015a      	lsls	r2, r3, #5
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	4413      	add	r3, r2
 800b100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	0151      	lsls	r1, r2, #5
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	440a      	add	r2, r1
 800b10e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b112:	0cdb      	lsrs	r3, r3, #19
 800b114:	04db      	lsls	r3, r3, #19
 800b116:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	0151      	lsls	r1, r2, #5
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	440a      	add	r2, r1
 800b12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b132:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b136:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b13a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	695a      	ldr	r2, [r3, #20]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	429a      	cmp	r2, r3
 800b146:	d903      	bls.n	800b150 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	689a      	ldr	r2, [r3, #8]
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	015a      	lsls	r2, r3, #5
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	4413      	add	r3, r2
 800b158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b15c:	691b      	ldr	r3, [r3, #16]
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	0151      	lsls	r1, r2, #5
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	440a      	add	r2, r1
 800b166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b16a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b16e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17c:	691a      	ldr	r2, [r3, #16]
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b186:	6939      	ldr	r1, [r7, #16]
 800b188:	0148      	lsls	r0, r1, #5
 800b18a:	6979      	ldr	r1, [r7, #20]
 800b18c:	4401      	add	r1, r0
 800b18e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b192:	4313      	orrs	r3, r2
 800b194:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b196:	79fb      	ldrb	r3, [r7, #7]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d11e      	bne.n	800b1da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d009      	beq.n	800b1b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	015a      	lsls	r2, r3, #5
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	0151      	lsls	r1, r2, #5
 800b1ca:	697a      	ldr	r2, [r7, #20]
 800b1cc:	440a      	add	r2, r1
 800b1ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	e092      	b.n	800b300 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	015a      	lsls	r2, r3, #5
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	0151      	lsls	r1, r2, #5
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	440a      	add	r2, r1
 800b1f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d07e      	beq.n	800b300 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	f003 030f 	and.w	r3, r3, #15
 800b212:	2101      	movs	r1, #1
 800b214:	fa01 f303 	lsl.w	r3, r1, r3
 800b218:	6979      	ldr	r1, [r7, #20]
 800b21a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b21e:	4313      	orrs	r3, r2
 800b220:	634b      	str	r3, [r1, #52]	; 0x34
 800b222:	e06d      	b.n	800b300 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	015a      	lsls	r2, r3, #5
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	4413      	add	r3, r2
 800b22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	0151      	lsls	r1, r2, #5
 800b236:	697a      	ldr	r2, [r7, #20]
 800b238:	440a      	add	r2, r1
 800b23a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b23e:	0cdb      	lsrs	r3, r3, #19
 800b240:	04db      	lsls	r3, r3, #19
 800b242:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	0151      	lsls	r1, r2, #5
 800b256:	697a      	ldr	r2, [r7, #20]
 800b258:	440a      	add	r2, r1
 800b25a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b25e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b262:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b266:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	695b      	ldr	r3, [r3, #20]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d003      	beq.n	800b278 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	689a      	ldr	r2, [r3, #8]
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	0151      	lsls	r1, r2, #5
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	440a      	add	r2, r1
 800b28e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b292:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b296:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	015a      	lsls	r2, r3, #5
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	4413      	add	r3, r2
 800b2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a4:	691a      	ldr	r2, [r3, #16]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2ae:	6939      	ldr	r1, [r7, #16]
 800b2b0:	0148      	lsls	r0, r1, #5
 800b2b2:	6979      	ldr	r1, [r7, #20]
 800b2b4:	4401      	add	r1, r0
 800b2b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b2be:	79fb      	ldrb	r3, [r7, #7]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d10d      	bne.n	800b2e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d009      	beq.n	800b2e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	68d9      	ldr	r1, [r3, #12]
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	015a      	lsls	r2, r3, #5
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2dc:	460a      	mov	r2, r1
 800b2de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	015a      	lsls	r2, r3, #5
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	693a      	ldr	r2, [r7, #16]
 800b2f0:	0151      	lsls	r1, r2, #5
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	440a      	add	r2, r1
 800b2f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	371c      	adds	r7, #28
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b30e:	b480      	push	{r7}
 800b310:	b089      	sub	sp, #36	; 0x24
 800b312:	af00      	add	r7, sp, #0
 800b314:	60f8      	str	r0, [r7, #12]
 800b316:	60b9      	str	r1, [r7, #8]
 800b318:	4611      	mov	r1, r2
 800b31a:	461a      	mov	r2, r3
 800b31c:	460b      	mov	r3, r1
 800b31e:	71fb      	strb	r3, [r7, #7]
 800b320:	4613      	mov	r3, r2
 800b322:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b32c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b330:	2b00      	cmp	r3, #0
 800b332:	d11a      	bne.n	800b36a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b334:	88bb      	ldrh	r3, [r7, #4]
 800b336:	3303      	adds	r3, #3
 800b338:	089b      	lsrs	r3, r3, #2
 800b33a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b33c:	2300      	movs	r3, #0
 800b33e:	61bb      	str	r3, [r7, #24]
 800b340:	e00f      	b.n	800b362 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	031a      	lsls	r2, r3, #12
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	4413      	add	r3, r2
 800b34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b34e:	461a      	mov	r2, r3
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	3304      	adds	r3, #4
 800b35a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	3301      	adds	r3, #1
 800b360:	61bb      	str	r3, [r7, #24]
 800b362:	69ba      	ldr	r2, [r7, #24]
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	429a      	cmp	r2, r3
 800b368:	d3eb      	bcc.n	800b342 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3724      	adds	r7, #36	; 0x24
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b378:	b480      	push	{r7}
 800b37a:	b089      	sub	sp, #36	; 0x24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	4613      	mov	r3, r2
 800b384:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b38e:	88fb      	ldrh	r3, [r7, #6]
 800b390:	3303      	adds	r3, #3
 800b392:	089b      	lsrs	r3, r3, #2
 800b394:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b396:	2300      	movs	r3, #0
 800b398:	61bb      	str	r3, [r7, #24]
 800b39a:	e00b      	b.n	800b3b4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	61bb      	str	r3, [r7, #24]
 800b3b4:	69ba      	ldr	r2, [r7, #24]
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d3ef      	bcc.n	800b39c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b3bc:	69fb      	ldr	r3, [r7, #28]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3724      	adds	r7, #36	; 0x24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b085      	sub	sp, #20
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	785b      	ldrb	r3, [r3, #1]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d12c      	bne.n	800b440 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	015a      	lsls	r2, r3, #5
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	db12      	blt.n	800b41e <USB_EPSetStall+0x54>
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00f      	beq.n	800b41e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	015a      	lsls	r2, r3, #5
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	4413      	add	r3, r2
 800b406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	0151      	lsls	r1, r2, #5
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	440a      	add	r2, r1
 800b414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b418:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b41c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	015a      	lsls	r2, r3, #5
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	4413      	add	r3, r2
 800b426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	0151      	lsls	r1, r2, #5
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	440a      	add	r2, r1
 800b434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b43c:	6013      	str	r3, [r2, #0]
 800b43e:	e02b      	b.n	800b498 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	015a      	lsls	r2, r3, #5
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	4413      	add	r3, r2
 800b448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	db12      	blt.n	800b478 <USB_EPSetStall+0xae>
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00f      	beq.n	800b478 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68ba      	ldr	r2, [r7, #8]
 800b468:	0151      	lsls	r1, r2, #5
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	440a      	add	r2, r1
 800b46e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b472:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b476:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	015a      	lsls	r2, r3, #5
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	4413      	add	r3, r2
 800b480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	0151      	lsls	r1, r2, #5
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	440a      	add	r2, r1
 800b48e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b492:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b496:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4a6:	b480      	push	{r7}
 800b4a8:	b085      	sub	sp, #20
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	785b      	ldrb	r3, [r3, #1]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d128      	bne.n	800b514 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	0151      	lsls	r1, r2, #5
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	440a      	add	r2, r1
 800b4d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	78db      	ldrb	r3, [r3, #3]
 800b4e6:	2b03      	cmp	r3, #3
 800b4e8:	d003      	beq.n	800b4f2 <USB_EPClearStall+0x4c>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	78db      	ldrb	r3, [r3, #3]
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d138      	bne.n	800b564 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	015a      	lsls	r2, r3, #5
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	0151      	lsls	r1, r2, #5
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	440a      	add	r2, r1
 800b508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b50c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b510:	6013      	str	r3, [r2, #0]
 800b512:	e027      	b.n	800b564 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	015a      	lsls	r2, r3, #5
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4413      	add	r3, r2
 800b51c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	0151      	lsls	r1, r2, #5
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	440a      	add	r2, r1
 800b52a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b52e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b532:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	78db      	ldrb	r3, [r3, #3]
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d003      	beq.n	800b544 <USB_EPClearStall+0x9e>
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	78db      	ldrb	r3, [r3, #3]
 800b540:	2b02      	cmp	r3, #2
 800b542:	d10f      	bne.n	800b564 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	015a      	lsls	r2, r3, #5
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4413      	add	r3, r2
 800b54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	0151      	lsls	r1, r2, #5
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	440a      	add	r2, r1
 800b55a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b55e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b562:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b572:	b480      	push	{r7}
 800b574:	b085      	sub	sp, #20
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
 800b57a:	460b      	mov	r3, r1
 800b57c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b590:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b594:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	78fb      	ldrb	r3, [r7, #3]
 800b5a0:	011b      	lsls	r3, r3, #4
 800b5a2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b5a6:	68f9      	ldr	r1, [r7, #12]
 800b5a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b5be:	b480      	push	{r7}
 800b5c0:	b085      	sub	sp, #20
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b5d8:	f023 0303 	bic.w	r3, r3, #3
 800b5dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5ec:	f023 0302 	bic.w	r3, r3, #2
 800b5f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b61a:	f023 0303 	bic.w	r3, r3, #3
 800b61e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b62e:	f043 0302 	orr.w	r3, r3, #2
 800b632:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b642:	b480      	push	{r7}
 800b644:	b085      	sub	sp, #20
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	4013      	ands	r3, r2
 800b658:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b65a:	68fb      	ldr	r3, [r7, #12]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b67a:	699b      	ldr	r3, [r3, #24]
 800b67c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b684:	69db      	ldr	r3, [r3, #28]
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	4013      	ands	r3, r2
 800b68a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	0c1b      	lsrs	r3, r3, #16
}
 800b690:	4618      	mov	r0, r3
 800b692:	3714      	adds	r7, #20
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6b8:	69db      	ldr	r3, [r3, #28]
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	4013      	ands	r3, r2
 800b6be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	b29b      	uxth	r3, r3
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b6e0:	78fb      	ldrb	r3, [r7, #3]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6f6:	695b      	ldr	r3, [r3, #20]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b6fe:	68bb      	ldr	r3, [r7, #8]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	460b      	mov	r3, r1
 800b716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b730:	78fb      	ldrb	r3, [r7, #3]
 800b732:	f003 030f 	and.w	r3, r3, #15
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	fa22 f303 	lsr.w	r3, r2, r3
 800b73c:	01db      	lsls	r3, r3, #7
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	693a      	ldr	r2, [r7, #16]
 800b742:	4313      	orrs	r3, r2
 800b744:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b746:	78fb      	ldrb	r3, [r7, #3]
 800b748:	015a      	lsls	r2, r3, #5
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	4413      	add	r3, r2
 800b74e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	4013      	ands	r3, r2
 800b758:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b75a:	68bb      	ldr	r3, [r7, #8]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	371c      	adds	r7, #28
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	695b      	ldr	r3, [r3, #20]
 800b774:	f003 0301 	and.w	r3, r3, #1
}
 800b778:	4618      	mov	r0, r3
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b79e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b7a2:	f023 0307 	bic.w	r3, r3, #7
 800b7a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
	...

0800b7cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	607a      	str	r2, [r7, #4]
 800b7d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	333c      	adds	r3, #60	; 0x3c
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	4a26      	ldr	r2, [pc, #152]	; (800b884 <USB_EP0_OutStart+0xb8>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d90a      	bls.n	800b806 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b800:	d101      	bne.n	800b806 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b802:	2300      	movs	r3, #0
 800b804:	e037      	b.n	800b876 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80c:	461a      	mov	r2, r3
 800b80e:	2300      	movs	r3, #0
 800b810:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b824:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b834:	f043 0318 	orr.w	r3, r3, #24
 800b838:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b848:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b84c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b84e:	7afb      	ldrb	r3, [r7, #11]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d10f      	bne.n	800b874 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	697a      	ldr	r2, [r7, #20]
 800b86a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b86e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b872:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	371c      	adds	r7, #28
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	4f54300a 	.word	0x4f54300a

0800b888 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b890:	2300      	movs	r3, #0
 800b892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	3301      	adds	r3, #1
 800b898:	60fb      	str	r3, [r7, #12]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	4a13      	ldr	r2, [pc, #76]	; (800b8ec <USB_CoreReset+0x64>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d901      	bls.n	800b8a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e01b      	b.n	800b8de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	daf2      	bge.n	800b894 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	f043 0201 	orr.w	r2, r3, #1
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	3301      	adds	r3, #1
 800b8c2:	60fb      	str	r3, [r7, #12]
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	4a09      	ldr	r2, [pc, #36]	; (800b8ec <USB_CoreReset+0x64>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d901      	bls.n	800b8d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	e006      	b.n	800b8de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	f003 0301 	and.w	r3, r3, #1
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d0f0      	beq.n	800b8be <USB_CoreReset+0x36>

  return HAL_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3714      	adds	r7, #20
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	00030d40 	.word	0x00030d40

0800b8f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b8fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b900:	f004 ff28 	bl	8010754 <USBD_static_malloc>
 800b904:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d105      	bne.n	800b918 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b914:	2302      	movs	r3, #2
 800b916:	e066      	b.n	800b9e6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	7c1b      	ldrb	r3, [r3, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d119      	bne.n	800b95c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b92c:	2202      	movs	r2, #2
 800b92e:	2181      	movs	r1, #129	; 0x81
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f004 fdec 	bl	801050e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b93c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b940:	2202      	movs	r2, #2
 800b942:	2101      	movs	r1, #1
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f004 fde2 	bl	801050e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2201      	movs	r2, #1
 800b94e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2210      	movs	r2, #16
 800b956:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b95a:	e016      	b.n	800b98a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b95c:	2340      	movs	r3, #64	; 0x40
 800b95e:	2202      	movs	r2, #2
 800b960:	2181      	movs	r1, #129	; 0x81
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f004 fdd3 	bl	801050e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b96e:	2340      	movs	r3, #64	; 0x40
 800b970:	2202      	movs	r2, #2
 800b972:	2101      	movs	r1, #1
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f004 fdca 	bl	801050e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2210      	movs	r2, #16
 800b986:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b98a:	2308      	movs	r3, #8
 800b98c:	2203      	movs	r2, #3
 800b98e:	2182      	movs	r1, #130	; 0x82
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f004 fdbc 	bl	801050e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	7c1b      	ldrb	r3, [r3, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d109      	bne.n	800b9d4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f004 fe8d 	bl	80106ec <USBD_LL_PrepareReceive>
 800b9d2:	e007      	b.n	800b9e4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9da:	2340      	movs	r3, #64	; 0x40
 800b9dc:	2101      	movs	r1, #1
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f004 fe84 	bl	80106ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b082      	sub	sp, #8
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b9fa:	2181      	movs	r1, #129	; 0x81
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f004 fdac 	bl	801055a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ba08:	2101      	movs	r1, #1
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f004 fda5 	bl	801055a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ba18:	2182      	movs	r1, #130	; 0x82
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f004 fd9d 	bl	801055a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00e      	beq.n	800ba58 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f004 fe90 	bl	8010770 <USBD_static_free>
    pdev->pClassData = NULL;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3708      	adds	r7, #8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba74:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ba76:	2300      	movs	r3, #0
 800ba78:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d101      	bne.n	800ba8c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ba88:	2303      	movs	r3, #3
 800ba8a:	e0af      	b.n	800bbec <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d03f      	beq.n	800bb18 <USBD_CDC_Setup+0xb4>
 800ba98:	2b20      	cmp	r3, #32
 800ba9a:	f040 809f 	bne.w	800bbdc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	88db      	ldrh	r3, [r3, #6]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d02e      	beq.n	800bb04 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	b25b      	sxtb	r3, r3
 800baac:	2b00      	cmp	r3, #0
 800baae:	da16      	bge.n	800bade <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800babc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800babe:	683a      	ldr	r2, [r7, #0]
 800bac0:	88d2      	ldrh	r2, [r2, #6]
 800bac2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	88db      	ldrh	r3, [r3, #6]
 800bac8:	2b07      	cmp	r3, #7
 800baca:	bf28      	it	cs
 800bacc:	2307      	movcs	r3, #7
 800bace:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	89fa      	ldrh	r2, [r7, #14]
 800bad4:	4619      	mov	r1, r3
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f001 fb19 	bl	800d10e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800badc:	e085      	b.n	800bbea <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	785a      	ldrb	r2, [r3, #1]
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	88db      	ldrh	r3, [r3, #6]
 800baec:	b2da      	uxtb	r2, r3
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800baf4:	6939      	ldr	r1, [r7, #16]
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	88db      	ldrh	r3, [r3, #6]
 800bafa:	461a      	mov	r2, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f001 fb32 	bl	800d166 <USBD_CtlPrepareRx>
      break;
 800bb02:	e072      	b.n	800bbea <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	7850      	ldrb	r0, [r2, #1]
 800bb10:	2200      	movs	r2, #0
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	4798      	blx	r3
      break;
 800bb16:	e068      	b.n	800bbea <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	785b      	ldrb	r3, [r3, #1]
 800bb1c:	2b0b      	cmp	r3, #11
 800bb1e:	d852      	bhi.n	800bbc6 <USBD_CDC_Setup+0x162>
 800bb20:	a201      	add	r2, pc, #4	; (adr r2, 800bb28 <USBD_CDC_Setup+0xc4>)
 800bb22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb26:	bf00      	nop
 800bb28:	0800bb59 	.word	0x0800bb59
 800bb2c:	0800bbd5 	.word	0x0800bbd5
 800bb30:	0800bbc7 	.word	0x0800bbc7
 800bb34:	0800bbc7 	.word	0x0800bbc7
 800bb38:	0800bbc7 	.word	0x0800bbc7
 800bb3c:	0800bbc7 	.word	0x0800bbc7
 800bb40:	0800bbc7 	.word	0x0800bbc7
 800bb44:	0800bbc7 	.word	0x0800bbc7
 800bb48:	0800bbc7 	.word	0x0800bbc7
 800bb4c:	0800bbc7 	.word	0x0800bbc7
 800bb50:	0800bb83 	.word	0x0800bb83
 800bb54:	0800bbad 	.word	0x0800bbad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	2b03      	cmp	r3, #3
 800bb62:	d107      	bne.n	800bb74 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bb64:	f107 030a 	add.w	r3, r7, #10
 800bb68:	2202      	movs	r2, #2
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f001 face 	bl	800d10e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb72:	e032      	b.n	800bbda <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f001 fa58 	bl	800d02c <USBD_CtlError>
            ret = USBD_FAIL;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	75fb      	strb	r3, [r7, #23]
          break;
 800bb80:	e02b      	b.n	800bbda <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d107      	bne.n	800bb9e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb8e:	f107 030d 	add.w	r3, r7, #13
 800bb92:	2201      	movs	r2, #1
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f001 fab9 	bl	800d10e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb9c:	e01d      	b.n	800bbda <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f001 fa43 	bl	800d02c <USBD_CtlError>
            ret = USBD_FAIL;
 800bba6:	2303      	movs	r3, #3
 800bba8:	75fb      	strb	r3, [r7, #23]
          break;
 800bbaa:	e016      	b.n	800bbda <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d00f      	beq.n	800bbd8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800bbb8:	6839      	ldr	r1, [r7, #0]
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f001 fa36 	bl	800d02c <USBD_CtlError>
            ret = USBD_FAIL;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bbc4:	e008      	b.n	800bbd8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bbc6:	6839      	ldr	r1, [r7, #0]
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f001 fa2f 	bl	800d02c <USBD_CtlError>
          ret = USBD_FAIL;
 800bbce:	2303      	movs	r3, #3
 800bbd0:	75fb      	strb	r3, [r7, #23]
          break;
 800bbd2:	e002      	b.n	800bbda <USBD_CDC_Setup+0x176>
          break;
 800bbd4:	bf00      	nop
 800bbd6:	e008      	b.n	800bbea <USBD_CDC_Setup+0x186>
          break;
 800bbd8:	bf00      	nop
      }
      break;
 800bbda:	e006      	b.n	800bbea <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f001 fa24 	bl	800d02c <USBD_CtlError>
      ret = USBD_FAIL;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	75fb      	strb	r3, [r7, #23]
      break;
 800bbe8:	bf00      	nop
  }

  return (uint8_t)ret;
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d101      	bne.n	800bc16 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc12:	2303      	movs	r3, #3
 800bc14:	e04f      	b.n	800bcb6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bc1e:	78fa      	ldrb	r2, [r7, #3]
 800bc20:	6879      	ldr	r1, [r7, #4]
 800bc22:	4613      	mov	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4413      	add	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	440b      	add	r3, r1
 800bc2c:	3318      	adds	r3, #24
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d029      	beq.n	800bc88 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bc34:	78fa      	ldrb	r2, [r7, #3]
 800bc36:	6879      	ldr	r1, [r7, #4]
 800bc38:	4613      	mov	r3, r2
 800bc3a:	009b      	lsls	r3, r3, #2
 800bc3c:	4413      	add	r3, r2
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	440b      	add	r3, r1
 800bc42:	3318      	adds	r3, #24
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	78f9      	ldrb	r1, [r7, #3]
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	00db      	lsls	r3, r3, #3
 800bc4e:	1a5b      	subs	r3, r3, r1
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4403      	add	r3, r0
 800bc54:	3344      	adds	r3, #68	; 0x44
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc5c:	fb03 f301 	mul.w	r3, r3, r1
 800bc60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d110      	bne.n	800bc88 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bc66:	78fa      	ldrb	r2, [r7, #3]
 800bc68:	6879      	ldr	r1, [r7, #4]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	4413      	add	r3, r2
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	440b      	add	r3, r1
 800bc74:	3318      	adds	r3, #24
 800bc76:	2200      	movs	r2, #0
 800bc78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc7a:	78f9      	ldrb	r1, [r7, #3]
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	2200      	movs	r2, #0
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f004 fd12 	bl	80106aa <USBD_LL_Transmit>
 800bc86:	e015      	b.n	800bcb4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc96:	691b      	ldr	r3, [r3, #16]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00b      	beq.n	800bcb4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bcb0:	78fa      	ldrb	r2, [r7, #3]
 800bcb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b084      	sub	sp, #16
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcd0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d101      	bne.n	800bce0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	e015      	b.n	800bd0c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f004 fd22 	bl	801072e <USBD_LL_GetRxDataSize>
 800bcea:	4602      	mov	r2, r0
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bd06:	4611      	mov	r1, r2
 800bd08:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd22:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	e01b      	b.n	800bd66 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d015      	beq.n	800bd64 <USBD_CDC_EP0_RxReady+0x50>
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bd3e:	2bff      	cmp	r3, #255	; 0xff
 800bd40:	d010      	beq.n	800bd64 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bd50:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bd58:	b292      	uxth	r2, r2
 800bd5a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	22ff      	movs	r2, #255	; 0xff
 800bd60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bd64:	2300      	movs	r3, #0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2243      	movs	r2, #67	; 0x43
 800bd7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bd7e:	4b03      	ldr	r3, [pc, #12]	; (800bd8c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr
 800bd8c:	200000a8 	.word	0x200000a8

0800bd90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2243      	movs	r2, #67	; 0x43
 800bd9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bd9e:	4b03      	ldr	r3, [pc, #12]	; (800bdac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	20000064 	.word	0x20000064

0800bdb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2243      	movs	r2, #67	; 0x43
 800bdbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800bdbe:	4b03      	ldr	r3, [pc, #12]	; (800bdcc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	200000ec 	.word	0x200000ec

0800bdd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	220a      	movs	r2, #10
 800bddc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bdde:	4b03      	ldr	r3, [pc, #12]	; (800bdec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	20000020 	.word	0x20000020

0800bdf0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d101      	bne.n	800be04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800be00:	2303      	movs	r3, #3
 800be02:	e004      	b.n	800be0e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800be1a:	b480      	push	{r7}
 800be1c:	b087      	sub	sp, #28
 800be1e:	af00      	add	r7, sp, #0
 800be20:	60f8      	str	r0, [r7, #12]
 800be22:	60b9      	str	r1, [r7, #8]
 800be24:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be2c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800be34:	2303      	movs	r3, #3
 800be36:	e008      	b.n	800be4a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800be48:	2300      	movs	r3, #0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	371c      	adds	r7, #28
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800be56:	b480      	push	{r7}
 800be58:	b085      	sub	sp, #20
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be66:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d101      	bne.n	800be72 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800be6e:	2303      	movs	r3, #3
 800be70:	e004      	b.n	800be7c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	683a      	ldr	r2, [r7, #0]
 800be76:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be96:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800be98:	2301      	movs	r3, #1
 800be9a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bea6:	2303      	movs	r3, #3
 800bea8:	e01a      	b.n	800bee0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d114      	bne.n	800bede <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bed2:	2181      	movs	r1, #129	; 0x81
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f004 fbe8 	bl	80106aa <USBD_LL_Transmit>

    ret = USBD_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bede:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3710      	adds	r7, #16
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bef6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d101      	bne.n	800bf06 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bf02:	2303      	movs	r3, #3
 800bf04:	e016      	b.n	800bf34 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	7c1b      	ldrb	r3, [r3, #16]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d109      	bne.n	800bf22 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf18:	2101      	movs	r1, #1
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f004 fbe6 	bl	80106ec <USBD_LL_PrepareReceive>
 800bf20:	e007      	b.n	800bf32 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf28:	2340      	movs	r3, #64	; 0x40
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f004 fbdd 	bl	80106ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	4613      	mov	r3, r2
 800bf48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d101      	bne.n	800bf54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bf50:	2303      	movs	r3, #3
 800bf52:	e01f      	b.n	800bf94 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	79fa      	ldrb	r2, [r7, #7]
 800bf86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f004 fa59 	bl	8010440 <USBD_LL_Init>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3718      	adds	r7, #24
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bfb0:	2303      	movs	r3, #3
 800bfb2:	e016      	b.n	800bfe2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	683a      	ldr	r2, [r7, #0]
 800bfb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00b      	beq.n	800bfe0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd0:	f107 020e 	add.w	r2, r7, #14
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	4798      	blx	r3
 800bfd8:	4602      	mov	r2, r0
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b082      	sub	sp, #8
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f004 fa70 	bl	80104d8 <USBD_LL_Start>
 800bff8:	4603      	mov	r3, r0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c002:	b480      	push	{r7}
 800c004:	b083      	sub	sp, #12
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c024:	2303      	movs	r3, #3
 800c026:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d009      	beq.n	800c046 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	78fa      	ldrb	r2, [r7, #3]
 800c03c:	4611      	mov	r1, r2
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	4798      	blx	r3
 800c042:	4603      	mov	r3, r0
 800c044:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c046:	7bfb      	ldrb	r3, [r7, #15]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	460b      	mov	r3, r1
 800c05a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c062:	2b00      	cmp	r3, #0
 800c064:	d007      	beq.n	800c076 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	78fa      	ldrb	r2, [r7, #3]
 800c070:	4611      	mov	r1, r2
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	4798      	blx	r3
  }

  return USBD_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	4618      	mov	r0, r3
 800c094:	f000 ff90 	bl	800cfb8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c0b4:	f003 031f 	and.w	r3, r3, #31
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	d01a      	beq.n	800c0f2 <USBD_LL_SetupStage+0x72>
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d822      	bhi.n	800c106 <USBD_LL_SetupStage+0x86>
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d002      	beq.n	800c0ca <USBD_LL_SetupStage+0x4a>
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d00a      	beq.n	800c0de <USBD_LL_SetupStage+0x5e>
 800c0c8:	e01d      	b.n	800c106 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fa62 	bl	800c59c <USBD_StdDevReq>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	73fb      	strb	r3, [r7, #15]
      break;
 800c0dc:	e020      	b.n	800c120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fac6 	bl	800c678 <USBD_StdItfReq>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800c0f0:	e016      	b.n	800c120 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 fb05 	bl	800c70a <USBD_StdEPReq>
 800c100:	4603      	mov	r3, r0
 800c102:	73fb      	strb	r3, [r7, #15]
      break;
 800c104:	e00c      	b.n	800c120 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c10c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c110:	b2db      	uxtb	r3, r3
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f004 fa3f 	bl	8010598 <USBD_LL_StallEP>
 800c11a:	4603      	mov	r3, r0
 800c11c:	73fb      	strb	r3, [r7, #15]
      break;
 800c11e:	bf00      	nop
  }

  return ret;
 800c120:	7bfb      	ldrb	r3, [r7, #15]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b086      	sub	sp, #24
 800c12e:	af00      	add	r7, sp, #0
 800c130:	60f8      	str	r0, [r7, #12]
 800c132:	460b      	mov	r3, r1
 800c134:	607a      	str	r2, [r7, #4]
 800c136:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c138:	7afb      	ldrb	r3, [r7, #11]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d138      	bne.n	800c1b0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c144:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c14c:	2b03      	cmp	r3, #3
 800c14e:	d14a      	bne.n	800c1e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	689a      	ldr	r2, [r3, #8]
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d913      	bls.n	800c184 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	689a      	ldr	r2, [r3, #8]
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	1ad2      	subs	r2, r2, r3
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	4293      	cmp	r3, r2
 800c174:	bf28      	it	cs
 800c176:	4613      	movcs	r3, r2
 800c178:	461a      	mov	r2, r3
 800c17a:	6879      	ldr	r1, [r7, #4]
 800c17c:	68f8      	ldr	r0, [r7, #12]
 800c17e:	f001 f80f 	bl	800d1a0 <USBD_CtlContinueRx>
 800c182:	e030      	b.n	800c1e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	2b03      	cmp	r3, #3
 800c18e:	d10b      	bne.n	800c1a8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c196:	691b      	ldr	r3, [r3, #16]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d005      	beq.n	800c1a8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f001 f80a 	bl	800d1c2 <USBD_CtlSendStatus>
 800c1ae:	e01a      	b.n	800c1e6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b03      	cmp	r3, #3
 800c1ba:	d114      	bne.n	800c1e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d00e      	beq.n	800c1e6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	7afa      	ldrb	r2, [r7, #11]
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	4798      	blx	r3
 800c1d8:	4603      	mov	r3, r0
 800c1da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c1dc:	7dfb      	ldrb	r3, [r7, #23]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c1e2:	7dfb      	ldrb	r3, [r7, #23]
 800c1e4:	e000      	b.n	800c1e8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3718      	adds	r7, #24
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	607a      	str	r2, [r7, #4]
 800c1fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c1fe:	7afb      	ldrb	r3, [r7, #11]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d16b      	bne.n	800c2dc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	3314      	adds	r3, #20
 800c208:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c210:	2b02      	cmp	r3, #2
 800c212:	d156      	bne.n	800c2c2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	689a      	ldr	r2, [r3, #8]
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d914      	bls.n	800c24a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	689a      	ldr	r2, [r3, #8]
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	1ad2      	subs	r2, r2, r3
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	461a      	mov	r2, r3
 800c234:	6879      	ldr	r1, [r7, #4]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f000 ff84 	bl	800d144 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c23c:	2300      	movs	r3, #0
 800c23e:	2200      	movs	r2, #0
 800c240:	2100      	movs	r1, #0
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f004 fa52 	bl	80106ec <USBD_LL_PrepareReceive>
 800c248:	e03b      	b.n	800c2c2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	68da      	ldr	r2, [r3, #12]
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	429a      	cmp	r2, r3
 800c254:	d11c      	bne.n	800c290 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	685a      	ldr	r2, [r3, #4]
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c25e:	429a      	cmp	r2, r3
 800c260:	d316      	bcc.n	800c290 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	685a      	ldr	r2, [r3, #4]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d20f      	bcs.n	800c290 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c270:	2200      	movs	r2, #0
 800c272:	2100      	movs	r1, #0
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f000 ff65 	bl	800d144 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2200      	movs	r2, #0
 800c27e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c282:	2300      	movs	r3, #0
 800c284:	2200      	movs	r2, #0
 800c286:	2100      	movs	r1, #0
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f004 fa2f 	bl	80106ec <USBD_LL_PrepareReceive>
 800c28e:	e018      	b.n	800c2c2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c296:	b2db      	uxtb	r3, r3
 800c298:	2b03      	cmp	r3, #3
 800c29a:	d10b      	bne.n	800c2b4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d005      	beq.n	800c2b4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2b4:	2180      	movs	r1, #128	; 0x80
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f004 f96e 	bl	8010598 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f000 ff93 	bl	800d1e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d122      	bne.n	800c312 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f7ff fe98 	bl	800c002 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c2da:	e01a      	b.n	800c312 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b03      	cmp	r3, #3
 800c2e6:	d114      	bne.n	800c312 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ee:	695b      	ldr	r3, [r3, #20]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00e      	beq.n	800c312 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	7afa      	ldrb	r2, [r7, #11]
 800c2fe:	4611      	mov	r1, r2
 800c300:	68f8      	ldr	r0, [r7, #12]
 800c302:	4798      	blx	r3
 800c304:	4603      	mov	r3, r0
 800c306:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c308:	7dfb      	ldrb	r3, [r7, #23]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d001      	beq.n	800c312 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c30e:	7dfb      	ldrb	r3, [r7, #23]
 800c310:	e000      	b.n	800c314 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2200      	movs	r2, #0
 800c330:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c34c:	2303      	movs	r3, #3
 800c34e:	e02f      	b.n	800c3b0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00f      	beq.n	800c37a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d009      	beq.n	800c37a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	6852      	ldr	r2, [r2, #4]
 800c372:	b2d2      	uxtb	r2, r2
 800c374:	4611      	mov	r1, r2
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c37a:	2340      	movs	r3, #64	; 0x40
 800c37c:	2200      	movs	r2, #0
 800c37e:	2100      	movs	r1, #0
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f004 f8c4 	bl	801050e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2201      	movs	r2, #1
 800c38a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2240      	movs	r2, #64	; 0x40
 800c392:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c396:	2340      	movs	r3, #64	; 0x40
 800c398:	2200      	movs	r2, #0
 800c39a:	2180      	movs	r1, #128	; 0x80
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f004 f8b6 	bl	801050e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2240      	movs	r2, #64	; 0x40
 800c3ac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	78fa      	ldrb	r2, [r7, #3]
 800c3c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c3ca:	2300      	movs	r3, #0
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2204      	movs	r2, #4
 800c3f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c404:	b480      	push	{r7}
 800c406:	b083      	sub	sp, #12
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c412:	b2db      	uxtb	r3, r3
 800c414:	2b04      	cmp	r3, #4
 800c416:	d106      	bne.n	800c426 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c41e:	b2da      	uxtb	r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c442:	2b00      	cmp	r3, #0
 800c444:	d101      	bne.n	800c44a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c446:	2303      	movs	r3, #3
 800c448:	e012      	b.n	800c470 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c450:	b2db      	uxtb	r3, r3
 800c452:	2b03      	cmp	r3, #3
 800c454:	d10b      	bne.n	800c46e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45c:	69db      	ldr	r3, [r3, #28]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d005      	beq.n	800c46e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	460b      	mov	r3, r1
 800c482:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c48e:	2303      	movs	r3, #3
 800c490:	e014      	b.n	800c4bc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b03      	cmp	r3, #3
 800c49c:	d10d      	bne.n	800c4ba <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d007      	beq.n	800c4ba <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	78fa      	ldrb	r2, [r7, #3]
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d101      	bne.n	800c4de <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	e014      	b.n	800c508 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2b03      	cmp	r3, #3
 800c4e8:	d10d      	bne.n	800c506 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d007      	beq.n	800c506 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4fe:	78fa      	ldrb	r2, [r7, #3]
 800c500:	4611      	mov	r1, r2
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c510:	b480      	push	{r7}
 800c512:	b083      	sub	sp, #12
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2201      	movs	r2, #1
 800c532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d009      	beq.n	800c554 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	687a      	ldr	r2, [r7, #4]
 800c54a:	6852      	ldr	r2, [r2, #4]
 800c54c:	b2d2      	uxtb	r2, r2
 800c54e:	4611      	mov	r1, r2
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	4798      	blx	r3
  }

  return USBD_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3708      	adds	r7, #8
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c55e:	b480      	push	{r7}
 800c560:	b087      	sub	sp, #28
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	3301      	adds	r3, #1
 800c574:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c57c:	8a3b      	ldrh	r3, [r7, #16]
 800c57e:	021b      	lsls	r3, r3, #8
 800c580:	b21a      	sxth	r2, r3
 800c582:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c586:	4313      	orrs	r3, r2
 800c588:	b21b      	sxth	r3, r3
 800c58a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c58c:	89fb      	ldrh	r3, [r7, #14]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	371c      	adds	r7, #28
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
	...

0800c59c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5b2:	2b40      	cmp	r3, #64	; 0x40
 800c5b4:	d005      	beq.n	800c5c2 <USBD_StdDevReq+0x26>
 800c5b6:	2b40      	cmp	r3, #64	; 0x40
 800c5b8:	d853      	bhi.n	800c662 <USBD_StdDevReq+0xc6>
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00b      	beq.n	800c5d6 <USBD_StdDevReq+0x3a>
 800c5be:	2b20      	cmp	r3, #32
 800c5c0:	d14f      	bne.n	800c662 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	4798      	blx	r3
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c5d4:	e04a      	b.n	800c66c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	785b      	ldrb	r3, [r3, #1]
 800c5da:	2b09      	cmp	r3, #9
 800c5dc:	d83b      	bhi.n	800c656 <USBD_StdDevReq+0xba>
 800c5de:	a201      	add	r2, pc, #4	; (adr r2, 800c5e4 <USBD_StdDevReq+0x48>)
 800c5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e4:	0800c639 	.word	0x0800c639
 800c5e8:	0800c64d 	.word	0x0800c64d
 800c5ec:	0800c657 	.word	0x0800c657
 800c5f0:	0800c643 	.word	0x0800c643
 800c5f4:	0800c657 	.word	0x0800c657
 800c5f8:	0800c617 	.word	0x0800c617
 800c5fc:	0800c60d 	.word	0x0800c60d
 800c600:	0800c657 	.word	0x0800c657
 800c604:	0800c62f 	.word	0x0800c62f
 800c608:	0800c621 	.word	0x0800c621
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c60c:	6839      	ldr	r1, [r7, #0]
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 f9de 	bl	800c9d0 <USBD_GetDescriptor>
          break;
 800c614:	e024      	b.n	800c660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fb43 	bl	800cca4 <USBD_SetAddress>
          break;
 800c61e:	e01f      	b.n	800c660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 fb82 	bl	800cd2c <USBD_SetConfig>
 800c628:	4603      	mov	r3, r0
 800c62a:	73fb      	strb	r3, [r7, #15]
          break;
 800c62c:	e018      	b.n	800c660 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c62e:	6839      	ldr	r1, [r7, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 fc21 	bl	800ce78 <USBD_GetConfig>
          break;
 800c636:	e013      	b.n	800c660 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c638:	6839      	ldr	r1, [r7, #0]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fc52 	bl	800cee4 <USBD_GetStatus>
          break;
 800c640:	e00e      	b.n	800c660 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c642:	6839      	ldr	r1, [r7, #0]
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fc81 	bl	800cf4c <USBD_SetFeature>
          break;
 800c64a:	e009      	b.n	800c660 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c64c:	6839      	ldr	r1, [r7, #0]
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fc90 	bl	800cf74 <USBD_ClrFeature>
          break;
 800c654:	e004      	b.n	800c660 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 fce7 	bl	800d02c <USBD_CtlError>
          break;
 800c65e:	bf00      	nop
      }
      break;
 800c660:	e004      	b.n	800c66c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fce1 	bl	800d02c <USBD_CtlError>
      break;
 800c66a:	bf00      	nop
  }

  return ret;
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop

0800c678 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c682:	2300      	movs	r3, #0
 800c684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c68e:	2b40      	cmp	r3, #64	; 0x40
 800c690:	d005      	beq.n	800c69e <USBD_StdItfReq+0x26>
 800c692:	2b40      	cmp	r3, #64	; 0x40
 800c694:	d82f      	bhi.n	800c6f6 <USBD_StdItfReq+0x7e>
 800c696:	2b00      	cmp	r3, #0
 800c698:	d001      	beq.n	800c69e <USBD_StdItfReq+0x26>
 800c69a:	2b20      	cmp	r3, #32
 800c69c:	d12b      	bne.n	800c6f6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d81d      	bhi.n	800c6e8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	889b      	ldrh	r3, [r3, #4]
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d813      	bhi.n	800c6de <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	4798      	blx	r3
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	88db      	ldrh	r3, [r3, #6]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d110      	bne.n	800c6f2 <USBD_StdItfReq+0x7a>
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10d      	bne.n	800c6f2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fd73 	bl	800d1c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c6dc:	e009      	b.n	800c6f2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c6de:	6839      	ldr	r1, [r7, #0]
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 fca3 	bl	800d02c <USBD_CtlError>
          break;
 800c6e6:	e004      	b.n	800c6f2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c6e8:	6839      	ldr	r1, [r7, #0]
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 fc9e 	bl	800d02c <USBD_CtlError>
          break;
 800c6f0:	e000      	b.n	800c6f4 <USBD_StdItfReq+0x7c>
          break;
 800c6f2:	bf00      	nop
      }
      break;
 800c6f4:	e004      	b.n	800c700 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c6f6:	6839      	ldr	r1, [r7, #0]
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fc97 	bl	800d02c <USBD_CtlError>
      break;
 800c6fe:	bf00      	nop
  }

  return ret;
 800c700:	7bfb      	ldrb	r3, [r7, #15]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c714:	2300      	movs	r3, #0
 800c716:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	889b      	ldrh	r3, [r3, #4]
 800c71c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c726:	2b40      	cmp	r3, #64	; 0x40
 800c728:	d007      	beq.n	800c73a <USBD_StdEPReq+0x30>
 800c72a:	2b40      	cmp	r3, #64	; 0x40
 800c72c:	f200 8145 	bhi.w	800c9ba <USBD_StdEPReq+0x2b0>
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00c      	beq.n	800c74e <USBD_StdEPReq+0x44>
 800c734:	2b20      	cmp	r3, #32
 800c736:	f040 8140 	bne.w	800c9ba <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	6839      	ldr	r1, [r7, #0]
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	4798      	blx	r3
 800c748:	4603      	mov	r3, r0
 800c74a:	73fb      	strb	r3, [r7, #15]
      break;
 800c74c:	e13a      	b.n	800c9c4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	785b      	ldrb	r3, [r3, #1]
 800c752:	2b03      	cmp	r3, #3
 800c754:	d007      	beq.n	800c766 <USBD_StdEPReq+0x5c>
 800c756:	2b03      	cmp	r3, #3
 800c758:	f300 8129 	bgt.w	800c9ae <USBD_StdEPReq+0x2a4>
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d07f      	beq.n	800c860 <USBD_StdEPReq+0x156>
 800c760:	2b01      	cmp	r3, #1
 800c762:	d03c      	beq.n	800c7de <USBD_StdEPReq+0xd4>
 800c764:	e123      	b.n	800c9ae <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d002      	beq.n	800c778 <USBD_StdEPReq+0x6e>
 800c772:	2b03      	cmp	r3, #3
 800c774:	d016      	beq.n	800c7a4 <USBD_StdEPReq+0x9a>
 800c776:	e02c      	b.n	800c7d2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c778:	7bbb      	ldrb	r3, [r7, #14]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00d      	beq.n	800c79a <USBD_StdEPReq+0x90>
 800c77e:	7bbb      	ldrb	r3, [r7, #14]
 800c780:	2b80      	cmp	r3, #128	; 0x80
 800c782:	d00a      	beq.n	800c79a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c784:	7bbb      	ldrb	r3, [r7, #14]
 800c786:	4619      	mov	r1, r3
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f003 ff05 	bl	8010598 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c78e:	2180      	movs	r1, #128	; 0x80
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f003 ff01 	bl	8010598 <USBD_LL_StallEP>
 800c796:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c798:	e020      	b.n	800c7dc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 fc45 	bl	800d02c <USBD_CtlError>
              break;
 800c7a2:	e01b      	b.n	800c7dc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	885b      	ldrh	r3, [r3, #2]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10e      	bne.n	800c7ca <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c7ac:	7bbb      	ldrb	r3, [r7, #14]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00b      	beq.n	800c7ca <USBD_StdEPReq+0xc0>
 800c7b2:	7bbb      	ldrb	r3, [r7, #14]
 800c7b4:	2b80      	cmp	r3, #128	; 0x80
 800c7b6:	d008      	beq.n	800c7ca <USBD_StdEPReq+0xc0>
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	88db      	ldrh	r3, [r3, #6]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d104      	bne.n	800c7ca <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7c0:	7bbb      	ldrb	r3, [r7, #14]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f003 fee7 	bl	8010598 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 fcf9 	bl	800d1c2 <USBD_CtlSendStatus>

              break;
 800c7d0:	e004      	b.n	800c7dc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fc29 	bl	800d02c <USBD_CtlError>
              break;
 800c7da:	bf00      	nop
          }
          break;
 800c7dc:	e0ec      	b.n	800c9b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d002      	beq.n	800c7f0 <USBD_StdEPReq+0xe6>
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	d016      	beq.n	800c81c <USBD_StdEPReq+0x112>
 800c7ee:	e030      	b.n	800c852 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00d      	beq.n	800c812 <USBD_StdEPReq+0x108>
 800c7f6:	7bbb      	ldrb	r3, [r7, #14]
 800c7f8:	2b80      	cmp	r3, #128	; 0x80
 800c7fa:	d00a      	beq.n	800c812 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7fc:	7bbb      	ldrb	r3, [r7, #14]
 800c7fe:	4619      	mov	r1, r3
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f003 fec9 	bl	8010598 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c806:	2180      	movs	r1, #128	; 0x80
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f003 fec5 	bl	8010598 <USBD_LL_StallEP>
 800c80e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c810:	e025      	b.n	800c85e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c812:	6839      	ldr	r1, [r7, #0]
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 fc09 	bl	800d02c <USBD_CtlError>
              break;
 800c81a:	e020      	b.n	800c85e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	885b      	ldrh	r3, [r3, #2]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d11b      	bne.n	800c85c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c824:	7bbb      	ldrb	r3, [r7, #14]
 800c826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d004      	beq.n	800c838 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c82e:	7bbb      	ldrb	r3, [r7, #14]
 800c830:	4619      	mov	r1, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f003 fecf 	bl	80105d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 fcc2 	bl	800d1c2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	6839      	ldr	r1, [r7, #0]
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	4798      	blx	r3
 800c84c:	4603      	mov	r3, r0
 800c84e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c850:	e004      	b.n	800c85c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c852:	6839      	ldr	r1, [r7, #0]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fbe9 	bl	800d02c <USBD_CtlError>
              break;
 800c85a:	e000      	b.n	800c85e <USBD_StdEPReq+0x154>
              break;
 800c85c:	bf00      	nop
          }
          break;
 800c85e:	e0ab      	b.n	800c9b8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c866:	b2db      	uxtb	r3, r3
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d002      	beq.n	800c872 <USBD_StdEPReq+0x168>
 800c86c:	2b03      	cmp	r3, #3
 800c86e:	d032      	beq.n	800c8d6 <USBD_StdEPReq+0x1cc>
 800c870:	e097      	b.n	800c9a2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c872:	7bbb      	ldrb	r3, [r7, #14]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d007      	beq.n	800c888 <USBD_StdEPReq+0x17e>
 800c878:	7bbb      	ldrb	r3, [r7, #14]
 800c87a:	2b80      	cmp	r3, #128	; 0x80
 800c87c:	d004      	beq.n	800c888 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 fbd3 	bl	800d02c <USBD_CtlError>
                break;
 800c886:	e091      	b.n	800c9ac <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	da0b      	bge.n	800c8a8 <USBD_StdEPReq+0x19e>
 800c890:	7bbb      	ldrb	r3, [r7, #14]
 800c892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c896:	4613      	mov	r3, r2
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	4413      	add	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	3310      	adds	r3, #16
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	4413      	add	r3, r2
 800c8a4:	3304      	adds	r3, #4
 800c8a6:	e00b      	b.n	800c8c0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c8a8:	7bbb      	ldrb	r3, [r7, #14]
 800c8aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	4413      	add	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	4413      	add	r3, r2
 800c8be:	3304      	adds	r3, #4
 800c8c0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 fc1d 	bl	800d10e <USBD_CtlSendData>
              break;
 800c8d4:	e06a      	b.n	800c9ac <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c8d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	da11      	bge.n	800c902 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c8de:	7bbb      	ldrb	r3, [r7, #14]
 800c8e0:	f003 020f 	and.w	r2, r3, #15
 800c8e4:	6879      	ldr	r1, [r7, #4]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	4413      	add	r3, r2
 800c8ec:	009b      	lsls	r3, r3, #2
 800c8ee:	440b      	add	r3, r1
 800c8f0:	3324      	adds	r3, #36	; 0x24
 800c8f2:	881b      	ldrh	r3, [r3, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d117      	bne.n	800c928 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fb96 	bl	800d02c <USBD_CtlError>
                  break;
 800c900:	e054      	b.n	800c9ac <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c902:	7bbb      	ldrb	r3, [r7, #14]
 800c904:	f003 020f 	and.w	r2, r3, #15
 800c908:	6879      	ldr	r1, [r7, #4]
 800c90a:	4613      	mov	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	440b      	add	r3, r1
 800c914:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c918:	881b      	ldrh	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d104      	bne.n	800c928 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 fb83 	bl	800d02c <USBD_CtlError>
                  break;
 800c926:	e041      	b.n	800c9ac <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	da0b      	bge.n	800c948 <USBD_StdEPReq+0x23e>
 800c930:	7bbb      	ldrb	r3, [r7, #14]
 800c932:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c936:	4613      	mov	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	4413      	add	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	3310      	adds	r3, #16
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	4413      	add	r3, r2
 800c944:	3304      	adds	r3, #4
 800c946:	e00b      	b.n	800c960 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c948:	7bbb      	ldrb	r3, [r7, #14]
 800c94a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c94e:	4613      	mov	r3, r2
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	4413      	add	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	4413      	add	r3, r2
 800c95e:	3304      	adds	r3, #4
 800c960:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c962:	7bbb      	ldrb	r3, [r7, #14]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d002      	beq.n	800c96e <USBD_StdEPReq+0x264>
 800c968:	7bbb      	ldrb	r3, [r7, #14]
 800c96a:	2b80      	cmp	r3, #128	; 0x80
 800c96c:	d103      	bne.n	800c976 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	2200      	movs	r2, #0
 800c972:	601a      	str	r2, [r3, #0]
 800c974:	e00e      	b.n	800c994 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c976:	7bbb      	ldrb	r3, [r7, #14]
 800c978:	4619      	mov	r1, r3
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f003 fe4a 	bl	8010614 <USBD_LL_IsStallEP>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d003      	beq.n	800c98e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2201      	movs	r2, #1
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	e002      	b.n	800c994 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	2200      	movs	r2, #0
 800c992:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	2202      	movs	r2, #2
 800c998:	4619      	mov	r1, r3
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fbb7 	bl	800d10e <USBD_CtlSendData>
              break;
 800c9a0:	e004      	b.n	800c9ac <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fb41 	bl	800d02c <USBD_CtlError>
              break;
 800c9aa:	bf00      	nop
          }
          break;
 800c9ac:	e004      	b.n	800c9b8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 fb3b 	bl	800d02c <USBD_CtlError>
          break;
 800c9b6:	bf00      	nop
      }
      break;
 800c9b8:	e004      	b.n	800c9c4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fb35 	bl	800d02c <USBD_CtlError>
      break;
 800c9c2:	bf00      	nop
  }

  return ret;
 800c9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
	...

0800c9d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	885b      	ldrh	r3, [r3, #2]
 800c9ea:	0a1b      	lsrs	r3, r3, #8
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	2b06      	cmp	r3, #6
 800c9f2:	f200 8128 	bhi.w	800cc46 <USBD_GetDescriptor+0x276>
 800c9f6:	a201      	add	r2, pc, #4	; (adr r2, 800c9fc <USBD_GetDescriptor+0x2c>)
 800c9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9fc:	0800ca19 	.word	0x0800ca19
 800ca00:	0800ca31 	.word	0x0800ca31
 800ca04:	0800ca71 	.word	0x0800ca71
 800ca08:	0800cc47 	.word	0x0800cc47
 800ca0c:	0800cc47 	.word	0x0800cc47
 800ca10:	0800cbe7 	.word	0x0800cbe7
 800ca14:	0800cc13 	.word	0x0800cc13
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	7c12      	ldrb	r2, [r2, #16]
 800ca24:	f107 0108 	add.w	r1, r7, #8
 800ca28:	4610      	mov	r0, r2
 800ca2a:	4798      	blx	r3
 800ca2c:	60f8      	str	r0, [r7, #12]
      break;
 800ca2e:	e112      	b.n	800cc56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	7c1b      	ldrb	r3, [r3, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d10d      	bne.n	800ca54 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca40:	f107 0208 	add.w	r2, r7, #8
 800ca44:	4610      	mov	r0, r2
 800ca46:	4798      	blx	r3
 800ca48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	2202      	movs	r2, #2
 800ca50:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ca52:	e100      	b.n	800cc56 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca5c:	f107 0208 	add.w	r2, r7, #8
 800ca60:	4610      	mov	r0, r2
 800ca62:	4798      	blx	r3
 800ca64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	2202      	movs	r2, #2
 800ca6c:	701a      	strb	r2, [r3, #0]
      break;
 800ca6e:	e0f2      	b.n	800cc56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	885b      	ldrh	r3, [r3, #2]
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	2b05      	cmp	r3, #5
 800ca78:	f200 80ac 	bhi.w	800cbd4 <USBD_GetDescriptor+0x204>
 800ca7c:	a201      	add	r2, pc, #4	; (adr r2, 800ca84 <USBD_GetDescriptor+0xb4>)
 800ca7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca82:	bf00      	nop
 800ca84:	0800ca9d 	.word	0x0800ca9d
 800ca88:	0800cad1 	.word	0x0800cad1
 800ca8c:	0800cb05 	.word	0x0800cb05
 800ca90:	0800cb39 	.word	0x0800cb39
 800ca94:	0800cb6d 	.word	0x0800cb6d
 800ca98:	0800cba1 	.word	0x0800cba1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00b      	beq.n	800cac0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	7c12      	ldrb	r2, [r2, #16]
 800cab4:	f107 0108 	add.w	r1, r7, #8
 800cab8:	4610      	mov	r0, r2
 800caba:	4798      	blx	r3
 800cabc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cabe:	e091      	b.n	800cbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cac0:	6839      	ldr	r1, [r7, #0]
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 fab2 	bl	800d02c <USBD_CtlError>
            err++;
 800cac8:	7afb      	ldrb	r3, [r7, #11]
 800caca:	3301      	adds	r3, #1
 800cacc:	72fb      	strb	r3, [r7, #11]
          break;
 800cace:	e089      	b.n	800cbe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00b      	beq.n	800caf4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	7c12      	ldrb	r2, [r2, #16]
 800cae8:	f107 0108 	add.w	r1, r7, #8
 800caec:	4610      	mov	r0, r2
 800caee:	4798      	blx	r3
 800caf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800caf2:	e077      	b.n	800cbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800caf4:	6839      	ldr	r1, [r7, #0]
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 fa98 	bl	800d02c <USBD_CtlError>
            err++;
 800cafc:	7afb      	ldrb	r3, [r7, #11]
 800cafe:	3301      	adds	r3, #1
 800cb00:	72fb      	strb	r3, [r7, #11]
          break;
 800cb02:	e06f      	b.n	800cbe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d00b      	beq.n	800cb28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	7c12      	ldrb	r2, [r2, #16]
 800cb1c:	f107 0108 	add.w	r1, r7, #8
 800cb20:	4610      	mov	r0, r2
 800cb22:	4798      	blx	r3
 800cb24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb26:	e05d      	b.n	800cbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 fa7e 	bl	800d02c <USBD_CtlError>
            err++;
 800cb30:	7afb      	ldrb	r3, [r7, #11]
 800cb32:	3301      	adds	r3, #1
 800cb34:	72fb      	strb	r3, [r7, #11]
          break;
 800cb36:	e055      	b.n	800cbe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb3e:	691b      	ldr	r3, [r3, #16]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00b      	beq.n	800cb5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb4a:	691b      	ldr	r3, [r3, #16]
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	7c12      	ldrb	r2, [r2, #16]
 800cb50:	f107 0108 	add.w	r1, r7, #8
 800cb54:	4610      	mov	r0, r2
 800cb56:	4798      	blx	r3
 800cb58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb5a:	e043      	b.n	800cbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 fa64 	bl	800d02c <USBD_CtlError>
            err++;
 800cb64:	7afb      	ldrb	r3, [r7, #11]
 800cb66:	3301      	adds	r3, #1
 800cb68:	72fb      	strb	r3, [r7, #11]
          break;
 800cb6a:	e03b      	b.n	800cbe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00b      	beq.n	800cb90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb7e:	695b      	ldr	r3, [r3, #20]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	7c12      	ldrb	r2, [r2, #16]
 800cb84:	f107 0108 	add.w	r1, r7, #8
 800cb88:	4610      	mov	r0, r2
 800cb8a:	4798      	blx	r3
 800cb8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb8e:	e029      	b.n	800cbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb90:	6839      	ldr	r1, [r7, #0]
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 fa4a 	bl	800d02c <USBD_CtlError>
            err++;
 800cb98:	7afb      	ldrb	r3, [r7, #11]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb9e:	e021      	b.n	800cbe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cba6:	699b      	ldr	r3, [r3, #24]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00b      	beq.n	800cbc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbb2:	699b      	ldr	r3, [r3, #24]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	7c12      	ldrb	r2, [r2, #16]
 800cbb8:	f107 0108 	add.w	r1, r7, #8
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	4798      	blx	r3
 800cbc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbc2:	e00f      	b.n	800cbe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fa30 	bl	800d02c <USBD_CtlError>
            err++;
 800cbcc:	7afb      	ldrb	r3, [r7, #11]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	72fb      	strb	r3, [r7, #11]
          break;
 800cbd2:	e007      	b.n	800cbe4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cbd4:	6839      	ldr	r1, [r7, #0]
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fa28 	bl	800d02c <USBD_CtlError>
          err++;
 800cbdc:	7afb      	ldrb	r3, [r7, #11]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cbe2:	bf00      	nop
      }
      break;
 800cbe4:	e037      	b.n	800cc56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	7c1b      	ldrb	r3, [r3, #16]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d109      	bne.n	800cc02 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbf6:	f107 0208 	add.w	r2, r7, #8
 800cbfa:	4610      	mov	r0, r2
 800cbfc:	4798      	blx	r3
 800cbfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc00:	e029      	b.n	800cc56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cc02:	6839      	ldr	r1, [r7, #0]
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 fa11 	bl	800d02c <USBD_CtlError>
        err++;
 800cc0a:	7afb      	ldrb	r3, [r7, #11]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	72fb      	strb	r3, [r7, #11]
      break;
 800cc10:	e021      	b.n	800cc56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	7c1b      	ldrb	r3, [r3, #16]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10d      	bne.n	800cc36 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc22:	f107 0208 	add.w	r2, r7, #8
 800cc26:	4610      	mov	r0, r2
 800cc28:	4798      	blx	r3
 800cc2a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	2207      	movs	r2, #7
 800cc32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc34:	e00f      	b.n	800cc56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 f9f7 	bl	800d02c <USBD_CtlError>
        err++;
 800cc3e:	7afb      	ldrb	r3, [r7, #11]
 800cc40:	3301      	adds	r3, #1
 800cc42:	72fb      	strb	r3, [r7, #11]
      break;
 800cc44:	e007      	b.n	800cc56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cc46:	6839      	ldr	r1, [r7, #0]
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f9ef 	bl	800d02c <USBD_CtlError>
      err++;
 800cc4e:	7afb      	ldrb	r3, [r7, #11]
 800cc50:	3301      	adds	r3, #1
 800cc52:	72fb      	strb	r3, [r7, #11]
      break;
 800cc54:	bf00      	nop
  }

  if (err != 0U)
 800cc56:	7afb      	ldrb	r3, [r7, #11]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d11e      	bne.n	800cc9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	88db      	ldrh	r3, [r3, #6]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d016      	beq.n	800cc92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cc64:	893b      	ldrh	r3, [r7, #8]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00e      	beq.n	800cc88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	88da      	ldrh	r2, [r3, #6]
 800cc6e:	893b      	ldrh	r3, [r7, #8]
 800cc70:	4293      	cmp	r3, r2
 800cc72:	bf28      	it	cs
 800cc74:	4613      	movcs	r3, r2
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cc7a:	893b      	ldrh	r3, [r7, #8]
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	68f9      	ldr	r1, [r7, #12]
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 fa44 	bl	800d10e <USBD_CtlSendData>
 800cc86:	e009      	b.n	800cc9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cc88:	6839      	ldr	r1, [r7, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f9ce 	bl	800d02c <USBD_CtlError>
 800cc90:	e004      	b.n	800cc9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 fa95 	bl	800d1c2 <USBD_CtlSendStatus>
 800cc98:	e000      	b.n	800cc9c <USBD_GetDescriptor+0x2cc>
    return;
 800cc9a:	bf00      	nop
  }
}
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop

0800cca4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	889b      	ldrh	r3, [r3, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d131      	bne.n	800cd1a <USBD_SetAddress+0x76>
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	88db      	ldrh	r3, [r3, #6]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d12d      	bne.n	800cd1a <USBD_SetAddress+0x76>
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	885b      	ldrh	r3, [r3, #2]
 800ccc2:	2b7f      	cmp	r3, #127	; 0x7f
 800ccc4:	d829      	bhi.n	800cd1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	885b      	ldrh	r3, [r3, #2]
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	2b03      	cmp	r3, #3
 800ccdc:	d104      	bne.n	800cce8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ccde:	6839      	ldr	r1, [r7, #0]
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 f9a3 	bl	800d02c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cce6:	e01d      	b.n	800cd24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	7bfa      	ldrb	r2, [r7, #15]
 800ccec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ccf0:	7bfb      	ldrb	r3, [r7, #15]
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f003 fcb9 	bl	801066c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 fa61 	bl	800d1c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cd00:	7bfb      	ldrb	r3, [r7, #15]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d004      	beq.n	800cd10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2202      	movs	r2, #2
 800cd0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd0e:	e009      	b.n	800cd24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2201      	movs	r2, #1
 800cd14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd18:	e004      	b.n	800cd24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 f985 	bl	800d02c <USBD_CtlError>
  }
}
 800cd22:	bf00      	nop
 800cd24:	bf00      	nop
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd36:	2300      	movs	r3, #0
 800cd38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	885b      	ldrh	r3, [r3, #2]
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	4b4c      	ldr	r3, [pc, #304]	; (800ce74 <USBD_SetConfig+0x148>)
 800cd42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cd44:	4b4b      	ldr	r3, [pc, #300]	; (800ce74 <USBD_SetConfig+0x148>)
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d905      	bls.n	800cd58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cd4c:	6839      	ldr	r1, [r7, #0]
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 f96c 	bl	800d02c <USBD_CtlError>
    return USBD_FAIL;
 800cd54:	2303      	movs	r3, #3
 800cd56:	e088      	b.n	800ce6a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	d002      	beq.n	800cd6a <USBD_SetConfig+0x3e>
 800cd64:	2b03      	cmp	r3, #3
 800cd66:	d025      	beq.n	800cdb4 <USBD_SetConfig+0x88>
 800cd68:	e071      	b.n	800ce4e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cd6a:	4b42      	ldr	r3, [pc, #264]	; (800ce74 <USBD_SetConfig+0x148>)
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d01c      	beq.n	800cdac <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cd72:	4b40      	ldr	r3, [pc, #256]	; (800ce74 <USBD_SetConfig+0x148>)
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd7c:	4b3d      	ldr	r3, [pc, #244]	; (800ce74 <USBD_SetConfig+0x148>)
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	4619      	mov	r1, r3
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7ff f948 	bl	800c018 <USBD_SetClassConfig>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d004      	beq.n	800cd9c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 f949 	bl	800d02c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd9a:	e065      	b.n	800ce68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 fa10 	bl	800d1c2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2203      	movs	r2, #3
 800cda6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cdaa:	e05d      	b.n	800ce68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f000 fa08 	bl	800d1c2 <USBD_CtlSendStatus>
      break;
 800cdb2:	e059      	b.n	800ce68 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cdb4:	4b2f      	ldr	r3, [pc, #188]	; (800ce74 <USBD_SetConfig+0x148>)
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d112      	bne.n	800cde2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2202      	movs	r2, #2
 800cdc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cdc4:	4b2b      	ldr	r3, [pc, #172]	; (800ce74 <USBD_SetConfig+0x148>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	461a      	mov	r2, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cdce:	4b29      	ldr	r3, [pc, #164]	; (800ce74 <USBD_SetConfig+0x148>)
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7ff f93b 	bl	800c050 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f9f1 	bl	800d1c2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cde0:	e042      	b.n	800ce68 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cde2:	4b24      	ldr	r3, [pc, #144]	; (800ce74 <USBD_SetConfig+0x148>)
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	461a      	mov	r2, r3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d02a      	beq.n	800ce46 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff f929 	bl	800c050 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cdfe:	4b1d      	ldr	r3, [pc, #116]	; (800ce74 <USBD_SetConfig+0x148>)
 800ce00:	781b      	ldrb	r3, [r3, #0]
 800ce02:	461a      	mov	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ce08:	4b1a      	ldr	r3, [pc, #104]	; (800ce74 <USBD_SetConfig+0x148>)
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7ff f902 	bl	800c018 <USBD_SetClassConfig>
 800ce14:	4603      	mov	r3, r0
 800ce16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ce18:	7bfb      	ldrb	r3, [r7, #15]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00f      	beq.n	800ce3e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ce1e:	6839      	ldr	r1, [r7, #0]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 f903 	bl	800d02c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f7ff f90e 	bl	800c050 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2202      	movs	r2, #2
 800ce38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ce3c:	e014      	b.n	800ce68 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f000 f9bf 	bl	800d1c2 <USBD_CtlSendStatus>
      break;
 800ce44:	e010      	b.n	800ce68 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 f9bb 	bl	800d1c2 <USBD_CtlSendStatus>
      break;
 800ce4c:	e00c      	b.n	800ce68 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 f8eb 	bl	800d02c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ce56:	4b07      	ldr	r3, [pc, #28]	; (800ce74 <USBD_SetConfig+0x148>)
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7ff f8f7 	bl	800c050 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ce62:	2303      	movs	r3, #3
 800ce64:	73fb      	strb	r3, [r7, #15]
      break;
 800ce66:	bf00      	nop
  }

  return ret;
 800ce68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	200004ac 	.word	0x200004ac

0800ce78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	88db      	ldrh	r3, [r3, #6]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d004      	beq.n	800ce94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ce8a:	6839      	ldr	r1, [r7, #0]
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f8cd 	bl	800d02c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ce92:	e023      	b.n	800cedc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	dc02      	bgt.n	800cea6 <USBD_GetConfig+0x2e>
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	dc03      	bgt.n	800ceac <USBD_GetConfig+0x34>
 800cea4:	e015      	b.n	800ced2 <USBD_GetConfig+0x5a>
 800cea6:	2b03      	cmp	r3, #3
 800cea8:	d00b      	beq.n	800cec2 <USBD_GetConfig+0x4a>
 800ceaa:	e012      	b.n	800ced2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	3308      	adds	r3, #8
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	4619      	mov	r1, r3
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f927 	bl	800d10e <USBD_CtlSendData>
        break;
 800cec0:	e00c      	b.n	800cedc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	3304      	adds	r3, #4
 800cec6:	2201      	movs	r2, #1
 800cec8:	4619      	mov	r1, r3
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 f91f 	bl	800d10e <USBD_CtlSendData>
        break;
 800ced0:	e004      	b.n	800cedc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ced2:	6839      	ldr	r1, [r7, #0]
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f8a9 	bl	800d02c <USBD_CtlError>
        break;
 800ceda:	bf00      	nop
}
 800cedc:	bf00      	nop
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	3b01      	subs	r3, #1
 800cef8:	2b02      	cmp	r3, #2
 800cefa:	d81e      	bhi.n	800cf3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	88db      	ldrh	r3, [r3, #6]
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	d004      	beq.n	800cf0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 f890 	bl	800d02c <USBD_CtlError>
        break;
 800cf0c:	e01a      	b.n	800cf44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2201      	movs	r2, #1
 800cf12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d005      	beq.n	800cf2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	f043 0202 	orr.w	r2, r3, #2
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	330c      	adds	r3, #12
 800cf2e:	2202      	movs	r2, #2
 800cf30:	4619      	mov	r1, r3
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 f8eb 	bl	800d10e <USBD_CtlSendData>
      break;
 800cf38:	e004      	b.n	800cf44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cf3a:	6839      	ldr	r1, [r7, #0]
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f875 	bl	800d02c <USBD_CtlError>
      break;
 800cf42:	bf00      	nop
  }
}
 800cf44:	bf00      	nop
 800cf46:	3708      	adds	r7, #8
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	885b      	ldrh	r3, [r3, #2]
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d106      	bne.n	800cf6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 f92b 	bl	800d1c2 <USBD_CtlSendStatus>
  }
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	3b01      	subs	r3, #1
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d80b      	bhi.n	800cfa4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	885b      	ldrh	r3, [r3, #2]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d10c      	bne.n	800cfae <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f910 	bl	800d1c2 <USBD_CtlSendStatus>
      }
      break;
 800cfa2:	e004      	b.n	800cfae <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f840 	bl	800d02c <USBD_CtlError>
      break;
 800cfac:	e000      	b.n	800cfb0 <USBD_ClrFeature+0x3c>
      break;
 800cfae:	bf00      	nop
  }
}
 800cfb0:	bf00      	nop
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	781a      	ldrb	r2, [r3, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	781a      	ldrb	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f7ff fabb 	bl	800c55e <SWAPBYTE>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	461a      	mov	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	3301      	adds	r3, #1
 800cff4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	3301      	adds	r3, #1
 800cffa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f7ff faae 	bl	800c55e <SWAPBYTE>
 800d002:	4603      	mov	r3, r0
 800d004:	461a      	mov	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	3301      	adds	r3, #1
 800d00e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	3301      	adds	r3, #1
 800d014:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f7ff faa1 	bl	800c55e <SWAPBYTE>
 800d01c:	4603      	mov	r3, r0
 800d01e:	461a      	mov	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	80da      	strh	r2, [r3, #6]
}
 800d024:	bf00      	nop
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d036:	2180      	movs	r1, #128	; 0x80
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f003 faad 	bl	8010598 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d03e:	2100      	movs	r1, #0
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f003 faa9 	bl	8010598 <USBD_LL_StallEP>
}
 800d046:	bf00      	nop
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b086      	sub	sp, #24
 800d052:	af00      	add	r7, sp, #0
 800d054:	60f8      	str	r0, [r7, #12]
 800d056:	60b9      	str	r1, [r7, #8]
 800d058:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d05a:	2300      	movs	r3, #0
 800d05c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d036      	beq.n	800d0d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d068:	6938      	ldr	r0, [r7, #16]
 800d06a:	f000 f836 	bl	800d0da <USBD_GetLen>
 800d06e:	4603      	mov	r3, r0
 800d070:	3301      	adds	r3, #1
 800d072:	b29b      	uxth	r3, r3
 800d074:	005b      	lsls	r3, r3, #1
 800d076:	b29a      	uxth	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d07c:	7dfb      	ldrb	r3, [r7, #23]
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	4413      	add	r3, r2
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	7812      	ldrb	r2, [r2, #0]
 800d086:	701a      	strb	r2, [r3, #0]
  idx++;
 800d088:	7dfb      	ldrb	r3, [r7, #23]
 800d08a:	3301      	adds	r3, #1
 800d08c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d08e:	7dfb      	ldrb	r3, [r7, #23]
 800d090:	68ba      	ldr	r2, [r7, #8]
 800d092:	4413      	add	r3, r2
 800d094:	2203      	movs	r2, #3
 800d096:	701a      	strb	r2, [r3, #0]
  idx++;
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	3301      	adds	r3, #1
 800d09c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d09e:	e013      	b.n	800d0c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d0a0:	7dfb      	ldrb	r3, [r7, #23]
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	693a      	ldr	r2, [r7, #16]
 800d0a8:	7812      	ldrb	r2, [r2, #0]
 800d0aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	613b      	str	r3, [r7, #16]
    idx++;
 800d0b2:	7dfb      	ldrb	r3, [r7, #23]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d0b8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ba:	68ba      	ldr	r2, [r7, #8]
 800d0bc:	4413      	add	r3, r2
 800d0be:	2200      	movs	r2, #0
 800d0c0:	701a      	strb	r2, [r3, #0]
    idx++;
 800d0c2:	7dfb      	ldrb	r3, [r7, #23]
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d1e7      	bne.n	800d0a0 <USBD_GetString+0x52>
 800d0d0:	e000      	b.n	800d0d4 <USBD_GetString+0x86>
    return;
 800d0d2:	bf00      	nop
  }
}
 800d0d4:	3718      	adds	r7, #24
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b085      	sub	sp, #20
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d0ea:	e005      	b.n	800d0f8 <USBD_GetLen+0x1e>
  {
    len++;
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1f5      	bne.n	800d0ec <USBD_GetLen+0x12>
  }

  return len;
 800d100:	7bfb      	ldrb	r3, [r7, #15]
}
 800d102:	4618      	mov	r0, r3
 800d104:	3714      	adds	r7, #20
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr

0800d10e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b084      	sub	sp, #16
 800d112:	af00      	add	r7, sp, #0
 800d114:	60f8      	str	r0, [r7, #12]
 800d116:	60b9      	str	r1, [r7, #8]
 800d118:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2202      	movs	r2, #2
 800d11e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	68ba      	ldr	r2, [r7, #8]
 800d132:	2100      	movs	r1, #0
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f003 fab8 	bl	80106aa <USBD_LL_Transmit>

  return USBD_OK;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3710      	adds	r7, #16
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	68ba      	ldr	r2, [r7, #8]
 800d154:	2100      	movs	r1, #0
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f003 faa7 	bl	80106aa <USBD_LL_Transmit>

  return USBD_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	60f8      	str	r0, [r7, #12]
 800d16e:	60b9      	str	r1, [r7, #8]
 800d170:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2203      	movs	r2, #3
 800d176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	2100      	movs	r1, #0
 800d190:	68f8      	ldr	r0, [r7, #12]
 800d192:	f003 faab 	bl	80106ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d196:	2300      	movs	r3, #0
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3710      	adds	r7, #16
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	68ba      	ldr	r2, [r7, #8]
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f003 fa9a 	bl	80106ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b082      	sub	sp, #8
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2204      	movs	r2, #4
 800d1ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f003 fa66 	bl	80106aa <USBD_LL_Transmit>

  return USBD_OK;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2205      	movs	r2, #5
 800d1f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	2100      	movs	r1, #0
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f003 fa74 	bl	80106ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
	...

0800d210 <__NVIC_SetPriority>:
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	6039      	str	r1, [r7, #0]
 800d21a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d21c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d220:	2b00      	cmp	r3, #0
 800d222:	db0a      	blt.n	800d23a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	b2da      	uxtb	r2, r3
 800d228:	490c      	ldr	r1, [pc, #48]	; (800d25c <__NVIC_SetPriority+0x4c>)
 800d22a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d22e:	0112      	lsls	r2, r2, #4
 800d230:	b2d2      	uxtb	r2, r2
 800d232:	440b      	add	r3, r1
 800d234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d238:	e00a      	b.n	800d250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	b2da      	uxtb	r2, r3
 800d23e:	4908      	ldr	r1, [pc, #32]	; (800d260 <__NVIC_SetPriority+0x50>)
 800d240:	79fb      	ldrb	r3, [r7, #7]
 800d242:	f003 030f 	and.w	r3, r3, #15
 800d246:	3b04      	subs	r3, #4
 800d248:	0112      	lsls	r2, r2, #4
 800d24a:	b2d2      	uxtb	r2, r2
 800d24c:	440b      	add	r3, r1
 800d24e:	761a      	strb	r2, [r3, #24]
}
 800d250:	bf00      	nop
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr
 800d25c:	e000e100 	.word	0xe000e100
 800d260:	e000ed00 	.word	0xe000ed00

0800d264 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d264:	b580      	push	{r7, lr}
 800d266:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d268:	4b05      	ldr	r3, [pc, #20]	; (800d280 <SysTick_Handler+0x1c>)
 800d26a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d26c:	f001 fcfe 	bl	800ec6c <xTaskGetSchedulerState>
 800d270:	4603      	mov	r3, r0
 800d272:	2b01      	cmp	r3, #1
 800d274:	d001      	beq.n	800d27a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d276:	f002 fae7 	bl	800f848 <xPortSysTickHandler>
  }
}
 800d27a:	bf00      	nop
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	e000e010 	.word	0xe000e010

0800d284 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d284:	b580      	push	{r7, lr}
 800d286:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d288:	2100      	movs	r1, #0
 800d28a:	f06f 0004 	mvn.w	r0, #4
 800d28e:	f7ff ffbf 	bl	800d210 <__NVIC_SetPriority>
#endif
}
 800d292:	bf00      	nop
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d29e:	f3ef 8305 	mrs	r3, IPSR
 800d2a2:	603b      	str	r3, [r7, #0]
  return(result);
 800d2a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d003      	beq.n	800d2b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d2aa:	f06f 0305 	mvn.w	r3, #5
 800d2ae:	607b      	str	r3, [r7, #4]
 800d2b0:	e00c      	b.n	800d2cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d2b2:	4b0a      	ldr	r3, [pc, #40]	; (800d2dc <osKernelInitialize+0x44>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d105      	bne.n	800d2c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d2ba:	4b08      	ldr	r3, [pc, #32]	; (800d2dc <osKernelInitialize+0x44>)
 800d2bc:	2201      	movs	r2, #1
 800d2be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	607b      	str	r3, [r7, #4]
 800d2c4:	e002      	b.n	800d2cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d2cc:	687b      	ldr	r3, [r7, #4]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	370c      	adds	r7, #12
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop
 800d2dc:	200004b0 	.word	0x200004b0

0800d2e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2e6:	f3ef 8305 	mrs	r3, IPSR
 800d2ea:	603b      	str	r3, [r7, #0]
  return(result);
 800d2ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d003      	beq.n	800d2fa <osKernelStart+0x1a>
    stat = osErrorISR;
 800d2f2:	f06f 0305 	mvn.w	r3, #5
 800d2f6:	607b      	str	r3, [r7, #4]
 800d2f8:	e010      	b.n	800d31c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d2fa:	4b0b      	ldr	r3, [pc, #44]	; (800d328 <osKernelStart+0x48>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d109      	bne.n	800d316 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d302:	f7ff ffbf 	bl	800d284 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d306:	4b08      	ldr	r3, [pc, #32]	; (800d328 <osKernelStart+0x48>)
 800d308:	2202      	movs	r2, #2
 800d30a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d30c:	f001 f866 	bl	800e3dc <vTaskStartScheduler>
      stat = osOK;
 800d310:	2300      	movs	r3, #0
 800d312:	607b      	str	r3, [r7, #4]
 800d314:	e002      	b.n	800d31c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d316:	f04f 33ff 	mov.w	r3, #4294967295
 800d31a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d31c:	687b      	ldr	r3, [r7, #4]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	200004b0 	.word	0x200004b0

0800d32c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b08e      	sub	sp, #56	; 0x38
 800d330:	af04      	add	r7, sp, #16
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d338:	2300      	movs	r3, #0
 800d33a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d33c:	f3ef 8305 	mrs	r3, IPSR
 800d340:	617b      	str	r3, [r7, #20]
  return(result);
 800d342:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d344:	2b00      	cmp	r3, #0
 800d346:	d17e      	bne.n	800d446 <osThreadNew+0x11a>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d07b      	beq.n	800d446 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d34e:	2380      	movs	r3, #128	; 0x80
 800d350:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d352:	2318      	movs	r3, #24
 800d354:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d356:	2300      	movs	r3, #0
 800d358:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d35a:	f04f 33ff 	mov.w	r3, #4294967295
 800d35e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d045      	beq.n	800d3f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d002      	beq.n	800d374 <osThreadNew+0x48>
        name = attr->name;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	699b      	ldr	r3, [r3, #24]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d002      	beq.n	800d382 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	699b      	ldr	r3, [r3, #24]
 800d380:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d008      	beq.n	800d39a <osThreadNew+0x6e>
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	2b38      	cmp	r3, #56	; 0x38
 800d38c:	d805      	bhi.n	800d39a <osThreadNew+0x6e>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	f003 0301 	and.w	r3, r3, #1
 800d396:	2b00      	cmp	r3, #0
 800d398:	d001      	beq.n	800d39e <osThreadNew+0x72>
        return (NULL);
 800d39a:	2300      	movs	r3, #0
 800d39c:	e054      	b.n	800d448 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	695b      	ldr	r3, [r3, #20]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d003      	beq.n	800d3ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	089b      	lsrs	r3, r3, #2
 800d3ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00e      	beq.n	800d3d4 <osThreadNew+0xa8>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	2b5b      	cmp	r3, #91	; 0x5b
 800d3bc:	d90a      	bls.n	800d3d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d006      	beq.n	800d3d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	695b      	ldr	r3, [r3, #20]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d002      	beq.n	800d3d4 <osThreadNew+0xa8>
        mem = 1;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	61bb      	str	r3, [r7, #24]
 800d3d2:	e010      	b.n	800d3f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d10c      	bne.n	800d3f6 <osThreadNew+0xca>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d108      	bne.n	800d3f6 <osThreadNew+0xca>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d104      	bne.n	800d3f6 <osThreadNew+0xca>
          mem = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	61bb      	str	r3, [r7, #24]
 800d3f0:	e001      	b.n	800d3f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d110      	bne.n	800d41e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d404:	9202      	str	r2, [sp, #8]
 800d406:	9301      	str	r3, [sp, #4]
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	6a3a      	ldr	r2, [r7, #32]
 800d410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f000 fe0c 	bl	800e030 <xTaskCreateStatic>
 800d418:	4603      	mov	r3, r0
 800d41a:	613b      	str	r3, [r7, #16]
 800d41c:	e013      	b.n	800d446 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d110      	bne.n	800d446 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d424:	6a3b      	ldr	r3, [r7, #32]
 800d426:	b29a      	uxth	r2, r3
 800d428:	f107 0310 	add.w	r3, r7, #16
 800d42c:	9301      	str	r3, [sp, #4]
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f000 fe57 	bl	800e0ea <xTaskCreate>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d001      	beq.n	800d446 <osThreadNew+0x11a>
            hTask = NULL;
 800d442:	2300      	movs	r3, #0
 800d444:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d446:	693b      	ldr	r3, [r7, #16]
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3728      	adds	r7, #40	; 0x28
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d458:	f3ef 8305 	mrs	r3, IPSR
 800d45c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d45e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d460:	2b00      	cmp	r3, #0
 800d462:	d003      	beq.n	800d46c <osDelay+0x1c>
    stat = osErrorISR;
 800d464:	f06f 0305 	mvn.w	r3, #5
 800d468:	60fb      	str	r3, [r7, #12]
 800d46a:	e007      	b.n	800d47c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d002      	beq.n	800d47c <osDelay+0x2c>
      vTaskDelay(ticks);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 ff7c 	bl	800e374 <vTaskDelay>
    }
  }

  return (stat);
 800d47c:	68fb      	ldr	r3, [r7, #12]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3710      	adds	r7, #16
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
	...

0800d488 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4a07      	ldr	r2, [pc, #28]	; (800d4b4 <vApplicationGetIdleTaskMemory+0x2c>)
 800d498:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	4a06      	ldr	r2, [pc, #24]	; (800d4b8 <vApplicationGetIdleTaskMemory+0x30>)
 800d49e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2280      	movs	r2, #128	; 0x80
 800d4a4:	601a      	str	r2, [r3, #0]
}
 800d4a6:	bf00      	nop
 800d4a8:	3714      	adds	r7, #20
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
 800d4b2:	bf00      	nop
 800d4b4:	200004b4 	.word	0x200004b4
 800d4b8:	20000510 	.word	0x20000510

0800d4bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d4bc:	b480      	push	{r7}
 800d4be:	b085      	sub	sp, #20
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	60f8      	str	r0, [r7, #12]
 800d4c4:	60b9      	str	r1, [r7, #8]
 800d4c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	4a07      	ldr	r2, [pc, #28]	; (800d4e8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d4cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	4a06      	ldr	r2, [pc, #24]	; (800d4ec <vApplicationGetTimerTaskMemory+0x30>)
 800d4d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4da:	601a      	str	r2, [r3, #0]
}
 800d4dc:	bf00      	nop
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr
 800d4e8:	20000710 	.word	0x20000710
 800d4ec:	2000076c 	.word	0x2000076c

0800d4f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f103 0208 	add.w	r2, r3, #8
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f04f 32ff 	mov.w	r2, #4294967295
 800d508:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f103 0208 	add.w	r2, r3, #8
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f103 0208 	add.w	r2, r3, #8
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2200      	movs	r2, #0
 800d522:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d524:	bf00      	nop
 800d526:	370c      	adds	r7, #12
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d53e:	bf00      	nop
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d54a:	b480      	push	{r7}
 800d54c:	b085      	sub	sp, #20
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	68fa      	ldr	r2, [r7, #12]
 800d55e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	689a      	ldr	r2, [r3, #8]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	683a      	ldr	r2, [r7, #0]
 800d56e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	683a      	ldr	r2, [r7, #0]
 800d574:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	1c5a      	adds	r2, r3, #1
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	601a      	str	r2, [r3, #0]
}
 800d586:	bf00      	nop
 800d588:	3714      	adds	r7, #20
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr

0800d592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d592:	b480      	push	{r7}
 800d594:	b085      	sub	sp, #20
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a8:	d103      	bne.n	800d5b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	60fb      	str	r3, [r7, #12]
 800d5b0:	e00c      	b.n	800d5cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	3308      	adds	r3, #8
 800d5b6:	60fb      	str	r3, [r7, #12]
 800d5b8:	e002      	b.n	800d5c0 <vListInsert+0x2e>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	60fb      	str	r3, [r7, #12]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d2f6      	bcs.n	800d5ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	685a      	ldr	r2, [r3, #4]
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	683a      	ldr	r2, [r7, #0]
 800d5da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	683a      	ldr	r2, [r7, #0]
 800d5e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	1c5a      	adds	r2, r3, #1
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	601a      	str	r2, [r3, #0]
}
 800d5f8:	bf00      	nop
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	691b      	ldr	r3, [r3, #16]
 800d610:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	6892      	ldr	r2, [r2, #8]
 800d61a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	6852      	ldr	r2, [r2, #4]
 800d624:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d103      	bne.n	800d638 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	689a      	ldr	r2, [r3, #8]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	1e5a      	subs	r2, r3, #1
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3714      	adds	r7, #20
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10a      	bne.n	800d682 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d67e:	bf00      	nop
 800d680:	e7fe      	b.n	800d680 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d682:	f002 f84f 	bl	800f724 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d68e:	68f9      	ldr	r1, [r7, #12]
 800d690:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d692:	fb01 f303 	mul.w	r3, r1, r3
 800d696:	441a      	add	r2, r3
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	68f9      	ldr	r1, [r7, #12]
 800d6b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d6b8:	fb01 f303 	mul.w	r3, r1, r3
 800d6bc:	441a      	add	r2, r3
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	22ff      	movs	r2, #255	; 0xff
 800d6c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	22ff      	movs	r2, #255	; 0xff
 800d6ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d114      	bne.n	800d702 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	691b      	ldr	r3, [r3, #16]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d01a      	beq.n	800d716 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	3310      	adds	r3, #16
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f001 f903 	bl	800e8f0 <xTaskRemoveFromEventList>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d012      	beq.n	800d716 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d6f0:	4b0c      	ldr	r3, [pc, #48]	; (800d724 <xQueueGenericReset+0xcc>)
 800d6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f6:	601a      	str	r2, [r3, #0]
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	f3bf 8f6f 	isb	sy
 800d700:	e009      	b.n	800d716 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	3310      	adds	r3, #16
 800d706:	4618      	mov	r0, r3
 800d708:	f7ff fef2 	bl	800d4f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	3324      	adds	r3, #36	; 0x24
 800d710:	4618      	mov	r0, r3
 800d712:	f7ff feed 	bl	800d4f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d716:	f002 f835 	bl	800f784 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d71a:	2301      	movs	r3, #1
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	e000ed04 	.word	0xe000ed04

0800d728 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b08e      	sub	sp, #56	; 0x38
 800d72c:	af02      	add	r7, sp, #8
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	607a      	str	r2, [r7, #4]
 800d734:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10a      	bne.n	800d752 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d74e:	bf00      	nop
 800d750:	e7fe      	b.n	800d750 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d10a      	bne.n	800d76e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75c:	f383 8811 	msr	BASEPRI, r3
 800d760:	f3bf 8f6f 	isb	sy
 800d764:	f3bf 8f4f 	dsb	sy
 800d768:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d76a:	bf00      	nop
 800d76c:	e7fe      	b.n	800d76c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d002      	beq.n	800d77a <xQueueGenericCreateStatic+0x52>
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <xQueueGenericCreateStatic+0x56>
 800d77a:	2301      	movs	r3, #1
 800d77c:	e000      	b.n	800d780 <xQueueGenericCreateStatic+0x58>
 800d77e:	2300      	movs	r3, #0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10a      	bne.n	800d79a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	623b      	str	r3, [r7, #32]
}
 800d796:	bf00      	nop
 800d798:	e7fe      	b.n	800d798 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d102      	bne.n	800d7a6 <xQueueGenericCreateStatic+0x7e>
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d101      	bne.n	800d7aa <xQueueGenericCreateStatic+0x82>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e000      	b.n	800d7ac <xQueueGenericCreateStatic+0x84>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10a      	bne.n	800d7c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b4:	f383 8811 	msr	BASEPRI, r3
 800d7b8:	f3bf 8f6f 	isb	sy
 800d7bc:	f3bf 8f4f 	dsb	sy
 800d7c0:	61fb      	str	r3, [r7, #28]
}
 800d7c2:	bf00      	nop
 800d7c4:	e7fe      	b.n	800d7c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d7c6:	2350      	movs	r3, #80	; 0x50
 800d7c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	2b50      	cmp	r3, #80	; 0x50
 800d7ce:	d00a      	beq.n	800d7e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d4:	f383 8811 	msr	BASEPRI, r3
 800d7d8:	f3bf 8f6f 	isb	sy
 800d7dc:	f3bf 8f4f 	dsb	sy
 800d7e0:	61bb      	str	r3, [r7, #24]
}
 800d7e2:	bf00      	nop
 800d7e4:	e7fe      	b.n	800d7e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d7e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00d      	beq.n	800d80e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d7fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d800:	9300      	str	r3, [sp, #0]
 800d802:	4613      	mov	r3, r2
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	68b9      	ldr	r1, [r7, #8]
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f000 f805 	bl	800d818 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d810:	4618      	mov	r0, r3
 800d812:	3730      	adds	r7, #48	; 0x30
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
 800d824:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d103      	bne.n	800d834 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	69ba      	ldr	r2, [r7, #24]
 800d830:	601a      	str	r2, [r3, #0]
 800d832:	e002      	b.n	800d83a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	68fa      	ldr	r2, [r7, #12]
 800d83e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d846:	2101      	movs	r1, #1
 800d848:	69b8      	ldr	r0, [r7, #24]
 800d84a:	f7ff ff05 	bl	800d658 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	78fa      	ldrb	r2, [r7, #3]
 800d852:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d856:	bf00      	nop
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
	...

0800d860 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b08e      	sub	sp, #56	; 0x38
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d86e:	2300      	movs	r3, #0
 800d870:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10a      	bne.n	800d892 <xQueueGenericSend+0x32>
	__asm volatile
 800d87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d880:	f383 8811 	msr	BASEPRI, r3
 800d884:	f3bf 8f6f 	isb	sy
 800d888:	f3bf 8f4f 	dsb	sy
 800d88c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d88e:	bf00      	nop
 800d890:	e7fe      	b.n	800d890 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d103      	bne.n	800d8a0 <xQueueGenericSend+0x40>
 800d898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d101      	bne.n	800d8a4 <xQueueGenericSend+0x44>
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e000      	b.n	800d8a6 <xQueueGenericSend+0x46>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d10a      	bne.n	800d8c0 <xQueueGenericSend+0x60>
	__asm volatile
 800d8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ae:	f383 8811 	msr	BASEPRI, r3
 800d8b2:	f3bf 8f6f 	isb	sy
 800d8b6:	f3bf 8f4f 	dsb	sy
 800d8ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d8bc:	bf00      	nop
 800d8be:	e7fe      	b.n	800d8be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	2b02      	cmp	r3, #2
 800d8c4:	d103      	bne.n	800d8ce <xQueueGenericSend+0x6e>
 800d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d101      	bne.n	800d8d2 <xQueueGenericSend+0x72>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e000      	b.n	800d8d4 <xQueueGenericSend+0x74>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d10a      	bne.n	800d8ee <xQueueGenericSend+0x8e>
	__asm volatile
 800d8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8dc:	f383 8811 	msr	BASEPRI, r3
 800d8e0:	f3bf 8f6f 	isb	sy
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	623b      	str	r3, [r7, #32]
}
 800d8ea:	bf00      	nop
 800d8ec:	e7fe      	b.n	800d8ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8ee:	f001 f9bd 	bl	800ec6c <xTaskGetSchedulerState>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d102      	bne.n	800d8fe <xQueueGenericSend+0x9e>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d101      	bne.n	800d902 <xQueueGenericSend+0xa2>
 800d8fe:	2301      	movs	r3, #1
 800d900:	e000      	b.n	800d904 <xQueueGenericSend+0xa4>
 800d902:	2300      	movs	r3, #0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10a      	bne.n	800d91e <xQueueGenericSend+0xbe>
	__asm volatile
 800d908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90c:	f383 8811 	msr	BASEPRI, r3
 800d910:	f3bf 8f6f 	isb	sy
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	61fb      	str	r3, [r7, #28]
}
 800d91a:	bf00      	nop
 800d91c:	e7fe      	b.n	800d91c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d91e:	f001 ff01 	bl	800f724 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d302      	bcc.n	800d934 <xQueueGenericSend+0xd4>
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	2b02      	cmp	r3, #2
 800d932:	d129      	bne.n	800d988 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d934:	683a      	ldr	r2, [r7, #0]
 800d936:	68b9      	ldr	r1, [r7, #8]
 800d938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d93a:	f000 fa0b 	bl	800dd54 <prvCopyDataToQueue>
 800d93e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d944:	2b00      	cmp	r3, #0
 800d946:	d010      	beq.n	800d96a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94a:	3324      	adds	r3, #36	; 0x24
 800d94c:	4618      	mov	r0, r3
 800d94e:	f000 ffcf 	bl	800e8f0 <xTaskRemoveFromEventList>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d013      	beq.n	800d980 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d958:	4b3f      	ldr	r3, [pc, #252]	; (800da58 <xQueueGenericSend+0x1f8>)
 800d95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d95e:	601a      	str	r2, [r3, #0]
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	e00a      	b.n	800d980 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d007      	beq.n	800d980 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d970:	4b39      	ldr	r3, [pc, #228]	; (800da58 <xQueueGenericSend+0x1f8>)
 800d972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d976:	601a      	str	r2, [r3, #0]
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d980:	f001 ff00 	bl	800f784 <vPortExitCritical>
				return pdPASS;
 800d984:	2301      	movs	r3, #1
 800d986:	e063      	b.n	800da50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d103      	bne.n	800d996 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d98e:	f001 fef9 	bl	800f784 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d992:	2300      	movs	r3, #0
 800d994:	e05c      	b.n	800da50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d106      	bne.n	800d9aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d99c:	f107 0314 	add.w	r3, r7, #20
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f001 f809 	bl	800e9b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9aa:	f001 feeb 	bl	800f784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9ae:	f000 fd7b 	bl	800e4a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9b2:	f001 feb7 	bl	800f724 <vPortEnterCritical>
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9bc:	b25b      	sxtb	r3, r3
 800d9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c2:	d103      	bne.n	800d9cc <xQueueGenericSend+0x16c>
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9d2:	b25b      	sxtb	r3, r3
 800d9d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9d8:	d103      	bne.n	800d9e2 <xQueueGenericSend+0x182>
 800d9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9e2:	f001 fecf 	bl	800f784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9e6:	1d3a      	adds	r2, r7, #4
 800d9e8:	f107 0314 	add.w	r3, r7, #20
 800d9ec:	4611      	mov	r1, r2
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f000 fff8 	bl	800e9e4 <xTaskCheckForTimeOut>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d124      	bne.n	800da44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d9fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9fc:	f000 faa2 	bl	800df44 <prvIsQueueFull>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d018      	beq.n	800da38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da08:	3310      	adds	r3, #16
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	4611      	mov	r1, r2
 800da0e:	4618      	mov	r0, r3
 800da10:	f000 ff1e 	bl	800e850 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da16:	f000 fa2d 	bl	800de74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da1a:	f000 fd53 	bl	800e4c4 <xTaskResumeAll>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	f47f af7c 	bne.w	800d91e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800da26:	4b0c      	ldr	r3, [pc, #48]	; (800da58 <xQueueGenericSend+0x1f8>)
 800da28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da2c:	601a      	str	r2, [r3, #0]
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	e772      	b.n	800d91e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da3a:	f000 fa1b 	bl	800de74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da3e:	f000 fd41 	bl	800e4c4 <xTaskResumeAll>
 800da42:	e76c      	b.n	800d91e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da46:	f000 fa15 	bl	800de74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da4a:	f000 fd3b 	bl	800e4c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da50:	4618      	mov	r0, r3
 800da52:	3738      	adds	r7, #56	; 0x38
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	e000ed04 	.word	0xe000ed04

0800da5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b090      	sub	sp, #64	; 0x40
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	607a      	str	r2, [r7, #4]
 800da68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800da6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da70:	2b00      	cmp	r3, #0
 800da72:	d10a      	bne.n	800da8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800da74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da78:	f383 8811 	msr	BASEPRI, r3
 800da7c:	f3bf 8f6f 	isb	sy
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800da86:	bf00      	nop
 800da88:	e7fe      	b.n	800da88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d103      	bne.n	800da98 <xQueueGenericSendFromISR+0x3c>
 800da90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da94:	2b00      	cmp	r3, #0
 800da96:	d101      	bne.n	800da9c <xQueueGenericSendFromISR+0x40>
 800da98:	2301      	movs	r3, #1
 800da9a:	e000      	b.n	800da9e <xQueueGenericSendFromISR+0x42>
 800da9c:	2300      	movs	r3, #0
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d10a      	bne.n	800dab8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800daa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa6:	f383 8811 	msr	BASEPRI, r3
 800daaa:	f3bf 8f6f 	isb	sy
 800daae:	f3bf 8f4f 	dsb	sy
 800dab2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dab4:	bf00      	nop
 800dab6:	e7fe      	b.n	800dab6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	2b02      	cmp	r3, #2
 800dabc:	d103      	bne.n	800dac6 <xQueueGenericSendFromISR+0x6a>
 800dabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d101      	bne.n	800daca <xQueueGenericSendFromISR+0x6e>
 800dac6:	2301      	movs	r3, #1
 800dac8:	e000      	b.n	800dacc <xQueueGenericSendFromISR+0x70>
 800daca:	2300      	movs	r3, #0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d10a      	bne.n	800dae6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800dad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dad4:	f383 8811 	msr	BASEPRI, r3
 800dad8:	f3bf 8f6f 	isb	sy
 800dadc:	f3bf 8f4f 	dsb	sy
 800dae0:	623b      	str	r3, [r7, #32]
}
 800dae2:	bf00      	nop
 800dae4:	e7fe      	b.n	800dae4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dae6:	f001 feff 	bl	800f8e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800daea:	f3ef 8211 	mrs	r2, BASEPRI
 800daee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf2:	f383 8811 	msr	BASEPRI, r3
 800daf6:	f3bf 8f6f 	isb	sy
 800dafa:	f3bf 8f4f 	dsb	sy
 800dafe:	61fa      	str	r2, [r7, #28]
 800db00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800db02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db0e:	429a      	cmp	r2, r3
 800db10:	d302      	bcc.n	800db18 <xQueueGenericSendFromISR+0xbc>
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	2b02      	cmp	r3, #2
 800db16:	d12f      	bne.n	800db78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db28:	683a      	ldr	r2, [r7, #0]
 800db2a:	68b9      	ldr	r1, [r7, #8]
 800db2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db2e:	f000 f911 	bl	800dd54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800db36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db3a:	d112      	bne.n	800db62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db40:	2b00      	cmp	r3, #0
 800db42:	d016      	beq.n	800db72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db46:	3324      	adds	r3, #36	; 0x24
 800db48:	4618      	mov	r0, r3
 800db4a:	f000 fed1 	bl	800e8f0 <xTaskRemoveFromEventList>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d00e      	beq.n	800db72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d00b      	beq.n	800db72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2201      	movs	r2, #1
 800db5e:	601a      	str	r2, [r3, #0]
 800db60:	e007      	b.n	800db72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800db66:	3301      	adds	r3, #1
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	b25a      	sxtb	r2, r3
 800db6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800db72:	2301      	movs	r3, #1
 800db74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800db76:	e001      	b.n	800db7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800db78:	2300      	movs	r3, #0
 800db7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800db86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3740      	adds	r7, #64	; 0x40
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
	...

0800db94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b08c      	sub	sp, #48	; 0x30
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dba0:	2300      	movs	r3, #0
 800dba2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10a      	bne.n	800dbc4 <xQueueReceive+0x30>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	623b      	str	r3, [r7, #32]
}
 800dbc0:	bf00      	nop
 800dbc2:	e7fe      	b.n	800dbc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d103      	bne.n	800dbd2 <xQueueReceive+0x3e>
 800dbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d101      	bne.n	800dbd6 <xQueueReceive+0x42>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e000      	b.n	800dbd8 <xQueueReceive+0x44>
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d10a      	bne.n	800dbf2 <xQueueReceive+0x5e>
	__asm volatile
 800dbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe0:	f383 8811 	msr	BASEPRI, r3
 800dbe4:	f3bf 8f6f 	isb	sy
 800dbe8:	f3bf 8f4f 	dsb	sy
 800dbec:	61fb      	str	r3, [r7, #28]
}
 800dbee:	bf00      	nop
 800dbf0:	e7fe      	b.n	800dbf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dbf2:	f001 f83b 	bl	800ec6c <xTaskGetSchedulerState>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d102      	bne.n	800dc02 <xQueueReceive+0x6e>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <xQueueReceive+0x72>
 800dc02:	2301      	movs	r3, #1
 800dc04:	e000      	b.n	800dc08 <xQueueReceive+0x74>
 800dc06:	2300      	movs	r3, #0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d10a      	bne.n	800dc22 <xQueueReceive+0x8e>
	__asm volatile
 800dc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc10:	f383 8811 	msr	BASEPRI, r3
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	61bb      	str	r3, [r7, #24]
}
 800dc1e:	bf00      	nop
 800dc20:	e7fe      	b.n	800dc20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc22:	f001 fd7f 	bl	800f724 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d01f      	beq.n	800dc72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc32:	68b9      	ldr	r1, [r7, #8]
 800dc34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc36:	f000 f8f7 	bl	800de28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3c:	1e5a      	subs	r2, r3, #1
 800dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00f      	beq.n	800dc6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4c:	3310      	adds	r3, #16
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f000 fe4e 	bl	800e8f0 <xTaskRemoveFromEventList>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d007      	beq.n	800dc6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc5a:	4b3d      	ldr	r3, [pc, #244]	; (800dd50 <xQueueReceive+0x1bc>)
 800dc5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc60:	601a      	str	r2, [r3, #0]
 800dc62:	f3bf 8f4f 	dsb	sy
 800dc66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc6a:	f001 fd8b 	bl	800f784 <vPortExitCritical>
				return pdPASS;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e069      	b.n	800dd46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d103      	bne.n	800dc80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dc78:	f001 fd84 	bl	800f784 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	e062      	b.n	800dd46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d106      	bne.n	800dc94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dc86:	f107 0310 	add.w	r3, r7, #16
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f000 fe94 	bl	800e9b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dc90:	2301      	movs	r3, #1
 800dc92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dc94:	f001 fd76 	bl	800f784 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dc98:	f000 fc06 	bl	800e4a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dc9c:	f001 fd42 	bl	800f724 <vPortEnterCritical>
 800dca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dca6:	b25b      	sxtb	r3, r3
 800dca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcac:	d103      	bne.n	800dcb6 <xQueueReceive+0x122>
 800dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dcbc:	b25b      	sxtb	r3, r3
 800dcbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc2:	d103      	bne.n	800dccc <xQueueReceive+0x138>
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dccc:	f001 fd5a 	bl	800f784 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dcd0:	1d3a      	adds	r2, r7, #4
 800dcd2:	f107 0310 	add.w	r3, r7, #16
 800dcd6:	4611      	mov	r1, r2
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 fe83 	bl	800e9e4 <xTaskCheckForTimeOut>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d123      	bne.n	800dd2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dce6:	f000 f917 	bl	800df18 <prvIsQueueEmpty>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d017      	beq.n	800dd20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf2:	3324      	adds	r3, #36	; 0x24
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f000 fda9 	bl	800e850 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dcfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd00:	f000 f8b8 	bl	800de74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd04:	f000 fbde 	bl	800e4c4 <xTaskResumeAll>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d189      	bne.n	800dc22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dd0e:	4b10      	ldr	r3, [pc, #64]	; (800dd50 <xQueueReceive+0x1bc>)
 800dd10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	e780      	b.n	800dc22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd22:	f000 f8a7 	bl	800de74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd26:	f000 fbcd 	bl	800e4c4 <xTaskResumeAll>
 800dd2a:	e77a      	b.n	800dc22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd2e:	f000 f8a1 	bl	800de74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd32:	f000 fbc7 	bl	800e4c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd38:	f000 f8ee 	bl	800df18 <prvIsQueueEmpty>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	f43f af6f 	beq.w	800dc22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3730      	adds	r7, #48	; 0x30
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	e000ed04 	.word	0xe000ed04

0800dd54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b086      	sub	sp, #24
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dd60:	2300      	movs	r3, #0
 800dd62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d10d      	bne.n	800dd8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d14d      	bne.n	800de16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f000 ff92 	bl	800eca8 <xTaskPriorityDisinherit>
 800dd84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	609a      	str	r2, [r3, #8]
 800dd8c:	e043      	b.n	800de16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d119      	bne.n	800ddc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6858      	ldr	r0, [r3, #4]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd9c:	461a      	mov	r2, r3
 800dd9e:	68b9      	ldr	r1, [r7, #8]
 800dda0:	f002 fd46 	bl	8010830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	685a      	ldr	r2, [r3, #4]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddac:	441a      	add	r2, r3
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	685a      	ldr	r2, [r3, #4]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	689b      	ldr	r3, [r3, #8]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d32b      	bcc.n	800de16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	605a      	str	r2, [r3, #4]
 800ddc6:	e026      	b.n	800de16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	68d8      	ldr	r0, [r3, #12]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	68b9      	ldr	r1, [r7, #8]
 800ddd4:	f002 fd2c 	bl	8010830 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	68da      	ldr	r2, [r3, #12]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde0:	425b      	negs	r3, r3
 800dde2:	441a      	add	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	68da      	ldr	r2, [r3, #12]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d207      	bcs.n	800de04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	689a      	ldr	r2, [r3, #8]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddfc:	425b      	negs	r3, r3
 800ddfe:	441a      	add	r2, r3
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b02      	cmp	r3, #2
 800de08:	d105      	bne.n	800de16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d002      	beq.n	800de16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	3b01      	subs	r3, #1
 800de14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	1c5a      	adds	r2, r3, #1
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800de1e:	697b      	ldr	r3, [r7, #20]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de36:	2b00      	cmp	r3, #0
 800de38:	d018      	beq.n	800de6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	68da      	ldr	r2, [r3, #12]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de42:	441a      	add	r2, r3
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	68da      	ldr	r2, [r3, #12]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	429a      	cmp	r2, r3
 800de52:	d303      	bcc.n	800de5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	68d9      	ldr	r1, [r3, #12]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de64:	461a      	mov	r2, r3
 800de66:	6838      	ldr	r0, [r7, #0]
 800de68:	f002 fce2 	bl	8010830 <memcpy>
	}
}
 800de6c:	bf00      	nop
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800de7c:	f001 fc52 	bl	800f724 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800de88:	e011      	b.n	800deae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d012      	beq.n	800deb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	3324      	adds	r3, #36	; 0x24
 800de96:	4618      	mov	r0, r3
 800de98:	f000 fd2a 	bl	800e8f0 <xTaskRemoveFromEventList>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dea2:	f000 fe01 	bl	800eaa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dea6:	7bfb      	ldrb	r3, [r7, #15]
 800dea8:	3b01      	subs	r3, #1
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800deae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	dce9      	bgt.n	800de8a <prvUnlockQueue+0x16>
 800deb6:	e000      	b.n	800deba <prvUnlockQueue+0x46>
					break;
 800deb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	22ff      	movs	r2, #255	; 0xff
 800debe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dec2:	f001 fc5f 	bl	800f784 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dec6:	f001 fc2d 	bl	800f724 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ded0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ded2:	e011      	b.n	800def8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	691b      	ldr	r3, [r3, #16]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d012      	beq.n	800df02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3310      	adds	r3, #16
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 fd05 	bl	800e8f0 <xTaskRemoveFromEventList>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d001      	beq.n	800def0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800deec:	f000 fddc 	bl	800eaa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800def0:	7bbb      	ldrb	r3, [r7, #14]
 800def2:	3b01      	subs	r3, #1
 800def4:	b2db      	uxtb	r3, r3
 800def6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800def8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800defc:	2b00      	cmp	r3, #0
 800defe:	dce9      	bgt.n	800ded4 <prvUnlockQueue+0x60>
 800df00:	e000      	b.n	800df04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	22ff      	movs	r2, #255	; 0xff
 800df08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800df0c:	f001 fc3a 	bl	800f784 <vPortExitCritical>
}
 800df10:	bf00      	nop
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df20:	f001 fc00 	bl	800f724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d102      	bne.n	800df32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800df2c:	2301      	movs	r3, #1
 800df2e:	60fb      	str	r3, [r7, #12]
 800df30:	e001      	b.n	800df36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800df32:	2300      	movs	r3, #0
 800df34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df36:	f001 fc25 	bl	800f784 <vPortExitCritical>

	return xReturn;
 800df3a:	68fb      	ldr	r3, [r7, #12]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df4c:	f001 fbea 	bl	800f724 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df58:	429a      	cmp	r2, r3
 800df5a:	d102      	bne.n	800df62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800df5c:	2301      	movs	r3, #1
 800df5e:	60fb      	str	r3, [r7, #12]
 800df60:	e001      	b.n	800df66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800df62:	2300      	movs	r3, #0
 800df64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800df66:	f001 fc0d 	bl	800f784 <vPortExitCritical>

	return xReturn;
 800df6a:	68fb      	ldr	r3, [r7, #12]
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800df74:	b480      	push	{r7}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800df7e:	2300      	movs	r3, #0
 800df80:	60fb      	str	r3, [r7, #12]
 800df82:	e014      	b.n	800dfae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800df84:	4a0f      	ldr	r2, [pc, #60]	; (800dfc4 <vQueueAddToRegistry+0x50>)
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d10b      	bne.n	800dfa8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800df90:	490c      	ldr	r1, [pc, #48]	; (800dfc4 <vQueueAddToRegistry+0x50>)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	683a      	ldr	r2, [r7, #0]
 800df96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800df9a:	4a0a      	ldr	r2, [pc, #40]	; (800dfc4 <vQueueAddToRegistry+0x50>)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	00db      	lsls	r3, r3, #3
 800dfa0:	4413      	add	r3, r2
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dfa6:	e006      	b.n	800dfb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	60fb      	str	r3, [r7, #12]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2b07      	cmp	r3, #7
 800dfb2:	d9e7      	bls.n	800df84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dfb4:	bf00      	nop
 800dfb6:	bf00      	nop
 800dfb8:	3714      	adds	r7, #20
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	20009154 	.word	0x20009154

0800dfc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dfd8:	f001 fba4 	bl	800f724 <vPortEnterCritical>
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfe2:	b25b      	sxtb	r3, r3
 800dfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe8:	d103      	bne.n	800dff2 <vQueueWaitForMessageRestricted+0x2a>
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dff8:	b25b      	sxtb	r3, r3
 800dffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dffe:	d103      	bne.n	800e008 <vQueueWaitForMessageRestricted+0x40>
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	2200      	movs	r2, #0
 800e004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e008:	f001 fbbc 	bl	800f784 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e010:	2b00      	cmp	r3, #0
 800e012:	d106      	bne.n	800e022 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	3324      	adds	r3, #36	; 0x24
 800e018:	687a      	ldr	r2, [r7, #4]
 800e01a:	68b9      	ldr	r1, [r7, #8]
 800e01c:	4618      	mov	r0, r3
 800e01e:	f000 fc3b 	bl	800e898 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e022:	6978      	ldr	r0, [r7, #20]
 800e024:	f7ff ff26 	bl	800de74 <prvUnlockQueue>
	}
 800e028:	bf00      	nop
 800e02a:	3718      	adds	r7, #24
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e030:	b580      	push	{r7, lr}
 800e032:	b08e      	sub	sp, #56	; 0x38
 800e034:	af04      	add	r7, sp, #16
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]
 800e03c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10a      	bne.n	800e05a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	623b      	str	r3, [r7, #32]
}
 800e056:	bf00      	nop
 800e058:	e7fe      	b.n	800e058 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d10a      	bne.n	800e076 <xTaskCreateStatic+0x46>
	__asm volatile
 800e060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
 800e070:	61fb      	str	r3, [r7, #28]
}
 800e072:	bf00      	nop
 800e074:	e7fe      	b.n	800e074 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e076:	235c      	movs	r3, #92	; 0x5c
 800e078:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	2b5c      	cmp	r3, #92	; 0x5c
 800e07e:	d00a      	beq.n	800e096 <xTaskCreateStatic+0x66>
	__asm volatile
 800e080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e084:	f383 8811 	msr	BASEPRI, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	61bb      	str	r3, [r7, #24]
}
 800e092:	bf00      	nop
 800e094:	e7fe      	b.n	800e094 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e096:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d01e      	beq.n	800e0dc <xTaskCreateStatic+0xac>
 800e09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d01b      	beq.n	800e0dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e0ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b0:	2202      	movs	r2, #2
 800e0b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	9303      	str	r3, [sp, #12]
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0bc:	9302      	str	r3, [sp, #8]
 800e0be:	f107 0314 	add.w	r3, r7, #20
 800e0c2:	9301      	str	r3, [sp, #4]
 800e0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	68b9      	ldr	r1, [r7, #8]
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f000 f850 	bl	800e174 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0d6:	f000 f8dd 	bl	800e294 <prvAddNewTaskToReadyList>
 800e0da:	e001      	b.n	800e0e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e0e0:	697b      	ldr	r3, [r7, #20]
	}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3728      	adds	r7, #40	; 0x28
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b08c      	sub	sp, #48	; 0x30
 800e0ee:	af04      	add	r7, sp, #16
 800e0f0:	60f8      	str	r0, [r7, #12]
 800e0f2:	60b9      	str	r1, [r7, #8]
 800e0f4:	603b      	str	r3, [r7, #0]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e0fa:	88fb      	ldrh	r3, [r7, #6]
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4618      	mov	r0, r3
 800e100:	f001 fc32 	bl	800f968 <pvPortMalloc>
 800e104:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00e      	beq.n	800e12a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e10c:	205c      	movs	r0, #92	; 0x5c
 800e10e:	f001 fc2b 	bl	800f968 <pvPortMalloc>
 800e112:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d003      	beq.n	800e122 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	697a      	ldr	r2, [r7, #20]
 800e11e:	631a      	str	r2, [r3, #48]	; 0x30
 800e120:	e005      	b.n	800e12e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e122:	6978      	ldr	r0, [r7, #20]
 800e124:	f001 fcec 	bl	800fb00 <vPortFree>
 800e128:	e001      	b.n	800e12e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e12a:	2300      	movs	r3, #0
 800e12c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e12e:	69fb      	ldr	r3, [r7, #28]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d017      	beq.n	800e164 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	2200      	movs	r2, #0
 800e138:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e13c:	88fa      	ldrh	r2, [r7, #6]
 800e13e:	2300      	movs	r3, #0
 800e140:	9303      	str	r3, [sp, #12]
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	9302      	str	r3, [sp, #8]
 800e146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e148:	9301      	str	r3, [sp, #4]
 800e14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	68b9      	ldr	r1, [r7, #8]
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f000 f80e 	bl	800e174 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e158:	69f8      	ldr	r0, [r7, #28]
 800e15a:	f000 f89b 	bl	800e294 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e15e:	2301      	movs	r3, #1
 800e160:	61bb      	str	r3, [r7, #24]
 800e162:	e002      	b.n	800e16a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e164:	f04f 33ff 	mov.w	r3, #4294967295
 800e168:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e16a:	69bb      	ldr	r3, [r7, #24]
	}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3720      	adds	r7, #32
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b088      	sub	sp, #32
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
 800e180:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e184:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	461a      	mov	r2, r3
 800e18c:	21a5      	movs	r1, #165	; 0xa5
 800e18e:	f002 fb5d 	bl	801084c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e19c:	3b01      	subs	r3, #1
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	f023 0307 	bic.w	r3, r3, #7
 800e1aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	f003 0307 	and.w	r3, r3, #7
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00a      	beq.n	800e1cc <prvInitialiseNewTask+0x58>
	__asm volatile
 800e1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ba:	f383 8811 	msr	BASEPRI, r3
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	f3bf 8f4f 	dsb	sy
 800e1c6:	617b      	str	r3, [r7, #20]
}
 800e1c8:	bf00      	nop
 800e1ca:	e7fe      	b.n	800e1ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d01f      	beq.n	800e212 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	61fb      	str	r3, [r7, #28]
 800e1d6:	e012      	b.n	800e1fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e1d8:	68ba      	ldr	r2, [r7, #8]
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	4413      	add	r3, r2
 800e1de:	7819      	ldrb	r1, [r3, #0]
 800e1e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	3334      	adds	r3, #52	; 0x34
 800e1e8:	460a      	mov	r2, r1
 800e1ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e1ec:	68ba      	ldr	r2, [r7, #8]
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d006      	beq.n	800e206 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	61fb      	str	r3, [r7, #28]
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	2b0f      	cmp	r3, #15
 800e202:	d9e9      	bls.n	800e1d8 <prvInitialiseNewTask+0x64>
 800e204:	e000      	b.n	800e208 <prvInitialiseNewTask+0x94>
			{
				break;
 800e206:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20a:	2200      	movs	r2, #0
 800e20c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e210:	e003      	b.n	800e21a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e214:	2200      	movs	r2, #0
 800e216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21c:	2b37      	cmp	r3, #55	; 0x37
 800e21e:	d901      	bls.n	800e224 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e220:	2337      	movs	r3, #55	; 0x37
 800e222:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e228:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e22e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e232:	2200      	movs	r2, #0
 800e234:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e238:	3304      	adds	r3, #4
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7ff f978 	bl	800d530 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e242:	3318      	adds	r3, #24
 800e244:	4618      	mov	r0, r3
 800e246:	f7ff f973 	bl	800d530 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e24e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e252:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e258:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e25e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e262:	2200      	movs	r2, #0
 800e264:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e268:	2200      	movs	r2, #0
 800e26a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e26e:	683a      	ldr	r2, [r7, #0]
 800e270:	68f9      	ldr	r1, [r7, #12]
 800e272:	69b8      	ldr	r0, [r7, #24]
 800e274:	f001 f928 	bl	800f4c8 <pxPortInitialiseStack>
 800e278:	4602      	mov	r2, r0
 800e27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e288:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e28a:	bf00      	nop
 800e28c:	3720      	adds	r7, #32
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
	...

0800e294 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e29c:	f001 fa42 	bl	800f724 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e2a0:	4b2d      	ldr	r3, [pc, #180]	; (800e358 <prvAddNewTaskToReadyList+0xc4>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	4a2c      	ldr	r2, [pc, #176]	; (800e358 <prvAddNewTaskToReadyList+0xc4>)
 800e2a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e2aa:	4b2c      	ldr	r3, [pc, #176]	; (800e35c <prvAddNewTaskToReadyList+0xc8>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d109      	bne.n	800e2c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e2b2:	4a2a      	ldr	r2, [pc, #168]	; (800e35c <prvAddNewTaskToReadyList+0xc8>)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e2b8:	4b27      	ldr	r3, [pc, #156]	; (800e358 <prvAddNewTaskToReadyList+0xc4>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d110      	bne.n	800e2e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e2c0:	f000 fc16 	bl	800eaf0 <prvInitialiseTaskLists>
 800e2c4:	e00d      	b.n	800e2e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e2c6:	4b26      	ldr	r3, [pc, #152]	; (800e360 <prvAddNewTaskToReadyList+0xcc>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d109      	bne.n	800e2e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e2ce:	4b23      	ldr	r3, [pc, #140]	; (800e35c <prvAddNewTaskToReadyList+0xc8>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d802      	bhi.n	800e2e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e2dc:	4a1f      	ldr	r2, [pc, #124]	; (800e35c <prvAddNewTaskToReadyList+0xc8>)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e2e2:	4b20      	ldr	r3, [pc, #128]	; (800e364 <prvAddNewTaskToReadyList+0xd0>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	4a1e      	ldr	r2, [pc, #120]	; (800e364 <prvAddNewTaskToReadyList+0xd0>)
 800e2ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e2ec:	4b1d      	ldr	r3, [pc, #116]	; (800e364 <prvAddNewTaskToReadyList+0xd0>)
 800e2ee:	681a      	ldr	r2, [r3, #0]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f8:	4b1b      	ldr	r3, [pc, #108]	; (800e368 <prvAddNewTaskToReadyList+0xd4>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d903      	bls.n	800e308 <prvAddNewTaskToReadyList+0x74>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e304:	4a18      	ldr	r2, [pc, #96]	; (800e368 <prvAddNewTaskToReadyList+0xd4>)
 800e306:	6013      	str	r3, [r2, #0]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e30c:	4613      	mov	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4a15      	ldr	r2, [pc, #84]	; (800e36c <prvAddNewTaskToReadyList+0xd8>)
 800e316:	441a      	add	r2, r3
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	3304      	adds	r3, #4
 800e31c:	4619      	mov	r1, r3
 800e31e:	4610      	mov	r0, r2
 800e320:	f7ff f913 	bl	800d54a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e324:	f001 fa2e 	bl	800f784 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e328:	4b0d      	ldr	r3, [pc, #52]	; (800e360 <prvAddNewTaskToReadyList+0xcc>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00e      	beq.n	800e34e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e330:	4b0a      	ldr	r3, [pc, #40]	; (800e35c <prvAddNewTaskToReadyList+0xc8>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d207      	bcs.n	800e34e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e33e:	4b0c      	ldr	r3, [pc, #48]	; (800e370 <prvAddNewTaskToReadyList+0xdc>)
 800e340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e344:	601a      	str	r2, [r3, #0]
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e34e:	bf00      	nop
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	20001040 	.word	0x20001040
 800e35c:	20000b6c 	.word	0x20000b6c
 800e360:	2000104c 	.word	0x2000104c
 800e364:	2000105c 	.word	0x2000105c
 800e368:	20001048 	.word	0x20001048
 800e36c:	20000b70 	.word	0x20000b70
 800e370:	e000ed04 	.word	0xe000ed04

0800e374 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e37c:	2300      	movs	r3, #0
 800e37e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d017      	beq.n	800e3b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e386:	4b13      	ldr	r3, [pc, #76]	; (800e3d4 <vTaskDelay+0x60>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00a      	beq.n	800e3a4 <vTaskDelay+0x30>
	__asm volatile
 800e38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	60bb      	str	r3, [r7, #8]
}
 800e3a0:	bf00      	nop
 800e3a2:	e7fe      	b.n	800e3a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e3a4:	f000 f880 	bl	800e4a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 fcea 	bl	800ed84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e3b0:	f000 f888 	bl	800e4c4 <xTaskResumeAll>
 800e3b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d107      	bne.n	800e3cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e3bc:	4b06      	ldr	r3, [pc, #24]	; (800e3d8 <vTaskDelay+0x64>)
 800e3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3c2:	601a      	str	r2, [r3, #0]
 800e3c4:	f3bf 8f4f 	dsb	sy
 800e3c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3cc:	bf00      	nop
 800e3ce:	3710      	adds	r7, #16
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	20001068 	.word	0x20001068
 800e3d8:	e000ed04 	.word	0xe000ed04

0800e3dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b08a      	sub	sp, #40	; 0x28
 800e3e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e3ea:	463a      	mov	r2, r7
 800e3ec:	1d39      	adds	r1, r7, #4
 800e3ee:	f107 0308 	add.w	r3, r7, #8
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7ff f848 	bl	800d488 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e3f8:	6839      	ldr	r1, [r7, #0]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	9202      	str	r2, [sp, #8]
 800e400:	9301      	str	r3, [sp, #4]
 800e402:	2300      	movs	r3, #0
 800e404:	9300      	str	r3, [sp, #0]
 800e406:	2300      	movs	r3, #0
 800e408:	460a      	mov	r2, r1
 800e40a:	4921      	ldr	r1, [pc, #132]	; (800e490 <vTaskStartScheduler+0xb4>)
 800e40c:	4821      	ldr	r0, [pc, #132]	; (800e494 <vTaskStartScheduler+0xb8>)
 800e40e:	f7ff fe0f 	bl	800e030 <xTaskCreateStatic>
 800e412:	4603      	mov	r3, r0
 800e414:	4a20      	ldr	r2, [pc, #128]	; (800e498 <vTaskStartScheduler+0xbc>)
 800e416:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e418:	4b1f      	ldr	r3, [pc, #124]	; (800e498 <vTaskStartScheduler+0xbc>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d002      	beq.n	800e426 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e420:	2301      	movs	r3, #1
 800e422:	617b      	str	r3, [r7, #20]
 800e424:	e001      	b.n	800e42a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e426:	2300      	movs	r3, #0
 800e428:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d102      	bne.n	800e436 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e430:	f000 fcfc 	bl	800ee2c <xTimerCreateTimerTask>
 800e434:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d116      	bne.n	800e46a <vTaskStartScheduler+0x8e>
	__asm volatile
 800e43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e440:	f383 8811 	msr	BASEPRI, r3
 800e444:	f3bf 8f6f 	isb	sy
 800e448:	f3bf 8f4f 	dsb	sy
 800e44c:	613b      	str	r3, [r7, #16]
}
 800e44e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e450:	4b12      	ldr	r3, [pc, #72]	; (800e49c <vTaskStartScheduler+0xc0>)
 800e452:	f04f 32ff 	mov.w	r2, #4294967295
 800e456:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e458:	4b11      	ldr	r3, [pc, #68]	; (800e4a0 <vTaskStartScheduler+0xc4>)
 800e45a:	2201      	movs	r2, #1
 800e45c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e45e:	4b11      	ldr	r3, [pc, #68]	; (800e4a4 <vTaskStartScheduler+0xc8>)
 800e460:	2200      	movs	r2, #0
 800e462:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e464:	f001 f8bc 	bl	800f5e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e468:	e00e      	b.n	800e488 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e470:	d10a      	bne.n	800e488 <vTaskStartScheduler+0xac>
	__asm volatile
 800e472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e476:	f383 8811 	msr	BASEPRI, r3
 800e47a:	f3bf 8f6f 	isb	sy
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	60fb      	str	r3, [r7, #12]
}
 800e484:	bf00      	nop
 800e486:	e7fe      	b.n	800e486 <vTaskStartScheduler+0xaa>
}
 800e488:	bf00      	nop
 800e48a:	3718      	adds	r7, #24
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	08015204 	.word	0x08015204
 800e494:	0800eac1 	.word	0x0800eac1
 800e498:	20001064 	.word	0x20001064
 800e49c:	20001060 	.word	0x20001060
 800e4a0:	2000104c 	.word	0x2000104c
 800e4a4:	20001044 	.word	0x20001044

0800e4a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e4ac:	4b04      	ldr	r3, [pc, #16]	; (800e4c0 <vTaskSuspendAll+0x18>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	4a03      	ldr	r2, [pc, #12]	; (800e4c0 <vTaskSuspendAll+0x18>)
 800e4b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e4b6:	bf00      	nop
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr
 800e4c0:	20001068 	.word	0x20001068

0800e4c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e4d2:	4b42      	ldr	r3, [pc, #264]	; (800e5dc <xTaskResumeAll+0x118>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d10a      	bne.n	800e4f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800e4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	603b      	str	r3, [r7, #0]
}
 800e4ec:	bf00      	nop
 800e4ee:	e7fe      	b.n	800e4ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e4f0:	f001 f918 	bl	800f724 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e4f4:	4b39      	ldr	r3, [pc, #228]	; (800e5dc <xTaskResumeAll+0x118>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	4a38      	ldr	r2, [pc, #224]	; (800e5dc <xTaskResumeAll+0x118>)
 800e4fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4fe:	4b37      	ldr	r3, [pc, #220]	; (800e5dc <xTaskResumeAll+0x118>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d162      	bne.n	800e5cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e506:	4b36      	ldr	r3, [pc, #216]	; (800e5e0 <xTaskResumeAll+0x11c>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d05e      	beq.n	800e5cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e50e:	e02f      	b.n	800e570 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e510:	4b34      	ldr	r3, [pc, #208]	; (800e5e4 <xTaskResumeAll+0x120>)
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	3318      	adds	r3, #24
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7ff f871 	bl	800d604 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	3304      	adds	r3, #4
 800e526:	4618      	mov	r0, r3
 800e528:	f7ff f86c 	bl	800d604 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e530:	4b2d      	ldr	r3, [pc, #180]	; (800e5e8 <xTaskResumeAll+0x124>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	429a      	cmp	r2, r3
 800e536:	d903      	bls.n	800e540 <xTaskResumeAll+0x7c>
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53c:	4a2a      	ldr	r2, [pc, #168]	; (800e5e8 <xTaskResumeAll+0x124>)
 800e53e:	6013      	str	r3, [r2, #0]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e544:	4613      	mov	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	4413      	add	r3, r2
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	4a27      	ldr	r2, [pc, #156]	; (800e5ec <xTaskResumeAll+0x128>)
 800e54e:	441a      	add	r2, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	3304      	adds	r3, #4
 800e554:	4619      	mov	r1, r3
 800e556:	4610      	mov	r0, r2
 800e558:	f7fe fff7 	bl	800d54a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e560:	4b23      	ldr	r3, [pc, #140]	; (800e5f0 <xTaskResumeAll+0x12c>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e566:	429a      	cmp	r2, r3
 800e568:	d302      	bcc.n	800e570 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e56a:	4b22      	ldr	r3, [pc, #136]	; (800e5f4 <xTaskResumeAll+0x130>)
 800e56c:	2201      	movs	r2, #1
 800e56e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e570:	4b1c      	ldr	r3, [pc, #112]	; (800e5e4 <xTaskResumeAll+0x120>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1cb      	bne.n	800e510 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d001      	beq.n	800e582 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e57e:	f000 fb55 	bl	800ec2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e582:	4b1d      	ldr	r3, [pc, #116]	; (800e5f8 <xTaskResumeAll+0x134>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d010      	beq.n	800e5b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e58e:	f000 f847 	bl	800e620 <xTaskIncrementTick>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d002      	beq.n	800e59e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e598:	4b16      	ldr	r3, [pc, #88]	; (800e5f4 <xTaskResumeAll+0x130>)
 800e59a:	2201      	movs	r2, #1
 800e59c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1f1      	bne.n	800e58e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e5aa:	4b13      	ldr	r3, [pc, #76]	; (800e5f8 <xTaskResumeAll+0x134>)
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e5b0:	4b10      	ldr	r3, [pc, #64]	; (800e5f4 <xTaskResumeAll+0x130>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d009      	beq.n	800e5cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e5bc:	4b0f      	ldr	r3, [pc, #60]	; (800e5fc <xTaskResumeAll+0x138>)
 800e5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5c2:	601a      	str	r2, [r3, #0]
 800e5c4:	f3bf 8f4f 	dsb	sy
 800e5c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5cc:	f001 f8da 	bl	800f784 <vPortExitCritical>

	return xAlreadyYielded;
 800e5d0:	68bb      	ldr	r3, [r7, #8]
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	20001068 	.word	0x20001068
 800e5e0:	20001040 	.word	0x20001040
 800e5e4:	20001000 	.word	0x20001000
 800e5e8:	20001048 	.word	0x20001048
 800e5ec:	20000b70 	.word	0x20000b70
 800e5f0:	20000b6c 	.word	0x20000b6c
 800e5f4:	20001054 	.word	0x20001054
 800e5f8:	20001050 	.word	0x20001050
 800e5fc:	e000ed04 	.word	0xe000ed04

0800e600 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e600:	b480      	push	{r7}
 800e602:	b083      	sub	sp, #12
 800e604:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e606:	4b05      	ldr	r3, [pc, #20]	; (800e61c <xTaskGetTickCount+0x1c>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e60c:	687b      	ldr	r3, [r7, #4]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	370c      	adds	r7, #12
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr
 800e61a:	bf00      	nop
 800e61c:	20001044 	.word	0x20001044

0800e620 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e626:	2300      	movs	r3, #0
 800e628:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e62a:	4b4f      	ldr	r3, [pc, #316]	; (800e768 <xTaskIncrementTick+0x148>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f040 808f 	bne.w	800e752 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e634:	4b4d      	ldr	r3, [pc, #308]	; (800e76c <xTaskIncrementTick+0x14c>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	3301      	adds	r3, #1
 800e63a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e63c:	4a4b      	ldr	r2, [pc, #300]	; (800e76c <xTaskIncrementTick+0x14c>)
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d120      	bne.n	800e68a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e648:	4b49      	ldr	r3, [pc, #292]	; (800e770 <xTaskIncrementTick+0x150>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d00a      	beq.n	800e668 <xTaskIncrementTick+0x48>
	__asm volatile
 800e652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e656:	f383 8811 	msr	BASEPRI, r3
 800e65a:	f3bf 8f6f 	isb	sy
 800e65e:	f3bf 8f4f 	dsb	sy
 800e662:	603b      	str	r3, [r7, #0]
}
 800e664:	bf00      	nop
 800e666:	e7fe      	b.n	800e666 <xTaskIncrementTick+0x46>
 800e668:	4b41      	ldr	r3, [pc, #260]	; (800e770 <xTaskIncrementTick+0x150>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	60fb      	str	r3, [r7, #12]
 800e66e:	4b41      	ldr	r3, [pc, #260]	; (800e774 <xTaskIncrementTick+0x154>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4a3f      	ldr	r2, [pc, #252]	; (800e770 <xTaskIncrementTick+0x150>)
 800e674:	6013      	str	r3, [r2, #0]
 800e676:	4a3f      	ldr	r2, [pc, #252]	; (800e774 <xTaskIncrementTick+0x154>)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6013      	str	r3, [r2, #0]
 800e67c:	4b3e      	ldr	r3, [pc, #248]	; (800e778 <xTaskIncrementTick+0x158>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	3301      	adds	r3, #1
 800e682:	4a3d      	ldr	r2, [pc, #244]	; (800e778 <xTaskIncrementTick+0x158>)
 800e684:	6013      	str	r3, [r2, #0]
 800e686:	f000 fad1 	bl	800ec2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e68a:	4b3c      	ldr	r3, [pc, #240]	; (800e77c <xTaskIncrementTick+0x15c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	693a      	ldr	r2, [r7, #16]
 800e690:	429a      	cmp	r2, r3
 800e692:	d349      	bcc.n	800e728 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e694:	4b36      	ldr	r3, [pc, #216]	; (800e770 <xTaskIncrementTick+0x150>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d104      	bne.n	800e6a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e69e:	4b37      	ldr	r3, [pc, #220]	; (800e77c <xTaskIncrementTick+0x15c>)
 800e6a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a4:	601a      	str	r2, [r3, #0]
					break;
 800e6a6:	e03f      	b.n	800e728 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6a8:	4b31      	ldr	r3, [pc, #196]	; (800e770 <xTaskIncrementTick+0x150>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e6b8:	693a      	ldr	r2, [r7, #16]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d203      	bcs.n	800e6c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e6c0:	4a2e      	ldr	r2, [pc, #184]	; (800e77c <xTaskIncrementTick+0x15c>)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e6c6:	e02f      	b.n	800e728 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	3304      	adds	r3, #4
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fe ff99 	bl	800d604 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d004      	beq.n	800e6e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	3318      	adds	r3, #24
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fe ff90 	bl	800d604 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e8:	4b25      	ldr	r3, [pc, #148]	; (800e780 <xTaskIncrementTick+0x160>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d903      	bls.n	800e6f8 <xTaskIncrementTick+0xd8>
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f4:	4a22      	ldr	r2, [pc, #136]	; (800e780 <xTaskIncrementTick+0x160>)
 800e6f6:	6013      	str	r3, [r2, #0]
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6fc:	4613      	mov	r3, r2
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	4413      	add	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4a1f      	ldr	r2, [pc, #124]	; (800e784 <xTaskIncrementTick+0x164>)
 800e706:	441a      	add	r2, r3
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	3304      	adds	r3, #4
 800e70c:	4619      	mov	r1, r3
 800e70e:	4610      	mov	r0, r2
 800e710:	f7fe ff1b 	bl	800d54a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e718:	4b1b      	ldr	r3, [pc, #108]	; (800e788 <xTaskIncrementTick+0x168>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71e:	429a      	cmp	r2, r3
 800e720:	d3b8      	bcc.n	800e694 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e722:	2301      	movs	r3, #1
 800e724:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e726:	e7b5      	b.n	800e694 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e728:	4b17      	ldr	r3, [pc, #92]	; (800e788 <xTaskIncrementTick+0x168>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e72e:	4915      	ldr	r1, [pc, #84]	; (800e784 <xTaskIncrementTick+0x164>)
 800e730:	4613      	mov	r3, r2
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4413      	add	r3, r2
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	440b      	add	r3, r1
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d901      	bls.n	800e744 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e740:	2301      	movs	r3, #1
 800e742:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e744:	4b11      	ldr	r3, [pc, #68]	; (800e78c <xTaskIncrementTick+0x16c>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d007      	beq.n	800e75c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e74c:	2301      	movs	r3, #1
 800e74e:	617b      	str	r3, [r7, #20]
 800e750:	e004      	b.n	800e75c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e752:	4b0f      	ldr	r3, [pc, #60]	; (800e790 <xTaskIncrementTick+0x170>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	3301      	adds	r3, #1
 800e758:	4a0d      	ldr	r2, [pc, #52]	; (800e790 <xTaskIncrementTick+0x170>)
 800e75a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e75c:	697b      	ldr	r3, [r7, #20]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3718      	adds	r7, #24
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
 800e766:	bf00      	nop
 800e768:	20001068 	.word	0x20001068
 800e76c:	20001044 	.word	0x20001044
 800e770:	20000ff8 	.word	0x20000ff8
 800e774:	20000ffc 	.word	0x20000ffc
 800e778:	20001058 	.word	0x20001058
 800e77c:	20001060 	.word	0x20001060
 800e780:	20001048 	.word	0x20001048
 800e784:	20000b70 	.word	0x20000b70
 800e788:	20000b6c 	.word	0x20000b6c
 800e78c:	20001054 	.word	0x20001054
 800e790:	20001050 	.word	0x20001050

0800e794 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e794:	b480      	push	{r7}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e79a:	4b28      	ldr	r3, [pc, #160]	; (800e83c <vTaskSwitchContext+0xa8>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d003      	beq.n	800e7aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e7a2:	4b27      	ldr	r3, [pc, #156]	; (800e840 <vTaskSwitchContext+0xac>)
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e7a8:	e041      	b.n	800e82e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e7aa:	4b25      	ldr	r3, [pc, #148]	; (800e840 <vTaskSwitchContext+0xac>)
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7b0:	4b24      	ldr	r3, [pc, #144]	; (800e844 <vTaskSwitchContext+0xb0>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	60fb      	str	r3, [r7, #12]
 800e7b6:	e010      	b.n	800e7da <vTaskSwitchContext+0x46>
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10a      	bne.n	800e7d4 <vTaskSwitchContext+0x40>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	607b      	str	r3, [r7, #4]
}
 800e7d0:	bf00      	nop
 800e7d2:	e7fe      	b.n	800e7d2 <vTaskSwitchContext+0x3e>
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	60fb      	str	r3, [r7, #12]
 800e7da:	491b      	ldr	r1, [pc, #108]	; (800e848 <vTaskSwitchContext+0xb4>)
 800e7dc:	68fa      	ldr	r2, [r7, #12]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4413      	add	r3, r2
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	440b      	add	r3, r1
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0e4      	beq.n	800e7b8 <vTaskSwitchContext+0x24>
 800e7ee:	68fa      	ldr	r2, [r7, #12]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	4413      	add	r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	4a13      	ldr	r2, [pc, #76]	; (800e848 <vTaskSwitchContext+0xb4>)
 800e7fa:	4413      	add	r3, r2
 800e7fc:	60bb      	str	r3, [r7, #8]
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	685a      	ldr	r2, [r3, #4]
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	605a      	str	r2, [r3, #4]
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	685a      	ldr	r2, [r3, #4]
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	3308      	adds	r3, #8
 800e810:	429a      	cmp	r2, r3
 800e812:	d104      	bne.n	800e81e <vTaskSwitchContext+0x8a>
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	685a      	ldr	r2, [r3, #4]
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	605a      	str	r2, [r3, #4]
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	4a09      	ldr	r2, [pc, #36]	; (800e84c <vTaskSwitchContext+0xb8>)
 800e826:	6013      	str	r3, [r2, #0]
 800e828:	4a06      	ldr	r2, [pc, #24]	; (800e844 <vTaskSwitchContext+0xb0>)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6013      	str	r3, [r2, #0]
}
 800e82e:	bf00      	nop
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	20001068 	.word	0x20001068
 800e840:	20001054 	.word	0x20001054
 800e844:	20001048 	.word	0x20001048
 800e848:	20000b70 	.word	0x20000b70
 800e84c:	20000b6c 	.word	0x20000b6c

0800e850 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d10a      	bne.n	800e876 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e864:	f383 8811 	msr	BASEPRI, r3
 800e868:	f3bf 8f6f 	isb	sy
 800e86c:	f3bf 8f4f 	dsb	sy
 800e870:	60fb      	str	r3, [r7, #12]
}
 800e872:	bf00      	nop
 800e874:	e7fe      	b.n	800e874 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e876:	4b07      	ldr	r3, [pc, #28]	; (800e894 <vTaskPlaceOnEventList+0x44>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	3318      	adds	r3, #24
 800e87c:	4619      	mov	r1, r3
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f7fe fe87 	bl	800d592 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e884:	2101      	movs	r1, #1
 800e886:	6838      	ldr	r0, [r7, #0]
 800e888:	f000 fa7c 	bl	800ed84 <prvAddCurrentTaskToDelayedList>
}
 800e88c:	bf00      	nop
 800e88e:	3710      	adds	r7, #16
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	20000b6c 	.word	0x20000b6c

0800e898 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b086      	sub	sp, #24
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d10a      	bne.n	800e8c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ae:	f383 8811 	msr	BASEPRI, r3
 800e8b2:	f3bf 8f6f 	isb	sy
 800e8b6:	f3bf 8f4f 	dsb	sy
 800e8ba:	617b      	str	r3, [r7, #20]
}
 800e8bc:	bf00      	nop
 800e8be:	e7fe      	b.n	800e8be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8c0:	4b0a      	ldr	r3, [pc, #40]	; (800e8ec <vTaskPlaceOnEventListRestricted+0x54>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	3318      	adds	r3, #24
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f7fe fe3e 	bl	800d54a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e8da:	6879      	ldr	r1, [r7, #4]
 800e8dc:	68b8      	ldr	r0, [r7, #8]
 800e8de:	f000 fa51 	bl	800ed84 <prvAddCurrentTaskToDelayedList>
	}
 800e8e2:	bf00      	nop
 800e8e4:	3718      	adds	r7, #24
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	20000b6c 	.word	0x20000b6c

0800e8f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b086      	sub	sp, #24
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d10a      	bne.n	800e91c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90a:	f383 8811 	msr	BASEPRI, r3
 800e90e:	f3bf 8f6f 	isb	sy
 800e912:	f3bf 8f4f 	dsb	sy
 800e916:	60fb      	str	r3, [r7, #12]
}
 800e918:	bf00      	nop
 800e91a:	e7fe      	b.n	800e91a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	3318      	adds	r3, #24
 800e920:	4618      	mov	r0, r3
 800e922:	f7fe fe6f 	bl	800d604 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e926:	4b1e      	ldr	r3, [pc, #120]	; (800e9a0 <xTaskRemoveFromEventList+0xb0>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d11d      	bne.n	800e96a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	3304      	adds	r3, #4
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fe66 	bl	800d604 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e93c:	4b19      	ldr	r3, [pc, #100]	; (800e9a4 <xTaskRemoveFromEventList+0xb4>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d903      	bls.n	800e94c <xTaskRemoveFromEventList+0x5c>
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e948:	4a16      	ldr	r2, [pc, #88]	; (800e9a4 <xTaskRemoveFromEventList+0xb4>)
 800e94a:	6013      	str	r3, [r2, #0]
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e950:	4613      	mov	r3, r2
 800e952:	009b      	lsls	r3, r3, #2
 800e954:	4413      	add	r3, r2
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	4a13      	ldr	r2, [pc, #76]	; (800e9a8 <xTaskRemoveFromEventList+0xb8>)
 800e95a:	441a      	add	r2, r3
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	3304      	adds	r3, #4
 800e960:	4619      	mov	r1, r3
 800e962:	4610      	mov	r0, r2
 800e964:	f7fe fdf1 	bl	800d54a <vListInsertEnd>
 800e968:	e005      	b.n	800e976 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	3318      	adds	r3, #24
 800e96e:	4619      	mov	r1, r3
 800e970:	480e      	ldr	r0, [pc, #56]	; (800e9ac <xTaskRemoveFromEventList+0xbc>)
 800e972:	f7fe fdea 	bl	800d54a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e97a:	4b0d      	ldr	r3, [pc, #52]	; (800e9b0 <xTaskRemoveFromEventList+0xc0>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e980:	429a      	cmp	r2, r3
 800e982:	d905      	bls.n	800e990 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e984:	2301      	movs	r3, #1
 800e986:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e988:	4b0a      	ldr	r3, [pc, #40]	; (800e9b4 <xTaskRemoveFromEventList+0xc4>)
 800e98a:	2201      	movs	r2, #1
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	e001      	b.n	800e994 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e990:	2300      	movs	r3, #0
 800e992:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e994:	697b      	ldr	r3, [r7, #20]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3718      	adds	r7, #24
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	20001068 	.word	0x20001068
 800e9a4:	20001048 	.word	0x20001048
 800e9a8:	20000b70 	.word	0x20000b70
 800e9ac:	20001000 	.word	0x20001000
 800e9b0:	20000b6c 	.word	0x20000b6c
 800e9b4:	20001054 	.word	0x20001054

0800e9b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9c0:	4b06      	ldr	r3, [pc, #24]	; (800e9dc <vTaskInternalSetTimeOutState+0x24>)
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9c8:	4b05      	ldr	r3, [pc, #20]	; (800e9e0 <vTaskInternalSetTimeOutState+0x28>)
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	605a      	str	r2, [r3, #4]
}
 800e9d0:	bf00      	nop
 800e9d2:	370c      	adds	r7, #12
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr
 800e9dc:	20001058 	.word	0x20001058
 800e9e0:	20001044 	.word	0x20001044

0800e9e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b088      	sub	sp, #32
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d10a      	bne.n	800ea0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f8:	f383 8811 	msr	BASEPRI, r3
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f3bf 8f4f 	dsb	sy
 800ea04:	613b      	str	r3, [r7, #16]
}
 800ea06:	bf00      	nop
 800ea08:	e7fe      	b.n	800ea08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d10a      	bne.n	800ea26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ea10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea14:	f383 8811 	msr	BASEPRI, r3
 800ea18:	f3bf 8f6f 	isb	sy
 800ea1c:	f3bf 8f4f 	dsb	sy
 800ea20:	60fb      	str	r3, [r7, #12]
}
 800ea22:	bf00      	nop
 800ea24:	e7fe      	b.n	800ea24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ea26:	f000 fe7d 	bl	800f724 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea2a:	4b1d      	ldr	r3, [pc, #116]	; (800eaa0 <xTaskCheckForTimeOut+0xbc>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	69ba      	ldr	r2, [r7, #24]
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea42:	d102      	bne.n	800ea4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea44:	2300      	movs	r3, #0
 800ea46:	61fb      	str	r3, [r7, #28]
 800ea48:	e023      	b.n	800ea92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	4b15      	ldr	r3, [pc, #84]	; (800eaa4 <xTaskCheckForTimeOut+0xc0>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d007      	beq.n	800ea66 <xTaskCheckForTimeOut+0x82>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	69ba      	ldr	r2, [r7, #24]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d302      	bcc.n	800ea66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea60:	2301      	movs	r3, #1
 800ea62:	61fb      	str	r3, [r7, #28]
 800ea64:	e015      	b.n	800ea92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	697a      	ldr	r2, [r7, #20]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d20b      	bcs.n	800ea88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	681a      	ldr	r2, [r3, #0]
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	1ad2      	subs	r2, r2, r3
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7ff ff9b 	bl	800e9b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea82:	2300      	movs	r3, #0
 800ea84:	61fb      	str	r3, [r7, #28]
 800ea86:	e004      	b.n	800ea92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea92:	f000 fe77 	bl	800f784 <vPortExitCritical>

	return xReturn;
 800ea96:	69fb      	ldr	r3, [r7, #28]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3720      	adds	r7, #32
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	20001044 	.word	0x20001044
 800eaa4:	20001058 	.word	0x20001058

0800eaa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eaac:	4b03      	ldr	r3, [pc, #12]	; (800eabc <vTaskMissedYield+0x14>)
 800eaae:	2201      	movs	r2, #1
 800eab0:	601a      	str	r2, [r3, #0]
}
 800eab2:	bf00      	nop
 800eab4:	46bd      	mov	sp, r7
 800eab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaba:	4770      	bx	lr
 800eabc:	20001054 	.word	0x20001054

0800eac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eac8:	f000 f852 	bl	800eb70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eacc:	4b06      	ldr	r3, [pc, #24]	; (800eae8 <prvIdleTask+0x28>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d9f9      	bls.n	800eac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ead4:	4b05      	ldr	r3, [pc, #20]	; (800eaec <prvIdleTask+0x2c>)
 800ead6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eada:	601a      	str	r2, [r3, #0]
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eae4:	e7f0      	b.n	800eac8 <prvIdleTask+0x8>
 800eae6:	bf00      	nop
 800eae8:	20000b70 	.word	0x20000b70
 800eaec:	e000ed04 	.word	0xe000ed04

0800eaf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	607b      	str	r3, [r7, #4]
 800eafa:	e00c      	b.n	800eb16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	4613      	mov	r3, r2
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	4413      	add	r3, r2
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	4a12      	ldr	r2, [pc, #72]	; (800eb50 <prvInitialiseTaskLists+0x60>)
 800eb08:	4413      	add	r3, r2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fe fcf0 	bl	800d4f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	3301      	adds	r3, #1
 800eb14:	607b      	str	r3, [r7, #4]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2b37      	cmp	r3, #55	; 0x37
 800eb1a:	d9ef      	bls.n	800eafc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb1c:	480d      	ldr	r0, [pc, #52]	; (800eb54 <prvInitialiseTaskLists+0x64>)
 800eb1e:	f7fe fce7 	bl	800d4f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb22:	480d      	ldr	r0, [pc, #52]	; (800eb58 <prvInitialiseTaskLists+0x68>)
 800eb24:	f7fe fce4 	bl	800d4f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb28:	480c      	ldr	r0, [pc, #48]	; (800eb5c <prvInitialiseTaskLists+0x6c>)
 800eb2a:	f7fe fce1 	bl	800d4f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb2e:	480c      	ldr	r0, [pc, #48]	; (800eb60 <prvInitialiseTaskLists+0x70>)
 800eb30:	f7fe fcde 	bl	800d4f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb34:	480b      	ldr	r0, [pc, #44]	; (800eb64 <prvInitialiseTaskLists+0x74>)
 800eb36:	f7fe fcdb 	bl	800d4f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb3a:	4b0b      	ldr	r3, [pc, #44]	; (800eb68 <prvInitialiseTaskLists+0x78>)
 800eb3c:	4a05      	ldr	r2, [pc, #20]	; (800eb54 <prvInitialiseTaskLists+0x64>)
 800eb3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb40:	4b0a      	ldr	r3, [pc, #40]	; (800eb6c <prvInitialiseTaskLists+0x7c>)
 800eb42:	4a05      	ldr	r2, [pc, #20]	; (800eb58 <prvInitialiseTaskLists+0x68>)
 800eb44:	601a      	str	r2, [r3, #0]
}
 800eb46:	bf00      	nop
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	20000b70 	.word	0x20000b70
 800eb54:	20000fd0 	.word	0x20000fd0
 800eb58:	20000fe4 	.word	0x20000fe4
 800eb5c:	20001000 	.word	0x20001000
 800eb60:	20001014 	.word	0x20001014
 800eb64:	2000102c 	.word	0x2000102c
 800eb68:	20000ff8 	.word	0x20000ff8
 800eb6c:	20000ffc 	.word	0x20000ffc

0800eb70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb76:	e019      	b.n	800ebac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb78:	f000 fdd4 	bl	800f724 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb7c:	4b10      	ldr	r3, [pc, #64]	; (800ebc0 <prvCheckTasksWaitingTermination+0x50>)
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	3304      	adds	r3, #4
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fe fd3b 	bl	800d604 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb8e:	4b0d      	ldr	r3, [pc, #52]	; (800ebc4 <prvCheckTasksWaitingTermination+0x54>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	3b01      	subs	r3, #1
 800eb94:	4a0b      	ldr	r2, [pc, #44]	; (800ebc4 <prvCheckTasksWaitingTermination+0x54>)
 800eb96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb98:	4b0b      	ldr	r3, [pc, #44]	; (800ebc8 <prvCheckTasksWaitingTermination+0x58>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	4a0a      	ldr	r2, [pc, #40]	; (800ebc8 <prvCheckTasksWaitingTermination+0x58>)
 800eba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eba2:	f000 fdef 	bl	800f784 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 f810 	bl	800ebcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebac:	4b06      	ldr	r3, [pc, #24]	; (800ebc8 <prvCheckTasksWaitingTermination+0x58>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d1e1      	bne.n	800eb78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ebb4:	bf00      	nop
 800ebb6:	bf00      	nop
 800ebb8:	3708      	adds	r7, #8
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	bd80      	pop	{r7, pc}
 800ebbe:	bf00      	nop
 800ebc0:	20001014 	.word	0x20001014
 800ebc4:	20001040 	.word	0x20001040
 800ebc8:	20001028 	.word	0x20001028

0800ebcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d108      	bne.n	800ebf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f000 ff8c 	bl	800fb00 <vPortFree>
				vPortFree( pxTCB );
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f000 ff89 	bl	800fb00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebee:	e018      	b.n	800ec22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	d103      	bne.n	800ec02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 ff80 	bl	800fb00 <vPortFree>
	}
 800ec00:	e00f      	b.n	800ec22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	d00a      	beq.n	800ec22 <prvDeleteTCB+0x56>
	__asm volatile
 800ec0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec10:	f383 8811 	msr	BASEPRI, r3
 800ec14:	f3bf 8f6f 	isb	sy
 800ec18:	f3bf 8f4f 	dsb	sy
 800ec1c:	60fb      	str	r3, [r7, #12]
}
 800ec1e:	bf00      	nop
 800ec20:	e7fe      	b.n	800ec20 <prvDeleteTCB+0x54>
	}
 800ec22:	bf00      	nop
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
	...

0800ec2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec32:	4b0c      	ldr	r3, [pc, #48]	; (800ec64 <prvResetNextTaskUnblockTime+0x38>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d104      	bne.n	800ec46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec3c:	4b0a      	ldr	r3, [pc, #40]	; (800ec68 <prvResetNextTaskUnblockTime+0x3c>)
 800ec3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec44:	e008      	b.n	800ec58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec46:	4b07      	ldr	r3, [pc, #28]	; (800ec64 <prvResetNextTaskUnblockTime+0x38>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	68db      	ldr	r3, [r3, #12]
 800ec4c:	68db      	ldr	r3, [r3, #12]
 800ec4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	4a04      	ldr	r2, [pc, #16]	; (800ec68 <prvResetNextTaskUnblockTime+0x3c>)
 800ec56:	6013      	str	r3, [r2, #0]
}
 800ec58:	bf00      	nop
 800ec5a:	370c      	adds	r7, #12
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr
 800ec64:	20000ff8 	.word	0x20000ff8
 800ec68:	20001060 	.word	0x20001060

0800ec6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec72:	4b0b      	ldr	r3, [pc, #44]	; (800eca0 <xTaskGetSchedulerState+0x34>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d102      	bne.n	800ec80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	607b      	str	r3, [r7, #4]
 800ec7e:	e008      	b.n	800ec92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec80:	4b08      	ldr	r3, [pc, #32]	; (800eca4 <xTaskGetSchedulerState+0x38>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d102      	bne.n	800ec8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec88:	2302      	movs	r3, #2
 800ec8a:	607b      	str	r3, [r7, #4]
 800ec8c:	e001      	b.n	800ec92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec92:	687b      	ldr	r3, [r7, #4]
	}
 800ec94:	4618      	mov	r0, r3
 800ec96:	370c      	adds	r7, #12
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr
 800eca0:	2000104c 	.word	0x2000104c
 800eca4:	20001068 	.word	0x20001068

0800eca8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b086      	sub	sp, #24
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d056      	beq.n	800ed6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ecbe:	4b2e      	ldr	r3, [pc, #184]	; (800ed78 <xTaskPriorityDisinherit+0xd0>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	693a      	ldr	r2, [r7, #16]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d00a      	beq.n	800ecde <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ecc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eccc:	f383 8811 	msr	BASEPRI, r3
 800ecd0:	f3bf 8f6f 	isb	sy
 800ecd4:	f3bf 8f4f 	dsb	sy
 800ecd8:	60fb      	str	r3, [r7, #12]
}
 800ecda:	bf00      	nop
 800ecdc:	e7fe      	b.n	800ecdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d10a      	bne.n	800ecfc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ece6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecea:	f383 8811 	msr	BASEPRI, r3
 800ecee:	f3bf 8f6f 	isb	sy
 800ecf2:	f3bf 8f4f 	dsb	sy
 800ecf6:	60bb      	str	r3, [r7, #8]
}
 800ecf8:	bf00      	nop
 800ecfa:	e7fe      	b.n	800ecfa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed00:	1e5a      	subs	r2, r3, #1
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d02c      	beq.n	800ed6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d128      	bne.n	800ed6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	3304      	adds	r3, #4
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7fe fc70 	bl	800d604 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed3c:	4b0f      	ldr	r3, [pc, #60]	; (800ed7c <xTaskPriorityDisinherit+0xd4>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d903      	bls.n	800ed4c <xTaskPriorityDisinherit+0xa4>
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed48:	4a0c      	ldr	r2, [pc, #48]	; (800ed7c <xTaskPriorityDisinherit+0xd4>)
 800ed4a:	6013      	str	r3, [r2, #0]
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed50:	4613      	mov	r3, r2
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	4413      	add	r3, r2
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	4a09      	ldr	r2, [pc, #36]	; (800ed80 <xTaskPriorityDisinherit+0xd8>)
 800ed5a:	441a      	add	r2, r3
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	3304      	adds	r3, #4
 800ed60:	4619      	mov	r1, r3
 800ed62:	4610      	mov	r0, r2
 800ed64:	f7fe fbf1 	bl	800d54a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed6c:	697b      	ldr	r3, [r7, #20]
	}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3718      	adds	r7, #24
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20000b6c 	.word	0x20000b6c
 800ed7c:	20001048 	.word	0x20001048
 800ed80:	20000b70 	.word	0x20000b70

0800ed84 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ed8e:	4b21      	ldr	r3, [pc, #132]	; (800ee14 <prvAddCurrentTaskToDelayedList+0x90>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed94:	4b20      	ldr	r3, [pc, #128]	; (800ee18 <prvAddCurrentTaskToDelayedList+0x94>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	3304      	adds	r3, #4
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fe fc32 	bl	800d604 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda6:	d10a      	bne.n	800edbe <prvAddCurrentTaskToDelayedList+0x3a>
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d007      	beq.n	800edbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edae:	4b1a      	ldr	r3, [pc, #104]	; (800ee18 <prvAddCurrentTaskToDelayedList+0x94>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	3304      	adds	r3, #4
 800edb4:	4619      	mov	r1, r3
 800edb6:	4819      	ldr	r0, [pc, #100]	; (800ee1c <prvAddCurrentTaskToDelayedList+0x98>)
 800edb8:	f7fe fbc7 	bl	800d54a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800edbc:	e026      	b.n	800ee0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4413      	add	r3, r2
 800edc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800edc6:	4b14      	ldr	r3, [pc, #80]	; (800ee18 <prvAddCurrentTaskToDelayedList+0x94>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	68ba      	ldr	r2, [r7, #8]
 800edcc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d209      	bcs.n	800edea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edd6:	4b12      	ldr	r3, [pc, #72]	; (800ee20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	4b0f      	ldr	r3, [pc, #60]	; (800ee18 <prvAddCurrentTaskToDelayedList+0x94>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	3304      	adds	r3, #4
 800ede0:	4619      	mov	r1, r3
 800ede2:	4610      	mov	r0, r2
 800ede4:	f7fe fbd5 	bl	800d592 <vListInsert>
}
 800ede8:	e010      	b.n	800ee0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800edea:	4b0e      	ldr	r3, [pc, #56]	; (800ee24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800edec:	681a      	ldr	r2, [r3, #0]
 800edee:	4b0a      	ldr	r3, [pc, #40]	; (800ee18 <prvAddCurrentTaskToDelayedList+0x94>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3304      	adds	r3, #4
 800edf4:	4619      	mov	r1, r3
 800edf6:	4610      	mov	r0, r2
 800edf8:	f7fe fbcb 	bl	800d592 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800edfc:	4b0a      	ldr	r3, [pc, #40]	; (800ee28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d202      	bcs.n	800ee0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ee06:	4a08      	ldr	r2, [pc, #32]	; (800ee28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	6013      	str	r3, [r2, #0]
}
 800ee0c:	bf00      	nop
 800ee0e:	3710      	adds	r7, #16
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	20001044 	.word	0x20001044
 800ee18:	20000b6c 	.word	0x20000b6c
 800ee1c:	2000102c 	.word	0x2000102c
 800ee20:	20000ffc 	.word	0x20000ffc
 800ee24:	20000ff8 	.word	0x20000ff8
 800ee28:	20001060 	.word	0x20001060

0800ee2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b08a      	sub	sp, #40	; 0x28
 800ee30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ee32:	2300      	movs	r3, #0
 800ee34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ee36:	f000 fb07 	bl	800f448 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ee3a:	4b1c      	ldr	r3, [pc, #112]	; (800eeac <xTimerCreateTimerTask+0x80>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d021      	beq.n	800ee86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ee42:	2300      	movs	r3, #0
 800ee44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ee46:	2300      	movs	r3, #0
 800ee48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ee4a:	1d3a      	adds	r2, r7, #4
 800ee4c:	f107 0108 	add.w	r1, r7, #8
 800ee50:	f107 030c 	add.w	r3, r7, #12
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7fe fb31 	bl	800d4bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ee5a:	6879      	ldr	r1, [r7, #4]
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	9202      	str	r2, [sp, #8]
 800ee62:	9301      	str	r3, [sp, #4]
 800ee64:	2302      	movs	r3, #2
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	2300      	movs	r3, #0
 800ee6a:	460a      	mov	r2, r1
 800ee6c:	4910      	ldr	r1, [pc, #64]	; (800eeb0 <xTimerCreateTimerTask+0x84>)
 800ee6e:	4811      	ldr	r0, [pc, #68]	; (800eeb4 <xTimerCreateTimerTask+0x88>)
 800ee70:	f7ff f8de 	bl	800e030 <xTaskCreateStatic>
 800ee74:	4603      	mov	r3, r0
 800ee76:	4a10      	ldr	r2, [pc, #64]	; (800eeb8 <xTimerCreateTimerTask+0x8c>)
 800ee78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ee7a:	4b0f      	ldr	r3, [pc, #60]	; (800eeb8 <xTimerCreateTimerTask+0x8c>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d001      	beq.n	800ee86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ee82:	2301      	movs	r3, #1
 800ee84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ee86:	697b      	ldr	r3, [r7, #20]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10a      	bne.n	800eea2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ee8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee90:	f383 8811 	msr	BASEPRI, r3
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	613b      	str	r3, [r7, #16]
}
 800ee9e:	bf00      	nop
 800eea0:	e7fe      	b.n	800eea0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eea2:	697b      	ldr	r3, [r7, #20]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3718      	adds	r7, #24
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	2000109c 	.word	0x2000109c
 800eeb0:	0801520c 	.word	0x0801520c
 800eeb4:	0800eff1 	.word	0x0800eff1
 800eeb8:	200010a0 	.word	0x200010a0

0800eebc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b08a      	sub	sp, #40	; 0x28
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]
 800eec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eeca:	2300      	movs	r3, #0
 800eecc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d10a      	bne.n	800eeea <xTimerGenericCommand+0x2e>
	__asm volatile
 800eed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed8:	f383 8811 	msr	BASEPRI, r3
 800eedc:	f3bf 8f6f 	isb	sy
 800eee0:	f3bf 8f4f 	dsb	sy
 800eee4:	623b      	str	r3, [r7, #32]
}
 800eee6:	bf00      	nop
 800eee8:	e7fe      	b.n	800eee8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eeea:	4b1a      	ldr	r3, [pc, #104]	; (800ef54 <xTimerGenericCommand+0x98>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d02a      	beq.n	800ef48 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	2b05      	cmp	r3, #5
 800ef02:	dc18      	bgt.n	800ef36 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ef04:	f7ff feb2 	bl	800ec6c <xTaskGetSchedulerState>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b02      	cmp	r3, #2
 800ef0c:	d109      	bne.n	800ef22 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ef0e:	4b11      	ldr	r3, [pc, #68]	; (800ef54 <xTimerGenericCommand+0x98>)
 800ef10:	6818      	ldr	r0, [r3, #0]
 800ef12:	f107 0110 	add.w	r1, r7, #16
 800ef16:	2300      	movs	r3, #0
 800ef18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef1a:	f7fe fca1 	bl	800d860 <xQueueGenericSend>
 800ef1e:	6278      	str	r0, [r7, #36]	; 0x24
 800ef20:	e012      	b.n	800ef48 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ef22:	4b0c      	ldr	r3, [pc, #48]	; (800ef54 <xTimerGenericCommand+0x98>)
 800ef24:	6818      	ldr	r0, [r3, #0]
 800ef26:	f107 0110 	add.w	r1, r7, #16
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f7fe fc97 	bl	800d860 <xQueueGenericSend>
 800ef32:	6278      	str	r0, [r7, #36]	; 0x24
 800ef34:	e008      	b.n	800ef48 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ef36:	4b07      	ldr	r3, [pc, #28]	; (800ef54 <xTimerGenericCommand+0x98>)
 800ef38:	6818      	ldr	r0, [r3, #0]
 800ef3a:	f107 0110 	add.w	r1, r7, #16
 800ef3e:	2300      	movs	r3, #0
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	f7fe fd8b 	bl	800da5c <xQueueGenericSendFromISR>
 800ef46:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ef48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3728      	adds	r7, #40	; 0x28
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	2000109c 	.word	0x2000109c

0800ef58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b088      	sub	sp, #32
 800ef5c:	af02      	add	r7, sp, #8
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef62:	4b22      	ldr	r3, [pc, #136]	; (800efec <prvProcessExpiredTimer+0x94>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	3304      	adds	r3, #4
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fe fb47 	bl	800d604 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef7c:	f003 0304 	and.w	r3, r3, #4
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d022      	beq.n	800efca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ef84:	697b      	ldr	r3, [r7, #20]
 800ef86:	699a      	ldr	r2, [r3, #24]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	18d1      	adds	r1, r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	683a      	ldr	r2, [r7, #0]
 800ef90:	6978      	ldr	r0, [r7, #20]
 800ef92:	f000 f8d1 	bl	800f138 <prvInsertTimerInActiveList>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d01f      	beq.n	800efdc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	9300      	str	r3, [sp, #0]
 800efa0:	2300      	movs	r3, #0
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	2100      	movs	r1, #0
 800efa6:	6978      	ldr	r0, [r7, #20]
 800efa8:	f7ff ff88 	bl	800eebc <xTimerGenericCommand>
 800efac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d113      	bne.n	800efdc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800efb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb8:	f383 8811 	msr	BASEPRI, r3
 800efbc:	f3bf 8f6f 	isb	sy
 800efc0:	f3bf 8f4f 	dsb	sy
 800efc4:	60fb      	str	r3, [r7, #12]
}
 800efc6:	bf00      	nop
 800efc8:	e7fe      	b.n	800efc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efd0:	f023 0301 	bic.w	r3, r3, #1
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	6a1b      	ldr	r3, [r3, #32]
 800efe0:	6978      	ldr	r0, [r7, #20]
 800efe2:	4798      	blx	r3
}
 800efe4:	bf00      	nop
 800efe6:	3718      	adds	r7, #24
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	20001094 	.word	0x20001094

0800eff0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eff8:	f107 0308 	add.w	r3, r7, #8
 800effc:	4618      	mov	r0, r3
 800effe:	f000 f857 	bl	800f0b0 <prvGetNextExpireTime>
 800f002:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	4619      	mov	r1, r3
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f000 f803 	bl	800f014 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f00e:	f000 f8d5 	bl	800f1bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f012:	e7f1      	b.n	800eff8 <prvTimerTask+0x8>

0800f014 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f01e:	f7ff fa43 	bl	800e4a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f022:	f107 0308 	add.w	r3, r7, #8
 800f026:	4618      	mov	r0, r3
 800f028:	f000 f866 	bl	800f0f8 <prvSampleTimeNow>
 800f02c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d130      	bne.n	800f096 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d10a      	bne.n	800f050 <prvProcessTimerOrBlockTask+0x3c>
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d806      	bhi.n	800f050 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f042:	f7ff fa3f 	bl	800e4c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f046:	68f9      	ldr	r1, [r7, #12]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f7ff ff85 	bl	800ef58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f04e:	e024      	b.n	800f09a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d008      	beq.n	800f068 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f056:	4b13      	ldr	r3, [pc, #76]	; (800f0a4 <prvProcessTimerOrBlockTask+0x90>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d101      	bne.n	800f064 <prvProcessTimerOrBlockTask+0x50>
 800f060:	2301      	movs	r3, #1
 800f062:	e000      	b.n	800f066 <prvProcessTimerOrBlockTask+0x52>
 800f064:	2300      	movs	r3, #0
 800f066:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f068:	4b0f      	ldr	r3, [pc, #60]	; (800f0a8 <prvProcessTimerOrBlockTask+0x94>)
 800f06a:	6818      	ldr	r0, [r3, #0]
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	1ad3      	subs	r3, r2, r3
 800f072:	683a      	ldr	r2, [r7, #0]
 800f074:	4619      	mov	r1, r3
 800f076:	f7fe ffa7 	bl	800dfc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f07a:	f7ff fa23 	bl	800e4c4 <xTaskResumeAll>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d10a      	bne.n	800f09a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f084:	4b09      	ldr	r3, [pc, #36]	; (800f0ac <prvProcessTimerOrBlockTask+0x98>)
 800f086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f08a:	601a      	str	r2, [r3, #0]
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	f3bf 8f6f 	isb	sy
}
 800f094:	e001      	b.n	800f09a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f096:	f7ff fa15 	bl	800e4c4 <xTaskResumeAll>
}
 800f09a:	bf00      	nop
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	20001098 	.word	0x20001098
 800f0a8:	2000109c 	.word	0x2000109c
 800f0ac:	e000ed04 	.word	0xe000ed04

0800f0b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b085      	sub	sp, #20
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f0b8:	4b0e      	ldr	r3, [pc, #56]	; (800f0f4 <prvGetNextExpireTime+0x44>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d101      	bne.n	800f0c6 <prvGetNextExpireTime+0x16>
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	e000      	b.n	800f0c8 <prvGetNextExpireTime+0x18>
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d105      	bne.n	800f0e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f0d4:	4b07      	ldr	r3, [pc, #28]	; (800f0f4 <prvGetNextExpireTime+0x44>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	60fb      	str	r3, [r7, #12]
 800f0de:	e001      	b.n	800f0e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3714      	adds	r7, #20
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop
 800f0f4:	20001094 	.word	0x20001094

0800f0f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f100:	f7ff fa7e 	bl	800e600 <xTaskGetTickCount>
 800f104:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f106:	4b0b      	ldr	r3, [pc, #44]	; (800f134 <prvSampleTimeNow+0x3c>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	68fa      	ldr	r2, [r7, #12]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d205      	bcs.n	800f11c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f110:	f000 f936 	bl	800f380 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2201      	movs	r2, #1
 800f118:	601a      	str	r2, [r3, #0]
 800f11a:	e002      	b.n	800f122 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f122:	4a04      	ldr	r2, [pc, #16]	; (800f134 <prvSampleTimeNow+0x3c>)
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f128:	68fb      	ldr	r3, [r7, #12]
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3710      	adds	r7, #16
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	200010a4 	.word	0x200010a4

0800f138 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b086      	sub	sp, #24
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
 800f144:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f146:	2300      	movs	r3, #0
 800f148:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	68fa      	ldr	r2, [r7, #12]
 800f154:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f156:	68ba      	ldr	r2, [r7, #8]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d812      	bhi.n	800f184 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	1ad2      	subs	r2, r2, r3
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	699b      	ldr	r3, [r3, #24]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d302      	bcc.n	800f172 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f16c:	2301      	movs	r3, #1
 800f16e:	617b      	str	r3, [r7, #20]
 800f170:	e01b      	b.n	800f1aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f172:	4b10      	ldr	r3, [pc, #64]	; (800f1b4 <prvInsertTimerInActiveList+0x7c>)
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	3304      	adds	r3, #4
 800f17a:	4619      	mov	r1, r3
 800f17c:	4610      	mov	r0, r2
 800f17e:	f7fe fa08 	bl	800d592 <vListInsert>
 800f182:	e012      	b.n	800f1aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f184:	687a      	ldr	r2, [r7, #4]
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d206      	bcs.n	800f19a <prvInsertTimerInActiveList+0x62>
 800f18c:	68ba      	ldr	r2, [r7, #8]
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	429a      	cmp	r2, r3
 800f192:	d302      	bcc.n	800f19a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f194:	2301      	movs	r3, #1
 800f196:	617b      	str	r3, [r7, #20]
 800f198:	e007      	b.n	800f1aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f19a:	4b07      	ldr	r3, [pc, #28]	; (800f1b8 <prvInsertTimerInActiveList+0x80>)
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	3304      	adds	r3, #4
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	4610      	mov	r0, r2
 800f1a6:	f7fe f9f4 	bl	800d592 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f1aa:	697b      	ldr	r3, [r7, #20]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3718      	adds	r7, #24
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	20001098 	.word	0x20001098
 800f1b8:	20001094 	.word	0x20001094

0800f1bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b08e      	sub	sp, #56	; 0x38
 800f1c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1c2:	e0ca      	b.n	800f35a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	da18      	bge.n	800f1fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f1ca:	1d3b      	adds	r3, r7, #4
 800f1cc:	3304      	adds	r3, #4
 800f1ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d10a      	bne.n	800f1ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1da:	f383 8811 	msr	BASEPRI, r3
 800f1de:	f3bf 8f6f 	isb	sy
 800f1e2:	f3bf 8f4f 	dsb	sy
 800f1e6:	61fb      	str	r3, [r7, #28]
}
 800f1e8:	bf00      	nop
 800f1ea:	e7fe      	b.n	800f1ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1f2:	6850      	ldr	r0, [r2, #4]
 800f1f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1f6:	6892      	ldr	r2, [r2, #8]
 800f1f8:	4611      	mov	r1, r2
 800f1fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f2c0 80aa 	blt.w	800f358 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20a:	695b      	ldr	r3, [r3, #20]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d004      	beq.n	800f21a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f212:	3304      	adds	r3, #4
 800f214:	4618      	mov	r0, r3
 800f216:	f7fe f9f5 	bl	800d604 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f21a:	463b      	mov	r3, r7
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7ff ff6b 	bl	800f0f8 <prvSampleTimeNow>
 800f222:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2b09      	cmp	r3, #9
 800f228:	f200 8097 	bhi.w	800f35a <prvProcessReceivedCommands+0x19e>
 800f22c:	a201      	add	r2, pc, #4	; (adr r2, 800f234 <prvProcessReceivedCommands+0x78>)
 800f22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f232:	bf00      	nop
 800f234:	0800f25d 	.word	0x0800f25d
 800f238:	0800f25d 	.word	0x0800f25d
 800f23c:	0800f25d 	.word	0x0800f25d
 800f240:	0800f2d1 	.word	0x0800f2d1
 800f244:	0800f2e5 	.word	0x0800f2e5
 800f248:	0800f32f 	.word	0x0800f32f
 800f24c:	0800f25d 	.word	0x0800f25d
 800f250:	0800f25d 	.word	0x0800f25d
 800f254:	0800f2d1 	.word	0x0800f2d1
 800f258:	0800f2e5 	.word	0x0800f2e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f262:	f043 0301 	orr.w	r3, r3, #1
 800f266:	b2da      	uxtb	r2, r3
 800f268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f26a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f26e:	68ba      	ldr	r2, [r7, #8]
 800f270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f272:	699b      	ldr	r3, [r3, #24]
 800f274:	18d1      	adds	r1, r2, r3
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f27a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f27c:	f7ff ff5c 	bl	800f138 <prvInsertTimerInActiveList>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d069      	beq.n	800f35a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f288:	6a1b      	ldr	r3, [r3, #32]
 800f28a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f28c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f294:	f003 0304 	and.w	r3, r3, #4
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d05e      	beq.n	800f35a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f29c:	68ba      	ldr	r2, [r7, #8]
 800f29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a0:	699b      	ldr	r3, [r3, #24]
 800f2a2:	441a      	add	r2, r3
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	9300      	str	r3, [sp, #0]
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	2100      	movs	r1, #0
 800f2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2ae:	f7ff fe05 	bl	800eebc <xTimerGenericCommand>
 800f2b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f2b4:	6a3b      	ldr	r3, [r7, #32]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d14f      	bne.n	800f35a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2be:	f383 8811 	msr	BASEPRI, r3
 800f2c2:	f3bf 8f6f 	isb	sy
 800f2c6:	f3bf 8f4f 	dsb	sy
 800f2ca:	61bb      	str	r3, [r7, #24]
}
 800f2cc:	bf00      	nop
 800f2ce:	e7fe      	b.n	800f2ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2d6:	f023 0301 	bic.w	r3, r3, #1
 800f2da:	b2da      	uxtb	r2, r3
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f2e2:	e03a      	b.n	800f35a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2ea:	f043 0301 	orr.w	r3, r3, #1
 800f2ee:	b2da      	uxtb	r2, r3
 800f2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f2f6:	68ba      	ldr	r2, [r7, #8]
 800f2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fe:	699b      	ldr	r3, [r3, #24]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d10a      	bne.n	800f31a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	617b      	str	r3, [r7, #20]
}
 800f316:	bf00      	nop
 800f318:	e7fe      	b.n	800f318 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31c:	699a      	ldr	r2, [r3, #24]
 800f31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f320:	18d1      	adds	r1, r2, r3
 800f322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f328:	f7ff ff06 	bl	800f138 <prvInsertTimerInActiveList>
					break;
 800f32c:	e015      	b.n	800f35a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f334:	f003 0302 	and.w	r3, r3, #2
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d103      	bne.n	800f344 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f33c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f33e:	f000 fbdf 	bl	800fb00 <vPortFree>
 800f342:	e00a      	b.n	800f35a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f34a:	f023 0301 	bic.w	r3, r3, #1
 800f34e:	b2da      	uxtb	r2, r3
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f356:	e000      	b.n	800f35a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f358:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f35a:	4b08      	ldr	r3, [pc, #32]	; (800f37c <prvProcessReceivedCommands+0x1c0>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	1d39      	adds	r1, r7, #4
 800f360:	2200      	movs	r2, #0
 800f362:	4618      	mov	r0, r3
 800f364:	f7fe fc16 	bl	800db94 <xQueueReceive>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	f47f af2a 	bne.w	800f1c4 <prvProcessReceivedCommands+0x8>
	}
}
 800f370:	bf00      	nop
 800f372:	bf00      	nop
 800f374:	3730      	adds	r7, #48	; 0x30
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	2000109c 	.word	0x2000109c

0800f380 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b088      	sub	sp, #32
 800f384:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f386:	e048      	b.n	800f41a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f388:	4b2d      	ldr	r3, [pc, #180]	; (800f440 <prvSwitchTimerLists+0xc0>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f392:	4b2b      	ldr	r3, [pc, #172]	; (800f440 <prvSwitchTimerLists+0xc0>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	68db      	ldr	r3, [r3, #12]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	3304      	adds	r3, #4
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fe f92f 	bl	800d604 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	6a1b      	ldr	r3, [r3, #32]
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f3b4:	f003 0304 	and.w	r3, r3, #4
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d02e      	beq.n	800f41a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	699b      	ldr	r3, [r3, #24]
 800f3c0:	693a      	ldr	r2, [r7, #16]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f3c6:	68ba      	ldr	r2, [r7, #8]
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d90e      	bls.n	800f3ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	68ba      	ldr	r2, [r7, #8]
 800f3d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	68fa      	ldr	r2, [r7, #12]
 800f3d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3da:	4b19      	ldr	r3, [pc, #100]	; (800f440 <prvSwitchTimerLists+0xc0>)
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	3304      	adds	r3, #4
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	4610      	mov	r0, r2
 800f3e6:	f7fe f8d4 	bl	800d592 <vListInsert>
 800f3ea:	e016      	b.n	800f41a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	9300      	str	r3, [sp, #0]
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	693a      	ldr	r2, [r7, #16]
 800f3f4:	2100      	movs	r1, #0
 800f3f6:	68f8      	ldr	r0, [r7, #12]
 800f3f8:	f7ff fd60 	bl	800eebc <xTimerGenericCommand>
 800f3fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10a      	bne.n	800f41a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f408:	f383 8811 	msr	BASEPRI, r3
 800f40c:	f3bf 8f6f 	isb	sy
 800f410:	f3bf 8f4f 	dsb	sy
 800f414:	603b      	str	r3, [r7, #0]
}
 800f416:	bf00      	nop
 800f418:	e7fe      	b.n	800f418 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f41a:	4b09      	ldr	r3, [pc, #36]	; (800f440 <prvSwitchTimerLists+0xc0>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d1b1      	bne.n	800f388 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f424:	4b06      	ldr	r3, [pc, #24]	; (800f440 <prvSwitchTimerLists+0xc0>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f42a:	4b06      	ldr	r3, [pc, #24]	; (800f444 <prvSwitchTimerLists+0xc4>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4a04      	ldr	r2, [pc, #16]	; (800f440 <prvSwitchTimerLists+0xc0>)
 800f430:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f432:	4a04      	ldr	r2, [pc, #16]	; (800f444 <prvSwitchTimerLists+0xc4>)
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	6013      	str	r3, [r2, #0]
}
 800f438:	bf00      	nop
 800f43a:	3718      	adds	r7, #24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	20001094 	.word	0x20001094
 800f444:	20001098 	.word	0x20001098

0800f448 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f44e:	f000 f969 	bl	800f724 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f452:	4b15      	ldr	r3, [pc, #84]	; (800f4a8 <prvCheckForValidListAndQueue+0x60>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d120      	bne.n	800f49c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f45a:	4814      	ldr	r0, [pc, #80]	; (800f4ac <prvCheckForValidListAndQueue+0x64>)
 800f45c:	f7fe f848 	bl	800d4f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f460:	4813      	ldr	r0, [pc, #76]	; (800f4b0 <prvCheckForValidListAndQueue+0x68>)
 800f462:	f7fe f845 	bl	800d4f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f466:	4b13      	ldr	r3, [pc, #76]	; (800f4b4 <prvCheckForValidListAndQueue+0x6c>)
 800f468:	4a10      	ldr	r2, [pc, #64]	; (800f4ac <prvCheckForValidListAndQueue+0x64>)
 800f46a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f46c:	4b12      	ldr	r3, [pc, #72]	; (800f4b8 <prvCheckForValidListAndQueue+0x70>)
 800f46e:	4a10      	ldr	r2, [pc, #64]	; (800f4b0 <prvCheckForValidListAndQueue+0x68>)
 800f470:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f472:	2300      	movs	r3, #0
 800f474:	9300      	str	r3, [sp, #0]
 800f476:	4b11      	ldr	r3, [pc, #68]	; (800f4bc <prvCheckForValidListAndQueue+0x74>)
 800f478:	4a11      	ldr	r2, [pc, #68]	; (800f4c0 <prvCheckForValidListAndQueue+0x78>)
 800f47a:	2110      	movs	r1, #16
 800f47c:	200a      	movs	r0, #10
 800f47e:	f7fe f953 	bl	800d728 <xQueueGenericCreateStatic>
 800f482:	4603      	mov	r3, r0
 800f484:	4a08      	ldr	r2, [pc, #32]	; (800f4a8 <prvCheckForValidListAndQueue+0x60>)
 800f486:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f488:	4b07      	ldr	r3, [pc, #28]	; (800f4a8 <prvCheckForValidListAndQueue+0x60>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d005      	beq.n	800f49c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f490:	4b05      	ldr	r3, [pc, #20]	; (800f4a8 <prvCheckForValidListAndQueue+0x60>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	490b      	ldr	r1, [pc, #44]	; (800f4c4 <prvCheckForValidListAndQueue+0x7c>)
 800f496:	4618      	mov	r0, r3
 800f498:	f7fe fd6c 	bl	800df74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f49c:	f000 f972 	bl	800f784 <vPortExitCritical>
}
 800f4a0:	bf00      	nop
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}
 800f4a6:	bf00      	nop
 800f4a8:	2000109c 	.word	0x2000109c
 800f4ac:	2000106c 	.word	0x2000106c
 800f4b0:	20001080 	.word	0x20001080
 800f4b4:	20001094 	.word	0x20001094
 800f4b8:	20001098 	.word	0x20001098
 800f4bc:	20001148 	.word	0x20001148
 800f4c0:	200010a8 	.word	0x200010a8
 800f4c4:	08015214 	.word	0x08015214

0800f4c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b085      	sub	sp, #20
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	3b04      	subs	r3, #4
 800f4d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f4e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	3b04      	subs	r3, #4
 800f4e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	f023 0201 	bic.w	r2, r3, #1
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	3b04      	subs	r3, #4
 800f4f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f4f8:	4a0c      	ldr	r2, [pc, #48]	; (800f52c <pxPortInitialiseStack+0x64>)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	3b14      	subs	r3, #20
 800f502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	3b04      	subs	r3, #4
 800f50e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	f06f 0202 	mvn.w	r2, #2
 800f516:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	3b20      	subs	r3, #32
 800f51c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f51e:	68fb      	ldr	r3, [r7, #12]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3714      	adds	r7, #20
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr
 800f52c:	0800f531 	.word	0x0800f531

0800f530 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f530:	b480      	push	{r7}
 800f532:	b085      	sub	sp, #20
 800f534:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f536:	2300      	movs	r3, #0
 800f538:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f53a:	4b12      	ldr	r3, [pc, #72]	; (800f584 <prvTaskExitError+0x54>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f542:	d00a      	beq.n	800f55a <prvTaskExitError+0x2a>
	__asm volatile
 800f544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f548:	f383 8811 	msr	BASEPRI, r3
 800f54c:	f3bf 8f6f 	isb	sy
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	60fb      	str	r3, [r7, #12]
}
 800f556:	bf00      	nop
 800f558:	e7fe      	b.n	800f558 <prvTaskExitError+0x28>
	__asm volatile
 800f55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f55e:	f383 8811 	msr	BASEPRI, r3
 800f562:	f3bf 8f6f 	isb	sy
 800f566:	f3bf 8f4f 	dsb	sy
 800f56a:	60bb      	str	r3, [r7, #8]
}
 800f56c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f56e:	bf00      	nop
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d0fc      	beq.n	800f570 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f576:	bf00      	nop
 800f578:	bf00      	nop
 800f57a:	3714      	adds	r7, #20
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr
 800f584:	20000130 	.word	0x20000130
	...

0800f590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f590:	4b07      	ldr	r3, [pc, #28]	; (800f5b0 <pxCurrentTCBConst2>)
 800f592:	6819      	ldr	r1, [r3, #0]
 800f594:	6808      	ldr	r0, [r1, #0]
 800f596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f59a:	f380 8809 	msr	PSP, r0
 800f59e:	f3bf 8f6f 	isb	sy
 800f5a2:	f04f 0000 	mov.w	r0, #0
 800f5a6:	f380 8811 	msr	BASEPRI, r0
 800f5aa:	4770      	bx	lr
 800f5ac:	f3af 8000 	nop.w

0800f5b0 <pxCurrentTCBConst2>:
 800f5b0:	20000b6c 	.word	0x20000b6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f5b4:	bf00      	nop
 800f5b6:	bf00      	nop

0800f5b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f5b8:	4808      	ldr	r0, [pc, #32]	; (800f5dc <prvPortStartFirstTask+0x24>)
 800f5ba:	6800      	ldr	r0, [r0, #0]
 800f5bc:	6800      	ldr	r0, [r0, #0]
 800f5be:	f380 8808 	msr	MSP, r0
 800f5c2:	f04f 0000 	mov.w	r0, #0
 800f5c6:	f380 8814 	msr	CONTROL, r0
 800f5ca:	b662      	cpsie	i
 800f5cc:	b661      	cpsie	f
 800f5ce:	f3bf 8f4f 	dsb	sy
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	df00      	svc	0
 800f5d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f5da:	bf00      	nop
 800f5dc:	e000ed08 	.word	0xe000ed08

0800f5e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b086      	sub	sp, #24
 800f5e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f5e6:	4b46      	ldr	r3, [pc, #280]	; (800f700 <xPortStartScheduler+0x120>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4a46      	ldr	r2, [pc, #280]	; (800f704 <xPortStartScheduler+0x124>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d10a      	bne.n	800f606 <xPortStartScheduler+0x26>
	__asm volatile
 800f5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5f4:	f383 8811 	msr	BASEPRI, r3
 800f5f8:	f3bf 8f6f 	isb	sy
 800f5fc:	f3bf 8f4f 	dsb	sy
 800f600:	613b      	str	r3, [r7, #16]
}
 800f602:	bf00      	nop
 800f604:	e7fe      	b.n	800f604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f606:	4b3e      	ldr	r3, [pc, #248]	; (800f700 <xPortStartScheduler+0x120>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	4a3f      	ldr	r2, [pc, #252]	; (800f708 <xPortStartScheduler+0x128>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d10a      	bne.n	800f626 <xPortStartScheduler+0x46>
	__asm volatile
 800f610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f614:	f383 8811 	msr	BASEPRI, r3
 800f618:	f3bf 8f6f 	isb	sy
 800f61c:	f3bf 8f4f 	dsb	sy
 800f620:	60fb      	str	r3, [r7, #12]
}
 800f622:	bf00      	nop
 800f624:	e7fe      	b.n	800f624 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f626:	4b39      	ldr	r3, [pc, #228]	; (800f70c <xPortStartScheduler+0x12c>)
 800f628:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	22ff      	movs	r2, #255	; 0xff
 800f636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f640:	78fb      	ldrb	r3, [r7, #3]
 800f642:	b2db      	uxtb	r3, r3
 800f644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f648:	b2da      	uxtb	r2, r3
 800f64a:	4b31      	ldr	r3, [pc, #196]	; (800f710 <xPortStartScheduler+0x130>)
 800f64c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f64e:	4b31      	ldr	r3, [pc, #196]	; (800f714 <xPortStartScheduler+0x134>)
 800f650:	2207      	movs	r2, #7
 800f652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f654:	e009      	b.n	800f66a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f656:	4b2f      	ldr	r3, [pc, #188]	; (800f714 <xPortStartScheduler+0x134>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	3b01      	subs	r3, #1
 800f65c:	4a2d      	ldr	r2, [pc, #180]	; (800f714 <xPortStartScheduler+0x134>)
 800f65e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f660:	78fb      	ldrb	r3, [r7, #3]
 800f662:	b2db      	uxtb	r3, r3
 800f664:	005b      	lsls	r3, r3, #1
 800f666:	b2db      	uxtb	r3, r3
 800f668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f66a:	78fb      	ldrb	r3, [r7, #3]
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f672:	2b80      	cmp	r3, #128	; 0x80
 800f674:	d0ef      	beq.n	800f656 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f676:	4b27      	ldr	r3, [pc, #156]	; (800f714 <xPortStartScheduler+0x134>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f1c3 0307 	rsb	r3, r3, #7
 800f67e:	2b04      	cmp	r3, #4
 800f680:	d00a      	beq.n	800f698 <xPortStartScheduler+0xb8>
	__asm volatile
 800f682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f686:	f383 8811 	msr	BASEPRI, r3
 800f68a:	f3bf 8f6f 	isb	sy
 800f68e:	f3bf 8f4f 	dsb	sy
 800f692:	60bb      	str	r3, [r7, #8]
}
 800f694:	bf00      	nop
 800f696:	e7fe      	b.n	800f696 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f698:	4b1e      	ldr	r3, [pc, #120]	; (800f714 <xPortStartScheduler+0x134>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	021b      	lsls	r3, r3, #8
 800f69e:	4a1d      	ldr	r2, [pc, #116]	; (800f714 <xPortStartScheduler+0x134>)
 800f6a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f6a2:	4b1c      	ldr	r3, [pc, #112]	; (800f714 <xPortStartScheduler+0x134>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f6aa:	4a1a      	ldr	r2, [pc, #104]	; (800f714 <xPortStartScheduler+0x134>)
 800f6ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	b2da      	uxtb	r2, r3
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f6b6:	4b18      	ldr	r3, [pc, #96]	; (800f718 <xPortStartScheduler+0x138>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4a17      	ldr	r2, [pc, #92]	; (800f718 <xPortStartScheduler+0x138>)
 800f6bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f6c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f6c2:	4b15      	ldr	r3, [pc, #84]	; (800f718 <xPortStartScheduler+0x138>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4a14      	ldr	r2, [pc, #80]	; (800f718 <xPortStartScheduler+0x138>)
 800f6c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f6cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f6ce:	f000 f8dd 	bl	800f88c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f6d2:	4b12      	ldr	r3, [pc, #72]	; (800f71c <xPortStartScheduler+0x13c>)
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f6d8:	f000 f8fc 	bl	800f8d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f6dc:	4b10      	ldr	r3, [pc, #64]	; (800f720 <xPortStartScheduler+0x140>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a0f      	ldr	r2, [pc, #60]	; (800f720 <xPortStartScheduler+0x140>)
 800f6e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f6e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f6e8:	f7ff ff66 	bl	800f5b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f6ec:	f7ff f852 	bl	800e794 <vTaskSwitchContext>
	prvTaskExitError();
 800f6f0:	f7ff ff1e 	bl	800f530 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f6f4:	2300      	movs	r3, #0
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3718      	adds	r7, #24
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	e000ed00 	.word	0xe000ed00
 800f704:	410fc271 	.word	0x410fc271
 800f708:	410fc270 	.word	0x410fc270
 800f70c:	e000e400 	.word	0xe000e400
 800f710:	20001198 	.word	0x20001198
 800f714:	2000119c 	.word	0x2000119c
 800f718:	e000ed20 	.word	0xe000ed20
 800f71c:	20000130 	.word	0x20000130
 800f720:	e000ef34 	.word	0xe000ef34

0800f724 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
	__asm volatile
 800f72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72e:	f383 8811 	msr	BASEPRI, r3
 800f732:	f3bf 8f6f 	isb	sy
 800f736:	f3bf 8f4f 	dsb	sy
 800f73a:	607b      	str	r3, [r7, #4]
}
 800f73c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f73e:	4b0f      	ldr	r3, [pc, #60]	; (800f77c <vPortEnterCritical+0x58>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	3301      	adds	r3, #1
 800f744:	4a0d      	ldr	r2, [pc, #52]	; (800f77c <vPortEnterCritical+0x58>)
 800f746:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f748:	4b0c      	ldr	r3, [pc, #48]	; (800f77c <vPortEnterCritical+0x58>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d10f      	bne.n	800f770 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f750:	4b0b      	ldr	r3, [pc, #44]	; (800f780 <vPortEnterCritical+0x5c>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	b2db      	uxtb	r3, r3
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00a      	beq.n	800f770 <vPortEnterCritical+0x4c>
	__asm volatile
 800f75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	603b      	str	r3, [r7, #0]
}
 800f76c:	bf00      	nop
 800f76e:	e7fe      	b.n	800f76e <vPortEnterCritical+0x4a>
	}
}
 800f770:	bf00      	nop
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr
 800f77c:	20000130 	.word	0x20000130
 800f780:	e000ed04 	.word	0xe000ed04

0800f784 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f78a:	4b12      	ldr	r3, [pc, #72]	; (800f7d4 <vPortExitCritical+0x50>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d10a      	bne.n	800f7a8 <vPortExitCritical+0x24>
	__asm volatile
 800f792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	607b      	str	r3, [r7, #4]
}
 800f7a4:	bf00      	nop
 800f7a6:	e7fe      	b.n	800f7a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f7a8:	4b0a      	ldr	r3, [pc, #40]	; (800f7d4 <vPortExitCritical+0x50>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	4a09      	ldr	r2, [pc, #36]	; (800f7d4 <vPortExitCritical+0x50>)
 800f7b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f7b2:	4b08      	ldr	r3, [pc, #32]	; (800f7d4 <vPortExitCritical+0x50>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d105      	bne.n	800f7c6 <vPortExitCritical+0x42>
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	f383 8811 	msr	BASEPRI, r3
}
 800f7c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f7c6:	bf00      	nop
 800f7c8:	370c      	adds	r7, #12
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	20000130 	.word	0x20000130
	...

0800f7e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f7e0:	f3ef 8009 	mrs	r0, PSP
 800f7e4:	f3bf 8f6f 	isb	sy
 800f7e8:	4b15      	ldr	r3, [pc, #84]	; (800f840 <pxCurrentTCBConst>)
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	f01e 0f10 	tst.w	lr, #16
 800f7f0:	bf08      	it	eq
 800f7f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f7f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7fa:	6010      	str	r0, [r2, #0]
 800f7fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f800:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f804:	f380 8811 	msr	BASEPRI, r0
 800f808:	f3bf 8f4f 	dsb	sy
 800f80c:	f3bf 8f6f 	isb	sy
 800f810:	f7fe ffc0 	bl	800e794 <vTaskSwitchContext>
 800f814:	f04f 0000 	mov.w	r0, #0
 800f818:	f380 8811 	msr	BASEPRI, r0
 800f81c:	bc09      	pop	{r0, r3}
 800f81e:	6819      	ldr	r1, [r3, #0]
 800f820:	6808      	ldr	r0, [r1, #0]
 800f822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f826:	f01e 0f10 	tst.w	lr, #16
 800f82a:	bf08      	it	eq
 800f82c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f830:	f380 8809 	msr	PSP, r0
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	f3af 8000 	nop.w

0800f840 <pxCurrentTCBConst>:
 800f840:	20000b6c 	.word	0x20000b6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f844:	bf00      	nop
 800f846:	bf00      	nop

0800f848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
	__asm volatile
 800f84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f852:	f383 8811 	msr	BASEPRI, r3
 800f856:	f3bf 8f6f 	isb	sy
 800f85a:	f3bf 8f4f 	dsb	sy
 800f85e:	607b      	str	r3, [r7, #4]
}
 800f860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f862:	f7fe fedd 	bl	800e620 <xTaskIncrementTick>
 800f866:	4603      	mov	r3, r0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d003      	beq.n	800f874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f86c:	4b06      	ldr	r3, [pc, #24]	; (800f888 <xPortSysTickHandler+0x40>)
 800f86e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f872:	601a      	str	r2, [r3, #0]
 800f874:	2300      	movs	r3, #0
 800f876:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	f383 8811 	msr	BASEPRI, r3
}
 800f87e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f880:	bf00      	nop
 800f882:	3708      	adds	r7, #8
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}
 800f888:	e000ed04 	.word	0xe000ed04

0800f88c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f88c:	b480      	push	{r7}
 800f88e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f890:	4b0b      	ldr	r3, [pc, #44]	; (800f8c0 <vPortSetupTimerInterrupt+0x34>)
 800f892:	2200      	movs	r2, #0
 800f894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f896:	4b0b      	ldr	r3, [pc, #44]	; (800f8c4 <vPortSetupTimerInterrupt+0x38>)
 800f898:	2200      	movs	r2, #0
 800f89a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f89c:	4b0a      	ldr	r3, [pc, #40]	; (800f8c8 <vPortSetupTimerInterrupt+0x3c>)
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4a0a      	ldr	r2, [pc, #40]	; (800f8cc <vPortSetupTimerInterrupt+0x40>)
 800f8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8a6:	099b      	lsrs	r3, r3, #6
 800f8a8:	4a09      	ldr	r2, [pc, #36]	; (800f8d0 <vPortSetupTimerInterrupt+0x44>)
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f8ae:	4b04      	ldr	r3, [pc, #16]	; (800f8c0 <vPortSetupTimerInterrupt+0x34>)
 800f8b0:	2207      	movs	r2, #7
 800f8b2:	601a      	str	r2, [r3, #0]
}
 800f8b4:	bf00      	nop
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	e000e010 	.word	0xe000e010
 800f8c4:	e000e018 	.word	0xe000e018
 800f8c8:	20000014 	.word	0x20000014
 800f8cc:	10624dd3 	.word	0x10624dd3
 800f8d0:	e000e014 	.word	0xe000e014

0800f8d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f8d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f8e4 <vPortEnableVFP+0x10>
 800f8d8:	6801      	ldr	r1, [r0, #0]
 800f8da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f8de:	6001      	str	r1, [r0, #0]
 800f8e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f8e2:	bf00      	nop
 800f8e4:	e000ed88 	.word	0xe000ed88

0800f8e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f8ee:	f3ef 8305 	mrs	r3, IPSR
 800f8f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2b0f      	cmp	r3, #15
 800f8f8:	d914      	bls.n	800f924 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f8fa:	4a17      	ldr	r2, [pc, #92]	; (800f958 <vPortValidateInterruptPriority+0x70>)
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	4413      	add	r3, r2
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f904:	4b15      	ldr	r3, [pc, #84]	; (800f95c <vPortValidateInterruptPriority+0x74>)
 800f906:	781b      	ldrb	r3, [r3, #0]
 800f908:	7afa      	ldrb	r2, [r7, #11]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d20a      	bcs.n	800f924 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f912:	f383 8811 	msr	BASEPRI, r3
 800f916:	f3bf 8f6f 	isb	sy
 800f91a:	f3bf 8f4f 	dsb	sy
 800f91e:	607b      	str	r3, [r7, #4]
}
 800f920:	bf00      	nop
 800f922:	e7fe      	b.n	800f922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f924:	4b0e      	ldr	r3, [pc, #56]	; (800f960 <vPortValidateInterruptPriority+0x78>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f92c:	4b0d      	ldr	r3, [pc, #52]	; (800f964 <vPortValidateInterruptPriority+0x7c>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	429a      	cmp	r2, r3
 800f932:	d90a      	bls.n	800f94a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f938:	f383 8811 	msr	BASEPRI, r3
 800f93c:	f3bf 8f6f 	isb	sy
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	603b      	str	r3, [r7, #0]
}
 800f946:	bf00      	nop
 800f948:	e7fe      	b.n	800f948 <vPortValidateInterruptPriority+0x60>
	}
 800f94a:	bf00      	nop
 800f94c:	3714      	adds	r7, #20
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop
 800f958:	e000e3f0 	.word	0xe000e3f0
 800f95c:	20001198 	.word	0x20001198
 800f960:	e000ed0c 	.word	0xe000ed0c
 800f964:	2000119c 	.word	0x2000119c

0800f968 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b08a      	sub	sp, #40	; 0x28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f970:	2300      	movs	r3, #0
 800f972:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f974:	f7fe fd98 	bl	800e4a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f978:	4b5b      	ldr	r3, [pc, #364]	; (800fae8 <pvPortMalloc+0x180>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d101      	bne.n	800f984 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f980:	f000 f920 	bl	800fbc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f984:	4b59      	ldr	r3, [pc, #356]	; (800faec <pvPortMalloc+0x184>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	4013      	ands	r3, r2
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f040 8093 	bne.w	800fab8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d01d      	beq.n	800f9d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f998:	2208      	movs	r2, #8
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4413      	add	r3, r2
 800f99e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f003 0307 	and.w	r3, r3, #7
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d014      	beq.n	800f9d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f023 0307 	bic.w	r3, r3, #7
 800f9b0:	3308      	adds	r3, #8
 800f9b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f003 0307 	and.w	r3, r3, #7
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00a      	beq.n	800f9d4 <pvPortMalloc+0x6c>
	__asm volatile
 800f9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c2:	f383 8811 	msr	BASEPRI, r3
 800f9c6:	f3bf 8f6f 	isb	sy
 800f9ca:	f3bf 8f4f 	dsb	sy
 800f9ce:	617b      	str	r3, [r7, #20]
}
 800f9d0:	bf00      	nop
 800f9d2:	e7fe      	b.n	800f9d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d06e      	beq.n	800fab8 <pvPortMalloc+0x150>
 800f9da:	4b45      	ldr	r3, [pc, #276]	; (800faf0 <pvPortMalloc+0x188>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d869      	bhi.n	800fab8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f9e4:	4b43      	ldr	r3, [pc, #268]	; (800faf4 <pvPortMalloc+0x18c>)
 800f9e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f9e8:	4b42      	ldr	r3, [pc, #264]	; (800faf4 <pvPortMalloc+0x18c>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9ee:	e004      	b.n	800f9fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d903      	bls.n	800fa0c <pvPortMalloc+0xa4>
 800fa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d1f1      	bne.n	800f9f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fa0c:	4b36      	ldr	r3, [pc, #216]	; (800fae8 <pvPortMalloc+0x180>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d050      	beq.n	800fab8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fa16:	6a3b      	ldr	r3, [r7, #32]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2208      	movs	r2, #8
 800fa1c:	4413      	add	r3, r2
 800fa1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	6a3b      	ldr	r3, [r7, #32]
 800fa26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fa28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2a:	685a      	ldr	r2, [r3, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	1ad2      	subs	r2, r2, r3
 800fa30:	2308      	movs	r3, #8
 800fa32:	005b      	lsls	r3, r3, #1
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d91f      	bls.n	800fa78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fa38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fa40:	69bb      	ldr	r3, [r7, #24]
 800fa42:	f003 0307 	and.w	r3, r3, #7
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00a      	beq.n	800fa60 <pvPortMalloc+0xf8>
	__asm volatile
 800fa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	613b      	str	r3, [r7, #16]
}
 800fa5c:	bf00      	nop
 800fa5e:	e7fe      	b.n	800fa5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa62:	685a      	ldr	r2, [r3, #4]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	1ad2      	subs	r2, r2, r3
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fa72:	69b8      	ldr	r0, [r7, #24]
 800fa74:	f000 f908 	bl	800fc88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fa78:	4b1d      	ldr	r3, [pc, #116]	; (800faf0 <pvPortMalloc+0x188>)
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	1ad3      	subs	r3, r2, r3
 800fa82:	4a1b      	ldr	r2, [pc, #108]	; (800faf0 <pvPortMalloc+0x188>)
 800fa84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fa86:	4b1a      	ldr	r3, [pc, #104]	; (800faf0 <pvPortMalloc+0x188>)
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	4b1b      	ldr	r3, [pc, #108]	; (800faf8 <pvPortMalloc+0x190>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d203      	bcs.n	800fa9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fa92:	4b17      	ldr	r3, [pc, #92]	; (800faf0 <pvPortMalloc+0x188>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4a18      	ldr	r2, [pc, #96]	; (800faf8 <pvPortMalloc+0x190>)
 800fa98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9c:	685a      	ldr	r2, [r3, #4]
 800fa9e:	4b13      	ldr	r3, [pc, #76]	; (800faec <pvPortMalloc+0x184>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	431a      	orrs	r2, r3
 800faa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800faa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faaa:	2200      	movs	r2, #0
 800faac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800faae:	4b13      	ldr	r3, [pc, #76]	; (800fafc <pvPortMalloc+0x194>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	3301      	adds	r3, #1
 800fab4:	4a11      	ldr	r2, [pc, #68]	; (800fafc <pvPortMalloc+0x194>)
 800fab6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fab8:	f7fe fd04 	bl	800e4c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fabc:	69fb      	ldr	r3, [r7, #28]
 800fabe:	f003 0307 	and.w	r3, r3, #7
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00a      	beq.n	800fadc <pvPortMalloc+0x174>
	__asm volatile
 800fac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faca:	f383 8811 	msr	BASEPRI, r3
 800face:	f3bf 8f6f 	isb	sy
 800fad2:	f3bf 8f4f 	dsb	sy
 800fad6:	60fb      	str	r3, [r7, #12]
}
 800fad8:	bf00      	nop
 800fada:	e7fe      	b.n	800fada <pvPortMalloc+0x172>
	return pvReturn;
 800fadc:	69fb      	ldr	r3, [r7, #28]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3728      	adds	r7, #40	; 0x28
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
 800fae6:	bf00      	nop
 800fae8:	200089a8 	.word	0x200089a8
 800faec:	200089bc 	.word	0x200089bc
 800faf0:	200089ac 	.word	0x200089ac
 800faf4:	200089a0 	.word	0x200089a0
 800faf8:	200089b0 	.word	0x200089b0
 800fafc:	200089b4 	.word	0x200089b4

0800fb00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b086      	sub	sp, #24
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d04d      	beq.n	800fbae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fb12:	2308      	movs	r3, #8
 800fb14:	425b      	negs	r3, r3
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	4413      	add	r3, r2
 800fb1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	685a      	ldr	r2, [r3, #4]
 800fb24:	4b24      	ldr	r3, [pc, #144]	; (800fbb8 <vPortFree+0xb8>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	4013      	ands	r3, r2
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d10a      	bne.n	800fb44 <vPortFree+0x44>
	__asm volatile
 800fb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb32:	f383 8811 	msr	BASEPRI, r3
 800fb36:	f3bf 8f6f 	isb	sy
 800fb3a:	f3bf 8f4f 	dsb	sy
 800fb3e:	60fb      	str	r3, [r7, #12]
}
 800fb40:	bf00      	nop
 800fb42:	e7fe      	b.n	800fb42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00a      	beq.n	800fb62 <vPortFree+0x62>
	__asm volatile
 800fb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb50:	f383 8811 	msr	BASEPRI, r3
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	f3bf 8f4f 	dsb	sy
 800fb5c:	60bb      	str	r3, [r7, #8]
}
 800fb5e:	bf00      	nop
 800fb60:	e7fe      	b.n	800fb60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	685a      	ldr	r2, [r3, #4]
 800fb66:	4b14      	ldr	r3, [pc, #80]	; (800fbb8 <vPortFree+0xb8>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4013      	ands	r3, r2
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d01e      	beq.n	800fbae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d11a      	bne.n	800fbae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	685a      	ldr	r2, [r3, #4]
 800fb7c:	4b0e      	ldr	r3, [pc, #56]	; (800fbb8 <vPortFree+0xb8>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	43db      	mvns	r3, r3
 800fb82:	401a      	ands	r2, r3
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fb88:	f7fe fc8e 	bl	800e4a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	685a      	ldr	r2, [r3, #4]
 800fb90:	4b0a      	ldr	r3, [pc, #40]	; (800fbbc <vPortFree+0xbc>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4413      	add	r3, r2
 800fb96:	4a09      	ldr	r2, [pc, #36]	; (800fbbc <vPortFree+0xbc>)
 800fb98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fb9a:	6938      	ldr	r0, [r7, #16]
 800fb9c:	f000 f874 	bl	800fc88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fba0:	4b07      	ldr	r3, [pc, #28]	; (800fbc0 <vPortFree+0xc0>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	3301      	adds	r3, #1
 800fba6:	4a06      	ldr	r2, [pc, #24]	; (800fbc0 <vPortFree+0xc0>)
 800fba8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fbaa:	f7fe fc8b 	bl	800e4c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fbae:	bf00      	nop
 800fbb0:	3718      	adds	r7, #24
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	200089bc 	.word	0x200089bc
 800fbbc:	200089ac 	.word	0x200089ac
 800fbc0:	200089b8 	.word	0x200089b8

0800fbc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b085      	sub	sp, #20
 800fbc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fbca:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800fbce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fbd0:	4b27      	ldr	r3, [pc, #156]	; (800fc70 <prvHeapInit+0xac>)
 800fbd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f003 0307 	and.w	r3, r3, #7
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00c      	beq.n	800fbf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	3307      	adds	r3, #7
 800fbe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f023 0307 	bic.w	r3, r3, #7
 800fbea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fbec:	68ba      	ldr	r2, [r7, #8]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	1ad3      	subs	r3, r2, r3
 800fbf2:	4a1f      	ldr	r2, [pc, #124]	; (800fc70 <prvHeapInit+0xac>)
 800fbf4:	4413      	add	r3, r2
 800fbf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fbfc:	4a1d      	ldr	r2, [pc, #116]	; (800fc74 <prvHeapInit+0xb0>)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fc02:	4b1c      	ldr	r3, [pc, #112]	; (800fc74 <prvHeapInit+0xb0>)
 800fc04:	2200      	movs	r2, #0
 800fc06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fc10:	2208      	movs	r2, #8
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	1a9b      	subs	r3, r3, r2
 800fc16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f023 0307 	bic.w	r3, r3, #7
 800fc1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	4a15      	ldr	r2, [pc, #84]	; (800fc78 <prvHeapInit+0xb4>)
 800fc24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fc26:	4b14      	ldr	r3, [pc, #80]	; (800fc78 <prvHeapInit+0xb4>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fc2e:	4b12      	ldr	r3, [pc, #72]	; (800fc78 <prvHeapInit+0xb4>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2200      	movs	r2, #0
 800fc34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	68fa      	ldr	r2, [r7, #12]
 800fc3e:	1ad2      	subs	r2, r2, r3
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fc44:	4b0c      	ldr	r3, [pc, #48]	; (800fc78 <prvHeapInit+0xb4>)
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	4a0a      	ldr	r2, [pc, #40]	; (800fc7c <prvHeapInit+0xb8>)
 800fc52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	4a09      	ldr	r2, [pc, #36]	; (800fc80 <prvHeapInit+0xbc>)
 800fc5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fc5c:	4b09      	ldr	r3, [pc, #36]	; (800fc84 <prvHeapInit+0xc0>)
 800fc5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fc62:	601a      	str	r2, [r3, #0]
}
 800fc64:	bf00      	nop
 800fc66:	3714      	adds	r7, #20
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	200011a0 	.word	0x200011a0
 800fc74:	200089a0 	.word	0x200089a0
 800fc78:	200089a8 	.word	0x200089a8
 800fc7c:	200089b0 	.word	0x200089b0
 800fc80:	200089ac 	.word	0x200089ac
 800fc84:	200089bc 	.word	0x200089bc

0800fc88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fc90:	4b28      	ldr	r3, [pc, #160]	; (800fd34 <prvInsertBlockIntoFreeList+0xac>)
 800fc92:	60fb      	str	r3, [r7, #12]
 800fc94:	e002      	b.n	800fc9c <prvInsertBlockIntoFreeList+0x14>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	60fb      	str	r3, [r7, #12]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d8f7      	bhi.n	800fc96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d108      	bne.n	800fcca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	685a      	ldr	r2, [r3, #4]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	441a      	add	r2, r3
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	68ba      	ldr	r2, [r7, #8]
 800fcd4:	441a      	add	r2, r3
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d118      	bne.n	800fd10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681a      	ldr	r2, [r3, #0]
 800fce2:	4b15      	ldr	r3, [pc, #84]	; (800fd38 <prvInsertBlockIntoFreeList+0xb0>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d00d      	beq.n	800fd06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	685a      	ldr	r2, [r3, #4]
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	441a      	add	r2, r3
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	601a      	str	r2, [r3, #0]
 800fd04:	e008      	b.n	800fd18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fd06:	4b0c      	ldr	r3, [pc, #48]	; (800fd38 <prvInsertBlockIntoFreeList+0xb0>)
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	601a      	str	r2, [r3, #0]
 800fd0e:	e003      	b.n	800fd18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fd18:	68fa      	ldr	r2, [r7, #12]
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d002      	beq.n	800fd26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd26:	bf00      	nop
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	200089a0 	.word	0x200089a0
 800fd38:	200089a8 	.word	0x200089a8

0800fd3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fd40:	2200      	movs	r2, #0
 800fd42:	4912      	ldr	r1, [pc, #72]	; (800fd8c <MX_USB_DEVICE_Init+0x50>)
 800fd44:	4812      	ldr	r0, [pc, #72]	; (800fd90 <MX_USB_DEVICE_Init+0x54>)
 800fd46:	f7fc f8f9 	bl	800bf3c <USBD_Init>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d001      	beq.n	800fd54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fd50:	f7f3 fc46 	bl	80035e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fd54:	490f      	ldr	r1, [pc, #60]	; (800fd94 <MX_USB_DEVICE_Init+0x58>)
 800fd56:	480e      	ldr	r0, [pc, #56]	; (800fd90 <MX_USB_DEVICE_Init+0x54>)
 800fd58:	f7fc f920 	bl	800bf9c <USBD_RegisterClass>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d001      	beq.n	800fd66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fd62:	f7f3 fc3d 	bl	80035e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fd66:	490c      	ldr	r1, [pc, #48]	; (800fd98 <MX_USB_DEVICE_Init+0x5c>)
 800fd68:	4809      	ldr	r0, [pc, #36]	; (800fd90 <MX_USB_DEVICE_Init+0x54>)
 800fd6a:	f7fc f841 	bl	800bdf0 <USBD_CDC_RegisterInterface>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d001      	beq.n	800fd78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fd74:	f7f3 fc34 	bl	80035e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fd78:	4805      	ldr	r0, [pc, #20]	; (800fd90 <MX_USB_DEVICE_Init+0x54>)
 800fd7a:	f7fc f936 	bl	800bfea <USBD_Start>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d001      	beq.n	800fd88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fd84:	f7f3 fc2c 	bl	80035e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fd88:	bf00      	nop
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	20000148 	.word	0x20000148
 800fd90:	20009194 	.word	0x20009194
 800fd94:	2000002c 	.word	0x2000002c
 800fd98:	20000134 	.word	0x20000134

0800fd9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fda0:	2200      	movs	r2, #0
 800fda2:	4905      	ldr	r1, [pc, #20]	; (800fdb8 <CDC_Init_FS+0x1c>)
 800fda4:	4805      	ldr	r0, [pc, #20]	; (800fdbc <CDC_Init_FS+0x20>)
 800fda6:	f7fc f838 	bl	800be1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fdaa:	4905      	ldr	r1, [pc, #20]	; (800fdc0 <CDC_Init_FS+0x24>)
 800fdac:	4803      	ldr	r0, [pc, #12]	; (800fdbc <CDC_Init_FS+0x20>)
 800fdae:	f7fc f852 	bl	800be56 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fdb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	20009c64 	.word	0x20009c64
 800fdbc:	20009194 	.word	0x20009194
 800fdc0:	20009464 	.word	0x20009464

0800fdc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fdc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fdca:	4618      	mov	r0, r3
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr

0800fdd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b083      	sub	sp, #12
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	4603      	mov	r3, r0
 800fddc:	6039      	str	r1, [r7, #0]
 800fdde:	71fb      	strb	r3, [r7, #7]
 800fde0:	4613      	mov	r3, r2
 800fde2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fde4:	79fb      	ldrb	r3, [r7, #7]
 800fde6:	2b23      	cmp	r3, #35	; 0x23
 800fde8:	d84a      	bhi.n	800fe80 <CDC_Control_FS+0xac>
 800fdea:	a201      	add	r2, pc, #4	; (adr r2, 800fdf0 <CDC_Control_FS+0x1c>)
 800fdec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf0:	0800fe81 	.word	0x0800fe81
 800fdf4:	0800fe81 	.word	0x0800fe81
 800fdf8:	0800fe81 	.word	0x0800fe81
 800fdfc:	0800fe81 	.word	0x0800fe81
 800fe00:	0800fe81 	.word	0x0800fe81
 800fe04:	0800fe81 	.word	0x0800fe81
 800fe08:	0800fe81 	.word	0x0800fe81
 800fe0c:	0800fe81 	.word	0x0800fe81
 800fe10:	0800fe81 	.word	0x0800fe81
 800fe14:	0800fe81 	.word	0x0800fe81
 800fe18:	0800fe81 	.word	0x0800fe81
 800fe1c:	0800fe81 	.word	0x0800fe81
 800fe20:	0800fe81 	.word	0x0800fe81
 800fe24:	0800fe81 	.word	0x0800fe81
 800fe28:	0800fe81 	.word	0x0800fe81
 800fe2c:	0800fe81 	.word	0x0800fe81
 800fe30:	0800fe81 	.word	0x0800fe81
 800fe34:	0800fe81 	.word	0x0800fe81
 800fe38:	0800fe81 	.word	0x0800fe81
 800fe3c:	0800fe81 	.word	0x0800fe81
 800fe40:	0800fe81 	.word	0x0800fe81
 800fe44:	0800fe81 	.word	0x0800fe81
 800fe48:	0800fe81 	.word	0x0800fe81
 800fe4c:	0800fe81 	.word	0x0800fe81
 800fe50:	0800fe81 	.word	0x0800fe81
 800fe54:	0800fe81 	.word	0x0800fe81
 800fe58:	0800fe81 	.word	0x0800fe81
 800fe5c:	0800fe81 	.word	0x0800fe81
 800fe60:	0800fe81 	.word	0x0800fe81
 800fe64:	0800fe81 	.word	0x0800fe81
 800fe68:	0800fe81 	.word	0x0800fe81
 800fe6c:	0800fe81 	.word	0x0800fe81
 800fe70:	0800fe81 	.word	0x0800fe81
 800fe74:	0800fe81 	.word	0x0800fe81
 800fe78:	0800fe81 	.word	0x0800fe81
 800fe7c:	0800fe81 	.word	0x0800fe81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fe80:	bf00      	nop
  }

  return (USBD_OK);
 800fe82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

//  Android_packet_recieved=1;
//  memcpy(usbrxdatapacket,Buf,64);
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fe9a:	6879      	ldr	r1, [r7, #4]
 800fe9c:	4815      	ldr	r0, [pc, #84]	; (800fef4 <CDC_Receive_FS+0x64>)
 800fe9e:	f7fb ffda 	bl	800be56 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fea2:	4814      	ldr	r0, [pc, #80]	; (800fef4 <CDC_Receive_FS+0x64>)
 800fea4:	f7fc f820 	bl	800bee8 <USBD_CDC_ReceivePacket>
  received_data_size = *Len;
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4a12      	ldr	r2, [pc, #72]	; (800fef8 <CDC_Receive_FS+0x68>)
 800feae:	6013      	str	r3, [r2, #0]
  if(received_data_size>=64)
 800feb0:	4b11      	ldr	r3, [pc, #68]	; (800fef8 <CDC_Receive_FS+0x68>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2b3f      	cmp	r3, #63	; 0x3f
 800feb6:	d914      	bls.n	800fee2 <CDC_Receive_FS+0x52>
  {
	 Data_Reciption=1;
 800feb8:	4b10      	ldr	r3, [pc, #64]	; (800fefc <CDC_Receive_FS+0x6c>)
 800feba:	2201      	movs	r2, #1
 800febc:	701a      	strb	r2, [r3, #0]
	 memcpy(received_data, Buf, received_data_size);
 800febe:	4b0e      	ldr	r3, [pc, #56]	; (800fef8 <CDC_Receive_FS+0x68>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	461a      	mov	r2, r3
 800fec4:	6879      	ldr	r1, [r7, #4]
 800fec6:	480e      	ldr	r0, [pc, #56]	; (800ff00 <CDC_Receive_FS+0x70>)
 800fec8:	f000 fcb2 	bl	8010830 <memcpy>
	 receive_total += received_data_size;
 800fecc:	4b0d      	ldr	r3, [pc, #52]	; (800ff04 <CDC_Receive_FS+0x74>)
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	4b09      	ldr	r3, [pc, #36]	; (800fef8 <CDC_Receive_FS+0x68>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4413      	add	r3, r2
 800fed6:	4a0b      	ldr	r2, [pc, #44]	; (800ff04 <CDC_Receive_FS+0x74>)
 800fed8:	6013      	str	r3, [r2, #0]
	 received_data_size=0;
 800feda:	4b07      	ldr	r3, [pc, #28]	; (800fef8 <CDC_Receive_FS+0x68>)
 800fedc:	2200      	movs	r2, #0
 800fede:	601a      	str	r2, [r3, #0]
 800fee0:	e002      	b.n	800fee8 <CDC_Receive_FS+0x58>
  }
  else
  {
	  received_data_size=0;
 800fee2:	4b05      	ldr	r3, [pc, #20]	; (800fef8 <CDC_Receive_FS+0x68>)
 800fee4:	2200      	movs	r2, #0
 800fee6:	601a      	str	r2, [r3, #0]
  }
  return (USBD_OK);
 800fee8:	2300      	movs	r3, #0
/*  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);*/
  /* USER CODE END 6 */
}
 800feea:	4618      	mov	r0, r3
 800feec:	3708      	adds	r7, #8
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}
 800fef2:	bf00      	nop
 800fef4:	20009194 	.word	0x20009194
 800fef8:	20008d60 	.word	0x20008d60
 800fefc:	20008c80 	.word	0x20008c80
 800ff00:	20008e64 	.word	0x20008e64
 800ff04:	20008dc8 	.word	0x20008dc8

0800ff08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	460b      	mov	r3, r1
 800ff12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ff14:	2300      	movs	r3, #0
 800ff16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ff18:	4b0d      	ldr	r3, [pc, #52]	; (800ff50 <CDC_Transmit_FS+0x48>)
 800ff1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d001      	beq.n	800ff2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e00b      	b.n	800ff46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ff2e:	887b      	ldrh	r3, [r7, #2]
 800ff30:	461a      	mov	r2, r3
 800ff32:	6879      	ldr	r1, [r7, #4]
 800ff34:	4806      	ldr	r0, [pc, #24]	; (800ff50 <CDC_Transmit_FS+0x48>)
 800ff36:	f7fb ff70 	bl	800be1a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ff3a:	4805      	ldr	r0, [pc, #20]	; (800ff50 <CDC_Transmit_FS+0x48>)
 800ff3c:	f7fb ffa4 	bl	800be88 <USBD_CDC_TransmitPacket>
 800ff40:	4603      	mov	r3, r0
 800ff42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ff44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	20009194 	.word	0x20009194

0800ff54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b087      	sub	sp, #28
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	60b9      	str	r1, [r7, #8]
 800ff5e:	4613      	mov	r3, r2
 800ff60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ff62:	2300      	movs	r3, #0
 800ff64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ff66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	371c      	adds	r7, #28
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
	...

0800ff78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	4603      	mov	r3, r0
 800ff80:	6039      	str	r1, [r7, #0]
 800ff82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	2212      	movs	r2, #18
 800ff88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ff8a:	4b03      	ldr	r3, [pc, #12]	; (800ff98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	370c      	adds	r7, #12
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr
 800ff98:	20000164 	.word	0x20000164

0800ff9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	6039      	str	r1, [r7, #0]
 800ffa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	2204      	movs	r2, #4
 800ffac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ffae:	4b03      	ldr	r3, [pc, #12]	; (800ffbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	370c      	adds	r7, #12
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr
 800ffbc:	20000178 	.word	0x20000178

0800ffc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	6039      	str	r1, [r7, #0]
 800ffca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ffcc:	79fb      	ldrb	r3, [r7, #7]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d105      	bne.n	800ffde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffd2:	683a      	ldr	r2, [r7, #0]
 800ffd4:	4907      	ldr	r1, [pc, #28]	; (800fff4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffd6:	4808      	ldr	r0, [pc, #32]	; (800fff8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ffd8:	f7fd f839 	bl	800d04e <USBD_GetString>
 800ffdc:	e004      	b.n	800ffe8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ffde:	683a      	ldr	r2, [r7, #0]
 800ffe0:	4904      	ldr	r1, [pc, #16]	; (800fff4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ffe2:	4805      	ldr	r0, [pc, #20]	; (800fff8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ffe4:	f7fd f833 	bl	800d04e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffe8:	4b02      	ldr	r3, [pc, #8]	; (800fff4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3708      	adds	r7, #8
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bd80      	pop	{r7, pc}
 800fff2:	bf00      	nop
 800fff4:	2000a464 	.word	0x2000a464
 800fff8:	0801521c 	.word	0x0801521c

0800fffc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b082      	sub	sp, #8
 8010000:	af00      	add	r7, sp, #0
 8010002:	4603      	mov	r3, r0
 8010004:	6039      	str	r1, [r7, #0]
 8010006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010008:	683a      	ldr	r2, [r7, #0]
 801000a:	4904      	ldr	r1, [pc, #16]	; (801001c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801000c:	4804      	ldr	r0, [pc, #16]	; (8010020 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801000e:	f7fd f81e 	bl	800d04e <USBD_GetString>
  return USBD_StrDesc;
 8010012:	4b02      	ldr	r3, [pc, #8]	; (801001c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010014:	4618      	mov	r0, r3
 8010016:	3708      	adds	r7, #8
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	2000a464 	.word	0x2000a464
 8010020:	08015234 	.word	0x08015234

08010024 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	4603      	mov	r3, r0
 801002c:	6039      	str	r1, [r7, #0]
 801002e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	221a      	movs	r2, #26
 8010034:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010036:	f000 f843 	bl	80100c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801003a:	4b02      	ldr	r3, [pc, #8]	; (8010044 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801003c:	4618      	mov	r0, r3
 801003e:	3708      	adds	r7, #8
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	2000017c 	.word	0x2000017c

08010048 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	4603      	mov	r3, r0
 8010050:	6039      	str	r1, [r7, #0]
 8010052:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010054:	79fb      	ldrb	r3, [r7, #7]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d105      	bne.n	8010066 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801005a:	683a      	ldr	r2, [r7, #0]
 801005c:	4907      	ldr	r1, [pc, #28]	; (801007c <USBD_FS_ConfigStrDescriptor+0x34>)
 801005e:	4808      	ldr	r0, [pc, #32]	; (8010080 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010060:	f7fc fff5 	bl	800d04e <USBD_GetString>
 8010064:	e004      	b.n	8010070 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010066:	683a      	ldr	r2, [r7, #0]
 8010068:	4904      	ldr	r1, [pc, #16]	; (801007c <USBD_FS_ConfigStrDescriptor+0x34>)
 801006a:	4805      	ldr	r0, [pc, #20]	; (8010080 <USBD_FS_ConfigStrDescriptor+0x38>)
 801006c:	f7fc ffef 	bl	800d04e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010070:	4b02      	ldr	r3, [pc, #8]	; (801007c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010072:	4618      	mov	r0, r3
 8010074:	3708      	adds	r7, #8
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	2000a464 	.word	0x2000a464
 8010080:	08015248 	.word	0x08015248

08010084 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	4603      	mov	r3, r0
 801008c:	6039      	str	r1, [r7, #0]
 801008e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010090:	79fb      	ldrb	r3, [r7, #7]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d105      	bne.n	80100a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010096:	683a      	ldr	r2, [r7, #0]
 8010098:	4907      	ldr	r1, [pc, #28]	; (80100b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801009a:	4808      	ldr	r0, [pc, #32]	; (80100bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801009c:	f7fc ffd7 	bl	800d04e <USBD_GetString>
 80100a0:	e004      	b.n	80100ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80100a2:	683a      	ldr	r2, [r7, #0]
 80100a4:	4904      	ldr	r1, [pc, #16]	; (80100b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80100a6:	4805      	ldr	r0, [pc, #20]	; (80100bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80100a8:	f7fc ffd1 	bl	800d04e <USBD_GetString>
  }
  return USBD_StrDesc;
 80100ac:	4b02      	ldr	r3, [pc, #8]	; (80100b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3708      	adds	r7, #8
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	2000a464 	.word	0x2000a464
 80100bc:	08015254 	.word	0x08015254

080100c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80100c6:	4b0f      	ldr	r3, [pc, #60]	; (8010104 <Get_SerialNum+0x44>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80100cc:	4b0e      	ldr	r3, [pc, #56]	; (8010108 <Get_SerialNum+0x48>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80100d2:	4b0e      	ldr	r3, [pc, #56]	; (801010c <Get_SerialNum+0x4c>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80100d8:	68fa      	ldr	r2, [r7, #12]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4413      	add	r3, r2
 80100de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d009      	beq.n	80100fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80100e6:	2208      	movs	r2, #8
 80100e8:	4909      	ldr	r1, [pc, #36]	; (8010110 <Get_SerialNum+0x50>)
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f000 f814 	bl	8010118 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80100f0:	2204      	movs	r2, #4
 80100f2:	4908      	ldr	r1, [pc, #32]	; (8010114 <Get_SerialNum+0x54>)
 80100f4:	68b8      	ldr	r0, [r7, #8]
 80100f6:	f000 f80f 	bl	8010118 <IntToUnicode>
  }
}
 80100fa:	bf00      	nop
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop
 8010104:	1fff7a10 	.word	0x1fff7a10
 8010108:	1fff7a14 	.word	0x1fff7a14
 801010c:	1fff7a18 	.word	0x1fff7a18
 8010110:	2000017e 	.word	0x2000017e
 8010114:	2000018e 	.word	0x2000018e

08010118 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010118:	b480      	push	{r7}
 801011a:	b087      	sub	sp, #28
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	4613      	mov	r3, r2
 8010124:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010126:	2300      	movs	r3, #0
 8010128:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801012a:	2300      	movs	r3, #0
 801012c:	75fb      	strb	r3, [r7, #23]
 801012e:	e027      	b.n	8010180 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	0f1b      	lsrs	r3, r3, #28
 8010134:	2b09      	cmp	r3, #9
 8010136:	d80b      	bhi.n	8010150 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	0f1b      	lsrs	r3, r3, #28
 801013c:	b2da      	uxtb	r2, r3
 801013e:	7dfb      	ldrb	r3, [r7, #23]
 8010140:	005b      	lsls	r3, r3, #1
 8010142:	4619      	mov	r1, r3
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	440b      	add	r3, r1
 8010148:	3230      	adds	r2, #48	; 0x30
 801014a:	b2d2      	uxtb	r2, r2
 801014c:	701a      	strb	r2, [r3, #0]
 801014e:	e00a      	b.n	8010166 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	0f1b      	lsrs	r3, r3, #28
 8010154:	b2da      	uxtb	r2, r3
 8010156:	7dfb      	ldrb	r3, [r7, #23]
 8010158:	005b      	lsls	r3, r3, #1
 801015a:	4619      	mov	r1, r3
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	440b      	add	r3, r1
 8010160:	3237      	adds	r2, #55	; 0x37
 8010162:	b2d2      	uxtb	r2, r2
 8010164:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	011b      	lsls	r3, r3, #4
 801016a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801016c:	7dfb      	ldrb	r3, [r7, #23]
 801016e:	005b      	lsls	r3, r3, #1
 8010170:	3301      	adds	r3, #1
 8010172:	68ba      	ldr	r2, [r7, #8]
 8010174:	4413      	add	r3, r2
 8010176:	2200      	movs	r2, #0
 8010178:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801017a:	7dfb      	ldrb	r3, [r7, #23]
 801017c:	3301      	adds	r3, #1
 801017e:	75fb      	strb	r3, [r7, #23]
 8010180:	7dfa      	ldrb	r2, [r7, #23]
 8010182:	79fb      	ldrb	r3, [r7, #7]
 8010184:	429a      	cmp	r2, r3
 8010186:	d3d3      	bcc.n	8010130 <IntToUnicode+0x18>
  }
}
 8010188:	bf00      	nop
 801018a:	bf00      	nop
 801018c:	371c      	adds	r7, #28
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr
	...

08010198 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b08a      	sub	sp, #40	; 0x28
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80101a0:	f107 0314 	add.w	r3, r7, #20
 80101a4:	2200      	movs	r2, #0
 80101a6:	601a      	str	r2, [r3, #0]
 80101a8:	605a      	str	r2, [r3, #4]
 80101aa:	609a      	str	r2, [r3, #8]
 80101ac:	60da      	str	r2, [r3, #12]
 80101ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80101b8:	d147      	bne.n	801024a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80101ba:	2300      	movs	r3, #0
 80101bc:	613b      	str	r3, [r7, #16]
 80101be:	4b25      	ldr	r3, [pc, #148]	; (8010254 <HAL_PCD_MspInit+0xbc>)
 80101c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101c2:	4a24      	ldr	r2, [pc, #144]	; (8010254 <HAL_PCD_MspInit+0xbc>)
 80101c4:	f043 0301 	orr.w	r3, r3, #1
 80101c8:	6313      	str	r3, [r2, #48]	; 0x30
 80101ca:	4b22      	ldr	r3, [pc, #136]	; (8010254 <HAL_PCD_MspInit+0xbc>)
 80101cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ce:	f003 0301 	and.w	r3, r3, #1
 80101d2:	613b      	str	r3, [r7, #16]
 80101d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80101d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80101dc:	2300      	movs	r3, #0
 80101de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101e0:	2300      	movs	r3, #0
 80101e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101e4:	f107 0314 	add.w	r3, r7, #20
 80101e8:	4619      	mov	r1, r3
 80101ea:	481b      	ldr	r0, [pc, #108]	; (8010258 <HAL_PCD_MspInit+0xc0>)
 80101ec:	f7f5 f946 	bl	800547c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80101f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80101f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101f6:	2302      	movs	r3, #2
 80101f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101fa:	2300      	movs	r3, #0
 80101fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101fe:	2303      	movs	r3, #3
 8010200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010202:	230a      	movs	r3, #10
 8010204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010206:	f107 0314 	add.w	r3, r7, #20
 801020a:	4619      	mov	r1, r3
 801020c:	4812      	ldr	r0, [pc, #72]	; (8010258 <HAL_PCD_MspInit+0xc0>)
 801020e:	f7f5 f935 	bl	800547c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010212:	4b10      	ldr	r3, [pc, #64]	; (8010254 <HAL_PCD_MspInit+0xbc>)
 8010214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010216:	4a0f      	ldr	r2, [pc, #60]	; (8010254 <HAL_PCD_MspInit+0xbc>)
 8010218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801021c:	6353      	str	r3, [r2, #52]	; 0x34
 801021e:	2300      	movs	r3, #0
 8010220:	60fb      	str	r3, [r7, #12]
 8010222:	4b0c      	ldr	r3, [pc, #48]	; (8010254 <HAL_PCD_MspInit+0xbc>)
 8010224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010226:	4a0b      	ldr	r2, [pc, #44]	; (8010254 <HAL_PCD_MspInit+0xbc>)
 8010228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801022c:	6453      	str	r3, [r2, #68]	; 0x44
 801022e:	4b09      	ldr	r3, [pc, #36]	; (8010254 <HAL_PCD_MspInit+0xbc>)
 8010230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010236:	60fb      	str	r3, [r7, #12]
 8010238:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801023a:	2200      	movs	r2, #0
 801023c:	2105      	movs	r1, #5
 801023e:	2043      	movs	r0, #67	; 0x43
 8010240:	f7f4 fcd6 	bl	8004bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010244:	2043      	movs	r0, #67	; 0x43
 8010246:	f7f4 fcef 	bl	8004c28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801024a:	bf00      	nop
 801024c:	3728      	adds	r7, #40	; 0x28
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	40023800 	.word	0x40023800
 8010258:	40020000 	.word	0x40020000

0801025c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010270:	4619      	mov	r1, r3
 8010272:	4610      	mov	r0, r2
 8010274:	f7fb ff04 	bl	800c080 <USBD_LL_SetupStage>
}
 8010278:	bf00      	nop
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	460b      	mov	r3, r1
 801028a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010292:	78fa      	ldrb	r2, [r7, #3]
 8010294:	6879      	ldr	r1, [r7, #4]
 8010296:	4613      	mov	r3, r2
 8010298:	00db      	lsls	r3, r3, #3
 801029a:	1a9b      	subs	r3, r3, r2
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	440b      	add	r3, r1
 80102a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80102a4:	681a      	ldr	r2, [r3, #0]
 80102a6:	78fb      	ldrb	r3, [r7, #3]
 80102a8:	4619      	mov	r1, r3
 80102aa:	f7fb ff3e 	bl	800c12a <USBD_LL_DataOutStage>
}
 80102ae:	bf00      	nop
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b082      	sub	sp, #8
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
 80102be:	460b      	mov	r3, r1
 80102c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80102c8:	78fa      	ldrb	r2, [r7, #3]
 80102ca:	6879      	ldr	r1, [r7, #4]
 80102cc:	4613      	mov	r3, r2
 80102ce:	00db      	lsls	r3, r3, #3
 80102d0:	1a9b      	subs	r3, r3, r2
 80102d2:	009b      	lsls	r3, r3, #2
 80102d4:	440b      	add	r3, r1
 80102d6:	3348      	adds	r3, #72	; 0x48
 80102d8:	681a      	ldr	r2, [r3, #0]
 80102da:	78fb      	ldrb	r3, [r7, #3]
 80102dc:	4619      	mov	r1, r3
 80102de:	f7fb ff87 	bl	800c1f0 <USBD_LL_DataInStage>
}
 80102e2:	bf00      	nop
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}

080102ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b082      	sub	sp, #8
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7fc f89b 	bl	800c434 <USBD_LL_SOF>
}
 80102fe:	bf00      	nop
 8010300:	3708      	adds	r7, #8
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}

08010306 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010306:	b580      	push	{r7, lr}
 8010308:	b084      	sub	sp, #16
 801030a:	af00      	add	r7, sp, #0
 801030c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801030e:	2301      	movs	r3, #1
 8010310:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	68db      	ldr	r3, [r3, #12]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d102      	bne.n	8010320 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801031a:	2300      	movs	r3, #0
 801031c:	73fb      	strb	r3, [r7, #15]
 801031e:	e008      	b.n	8010332 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	2b02      	cmp	r3, #2
 8010326:	d102      	bne.n	801032e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010328:	2301      	movs	r3, #1
 801032a:	73fb      	strb	r3, [r7, #15]
 801032c:	e001      	b.n	8010332 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801032e:	f7f3 f957 	bl	80035e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010338:	7bfa      	ldrb	r2, [r7, #15]
 801033a:	4611      	mov	r1, r2
 801033c:	4618      	mov	r0, r3
 801033e:	f7fc f83b 	bl	800c3b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010348:	4618      	mov	r0, r3
 801034a:	f7fb ffe7 	bl	800c31c <USBD_LL_Reset>
}
 801034e:	bf00      	nop
 8010350:	3710      	adds	r7, #16
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
	...

08010358 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b082      	sub	sp, #8
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010366:	4618      	mov	r0, r3
 8010368:	f7fc f836 	bl	800c3d8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	687a      	ldr	r2, [r7, #4]
 8010378:	6812      	ldr	r2, [r2, #0]
 801037a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801037e:	f043 0301 	orr.w	r3, r3, #1
 8010382:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6a1b      	ldr	r3, [r3, #32]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d005      	beq.n	8010398 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801038c:	4b04      	ldr	r3, [pc, #16]	; (80103a0 <HAL_PCD_SuspendCallback+0x48>)
 801038e:	691b      	ldr	r3, [r3, #16]
 8010390:	4a03      	ldr	r2, [pc, #12]	; (80103a0 <HAL_PCD_SuspendCallback+0x48>)
 8010392:	f043 0306 	orr.w	r3, r3, #6
 8010396:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010398:	bf00      	nop
 801039a:	3708      	adds	r7, #8
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	e000ed00 	.word	0xe000ed00

080103a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7fc f826 	bl	800c404 <USBD_LL_Resume>
}
 80103b8:	bf00      	nop
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	460b      	mov	r3, r1
 80103ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103d2:	78fa      	ldrb	r2, [r7, #3]
 80103d4:	4611      	mov	r1, r2
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fc f874 	bl	800c4c4 <USBD_LL_IsoOUTIncomplete>
}
 80103dc:	bf00      	nop
 80103de:	3708      	adds	r7, #8
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	460b      	mov	r3, r1
 80103ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103f6:	78fa      	ldrb	r2, [r7, #3]
 80103f8:	4611      	mov	r1, r2
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7fc f83c 	bl	800c478 <USBD_LL_IsoINIncomplete>
}
 8010400:	bf00      	nop
 8010402:	3708      	adds	r7, #8
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010416:	4618      	mov	r0, r3
 8010418:	f7fc f87a 	bl	800c510 <USBD_LL_DevConnected>
}
 801041c:	bf00      	nop
 801041e:	3708      	adds	r7, #8
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010432:	4618      	mov	r0, r3
 8010434:	f7fc f877 	bl	800c526 <USBD_LL_DevDisconnected>
}
 8010438:	bf00      	nop
 801043a:	3708      	adds	r7, #8
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}

08010440 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d13c      	bne.n	80104ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010450:	4a20      	ldr	r2, [pc, #128]	; (80104d4 <USBD_LL_Init+0x94>)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	4a1e      	ldr	r2, [pc, #120]	; (80104d4 <USBD_LL_Init+0x94>)
 801045c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010460:	4b1c      	ldr	r3, [pc, #112]	; (80104d4 <USBD_LL_Init+0x94>)
 8010462:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010466:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010468:	4b1a      	ldr	r3, [pc, #104]	; (80104d4 <USBD_LL_Init+0x94>)
 801046a:	2204      	movs	r2, #4
 801046c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801046e:	4b19      	ldr	r3, [pc, #100]	; (80104d4 <USBD_LL_Init+0x94>)
 8010470:	2202      	movs	r2, #2
 8010472:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010474:	4b17      	ldr	r3, [pc, #92]	; (80104d4 <USBD_LL_Init+0x94>)
 8010476:	2200      	movs	r2, #0
 8010478:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801047a:	4b16      	ldr	r3, [pc, #88]	; (80104d4 <USBD_LL_Init+0x94>)
 801047c:	2202      	movs	r2, #2
 801047e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010480:	4b14      	ldr	r3, [pc, #80]	; (80104d4 <USBD_LL_Init+0x94>)
 8010482:	2200      	movs	r2, #0
 8010484:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010486:	4b13      	ldr	r3, [pc, #76]	; (80104d4 <USBD_LL_Init+0x94>)
 8010488:	2200      	movs	r2, #0
 801048a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801048c:	4b11      	ldr	r3, [pc, #68]	; (80104d4 <USBD_LL_Init+0x94>)
 801048e:	2200      	movs	r2, #0
 8010490:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8010492:	4b10      	ldr	r3, [pc, #64]	; (80104d4 <USBD_LL_Init+0x94>)
 8010494:	2201      	movs	r2, #1
 8010496:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010498:	4b0e      	ldr	r3, [pc, #56]	; (80104d4 <USBD_LL_Init+0x94>)
 801049a:	2200      	movs	r2, #0
 801049c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801049e:	480d      	ldr	r0, [pc, #52]	; (80104d4 <USBD_LL_Init+0x94>)
 80104a0:	f7f6 f9a7 	bl	80067f2 <HAL_PCD_Init>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d001      	beq.n	80104ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80104aa:	f7f3 f899 	bl	80035e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80104ae:	2180      	movs	r1, #128	; 0x80
 80104b0:	4808      	ldr	r0, [pc, #32]	; (80104d4 <USBD_LL_Init+0x94>)
 80104b2:	f7f7 fb04 	bl	8007abe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80104b6:	2240      	movs	r2, #64	; 0x40
 80104b8:	2100      	movs	r1, #0
 80104ba:	4806      	ldr	r0, [pc, #24]	; (80104d4 <USBD_LL_Init+0x94>)
 80104bc:	f7f7 fab8 	bl	8007a30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80104c0:	2280      	movs	r2, #128	; 0x80
 80104c2:	2101      	movs	r1, #1
 80104c4:	4803      	ldr	r0, [pc, #12]	; (80104d4 <USBD_LL_Init+0x94>)
 80104c6:	f7f7 fab3 	bl	8007a30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80104ca:	2300      	movs	r3, #0
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3708      	adds	r7, #8
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	2000a664 	.word	0x2000a664

080104d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104e0:	2300      	movs	r3, #0
 80104e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104e4:	2300      	movs	r3, #0
 80104e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7f6 fa9c 	bl	8006a2c <HAL_PCD_Start>
 80104f4:	4603      	mov	r3, r0
 80104f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104f8:	7bfb      	ldrb	r3, [r7, #15]
 80104fa:	4618      	mov	r0, r3
 80104fc:	f000 f942 	bl	8010784 <USBD_Get_USB_Status>
 8010500:	4603      	mov	r3, r0
 8010502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010504:	7bbb      	ldrb	r3, [r7, #14]
}
 8010506:	4618      	mov	r0, r3
 8010508:	3710      	adds	r7, #16
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801050e:	b580      	push	{r7, lr}
 8010510:	b084      	sub	sp, #16
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
 8010516:	4608      	mov	r0, r1
 8010518:	4611      	mov	r1, r2
 801051a:	461a      	mov	r2, r3
 801051c:	4603      	mov	r3, r0
 801051e:	70fb      	strb	r3, [r7, #3]
 8010520:	460b      	mov	r3, r1
 8010522:	70bb      	strb	r3, [r7, #2]
 8010524:	4613      	mov	r3, r2
 8010526:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010528:	2300      	movs	r3, #0
 801052a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801052c:	2300      	movs	r3, #0
 801052e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010536:	78bb      	ldrb	r3, [r7, #2]
 8010538:	883a      	ldrh	r2, [r7, #0]
 801053a:	78f9      	ldrb	r1, [r7, #3]
 801053c:	f7f6 fe80 	bl	8007240 <HAL_PCD_EP_Open>
 8010540:	4603      	mov	r3, r0
 8010542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010544:	7bfb      	ldrb	r3, [r7, #15]
 8010546:	4618      	mov	r0, r3
 8010548:	f000 f91c 	bl	8010784 <USBD_Get_USB_Status>
 801054c:	4603      	mov	r3, r0
 801054e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010550:	7bbb      	ldrb	r3, [r7, #14]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b084      	sub	sp, #16
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
 8010562:	460b      	mov	r3, r1
 8010564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010566:	2300      	movs	r3, #0
 8010568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801056a:	2300      	movs	r3, #0
 801056c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010574:	78fa      	ldrb	r2, [r7, #3]
 8010576:	4611      	mov	r1, r2
 8010578:	4618      	mov	r0, r3
 801057a:	f7f6 fec9 	bl	8007310 <HAL_PCD_EP_Close>
 801057e:	4603      	mov	r3, r0
 8010580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010582:	7bfb      	ldrb	r3, [r7, #15]
 8010584:	4618      	mov	r0, r3
 8010586:	f000 f8fd 	bl	8010784 <USBD_Get_USB_Status>
 801058a:	4603      	mov	r3, r0
 801058c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801058e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010590:	4618      	mov	r0, r3
 8010592:	3710      	adds	r7, #16
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	460b      	mov	r3, r1
 80105a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105a4:	2300      	movs	r3, #0
 80105a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105a8:	2300      	movs	r3, #0
 80105aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80105b2:	78fa      	ldrb	r2, [r7, #3]
 80105b4:	4611      	mov	r1, r2
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7f6 ffa1 	bl	80074fe <HAL_PCD_EP_SetStall>
 80105bc:	4603      	mov	r3, r0
 80105be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105c0:	7bfb      	ldrb	r3, [r7, #15]
 80105c2:	4618      	mov	r0, r3
 80105c4:	f000 f8de 	bl	8010784 <USBD_Get_USB_Status>
 80105c8:	4603      	mov	r3, r0
 80105ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b084      	sub	sp, #16
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
 80105de:	460b      	mov	r3, r1
 80105e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105e2:	2300      	movs	r3, #0
 80105e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105e6:	2300      	movs	r3, #0
 80105e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80105f0:	78fa      	ldrb	r2, [r7, #3]
 80105f2:	4611      	mov	r1, r2
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7f6 ffe6 	bl	80075c6 <HAL_PCD_EP_ClrStall>
 80105fa:	4603      	mov	r3, r0
 80105fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105fe:	7bfb      	ldrb	r3, [r7, #15]
 8010600:	4618      	mov	r0, r3
 8010602:	f000 f8bf 	bl	8010784 <USBD_Get_USB_Status>
 8010606:	4603      	mov	r3, r0
 8010608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801060a:	7bbb      	ldrb	r3, [r7, #14]
}
 801060c:	4618      	mov	r0, r3
 801060e:	3710      	adds	r7, #16
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}

08010614 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010614:	b480      	push	{r7}
 8010616:	b085      	sub	sp, #20
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	460b      	mov	r3, r1
 801061e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010626:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010628:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801062c:	2b00      	cmp	r3, #0
 801062e:	da0b      	bge.n	8010648 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010630:	78fb      	ldrb	r3, [r7, #3]
 8010632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010636:	68f9      	ldr	r1, [r7, #12]
 8010638:	4613      	mov	r3, r2
 801063a:	00db      	lsls	r3, r3, #3
 801063c:	1a9b      	subs	r3, r3, r2
 801063e:	009b      	lsls	r3, r3, #2
 8010640:	440b      	add	r3, r1
 8010642:	333e      	adds	r3, #62	; 0x3e
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	e00b      	b.n	8010660 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010648:	78fb      	ldrb	r3, [r7, #3]
 801064a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801064e:	68f9      	ldr	r1, [r7, #12]
 8010650:	4613      	mov	r3, r2
 8010652:	00db      	lsls	r3, r3, #3
 8010654:	1a9b      	subs	r3, r3, r2
 8010656:	009b      	lsls	r3, r3, #2
 8010658:	440b      	add	r3, r1
 801065a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801065e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010660:	4618      	mov	r0, r3
 8010662:	3714      	adds	r7, #20
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b084      	sub	sp, #16
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	460b      	mov	r3, r1
 8010676:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010678:	2300      	movs	r3, #0
 801067a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801067c:	2300      	movs	r3, #0
 801067e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010686:	78fa      	ldrb	r2, [r7, #3]
 8010688:	4611      	mov	r1, r2
 801068a:	4618      	mov	r0, r3
 801068c:	f7f6 fdb3 	bl	80071f6 <HAL_PCD_SetAddress>
 8010690:	4603      	mov	r3, r0
 8010692:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010694:	7bfb      	ldrb	r3, [r7, #15]
 8010696:	4618      	mov	r0, r3
 8010698:	f000 f874 	bl	8010784 <USBD_Get_USB_Status>
 801069c:	4603      	mov	r3, r0
 801069e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3710      	adds	r7, #16
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}

080106aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80106aa:	b580      	push	{r7, lr}
 80106ac:	b086      	sub	sp, #24
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	60f8      	str	r0, [r7, #12]
 80106b2:	607a      	str	r2, [r7, #4]
 80106b4:	603b      	str	r3, [r7, #0]
 80106b6:	460b      	mov	r3, r1
 80106b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106ba:	2300      	movs	r3, #0
 80106bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106be:	2300      	movs	r3, #0
 80106c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80106c8:	7af9      	ldrb	r1, [r7, #11]
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	f7f6 fecc 	bl	800746a <HAL_PCD_EP_Transmit>
 80106d2:	4603      	mov	r3, r0
 80106d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106d6:	7dfb      	ldrb	r3, [r7, #23]
 80106d8:	4618      	mov	r0, r3
 80106da:	f000 f853 	bl	8010784 <USBD_Get_USB_Status>
 80106de:	4603      	mov	r3, r0
 80106e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80106e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3718      	adds	r7, #24
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}

080106ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b086      	sub	sp, #24
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	60f8      	str	r0, [r7, #12]
 80106f4:	607a      	str	r2, [r7, #4]
 80106f6:	603b      	str	r3, [r7, #0]
 80106f8:	460b      	mov	r3, r1
 80106fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106fc:	2300      	movs	r3, #0
 80106fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010700:	2300      	movs	r3, #0
 8010702:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801070a:	7af9      	ldrb	r1, [r7, #11]
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	f7f6 fe48 	bl	80073a4 <HAL_PCD_EP_Receive>
 8010714:	4603      	mov	r3, r0
 8010716:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010718:	7dfb      	ldrb	r3, [r7, #23]
 801071a:	4618      	mov	r0, r3
 801071c:	f000 f832 	bl	8010784 <USBD_Get_USB_Status>
 8010720:	4603      	mov	r3, r0
 8010722:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010724:	7dbb      	ldrb	r3, [r7, #22]
}
 8010726:	4618      	mov	r0, r3
 8010728:	3718      	adds	r7, #24
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}

0801072e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801072e:	b580      	push	{r7, lr}
 8010730:	b082      	sub	sp, #8
 8010732:	af00      	add	r7, sp, #0
 8010734:	6078      	str	r0, [r7, #4]
 8010736:	460b      	mov	r3, r1
 8010738:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010740:	78fa      	ldrb	r2, [r7, #3]
 8010742:	4611      	mov	r1, r2
 8010744:	4618      	mov	r0, r3
 8010746:	f7f6 fe78 	bl	800743a <HAL_PCD_EP_GetRxCount>
 801074a:	4603      	mov	r3, r0
}
 801074c:	4618      	mov	r0, r3
 801074e:	3708      	adds	r7, #8
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801075c:	4b03      	ldr	r3, [pc, #12]	; (801076c <USBD_static_malloc+0x18>)
}
 801075e:	4618      	mov	r0, r3
 8010760:	370c      	adds	r7, #12
 8010762:	46bd      	mov	sp, r7
 8010764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	200089c0 	.word	0x200089c0

08010770 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]

}
 8010778:	bf00      	nop
 801077a:	370c      	adds	r7, #12
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	4603      	mov	r3, r0
 801078c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801078e:	2300      	movs	r3, #0
 8010790:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010792:	79fb      	ldrb	r3, [r7, #7]
 8010794:	2b03      	cmp	r3, #3
 8010796:	d817      	bhi.n	80107c8 <USBD_Get_USB_Status+0x44>
 8010798:	a201      	add	r2, pc, #4	; (adr r2, 80107a0 <USBD_Get_USB_Status+0x1c>)
 801079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801079e:	bf00      	nop
 80107a0:	080107b1 	.word	0x080107b1
 80107a4:	080107b7 	.word	0x080107b7
 80107a8:	080107bd 	.word	0x080107bd
 80107ac:	080107c3 	.word	0x080107c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80107b0:	2300      	movs	r3, #0
 80107b2:	73fb      	strb	r3, [r7, #15]
    break;
 80107b4:	e00b      	b.n	80107ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80107b6:	2303      	movs	r3, #3
 80107b8:	73fb      	strb	r3, [r7, #15]
    break;
 80107ba:	e008      	b.n	80107ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80107bc:	2301      	movs	r3, #1
 80107be:	73fb      	strb	r3, [r7, #15]
    break;
 80107c0:	e005      	b.n	80107ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80107c2:	2303      	movs	r3, #3
 80107c4:	73fb      	strb	r3, [r7, #15]
    break;
 80107c6:	e002      	b.n	80107ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80107c8:	2303      	movs	r3, #3
 80107ca:	73fb      	strb	r3, [r7, #15]
    break;
 80107cc:	bf00      	nop
  }
  return usb_status;
 80107ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3714      	adds	r7, #20
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <__errno>:
 80107dc:	4b01      	ldr	r3, [pc, #4]	; (80107e4 <__errno+0x8>)
 80107de:	6818      	ldr	r0, [r3, #0]
 80107e0:	4770      	bx	lr
 80107e2:	bf00      	nop
 80107e4:	20000198 	.word	0x20000198

080107e8 <__libc_init_array>:
 80107e8:	b570      	push	{r4, r5, r6, lr}
 80107ea:	4d0d      	ldr	r5, [pc, #52]	; (8010820 <__libc_init_array+0x38>)
 80107ec:	4c0d      	ldr	r4, [pc, #52]	; (8010824 <__libc_init_array+0x3c>)
 80107ee:	1b64      	subs	r4, r4, r5
 80107f0:	10a4      	asrs	r4, r4, #2
 80107f2:	2600      	movs	r6, #0
 80107f4:	42a6      	cmp	r6, r4
 80107f6:	d109      	bne.n	801080c <__libc_init_array+0x24>
 80107f8:	4d0b      	ldr	r5, [pc, #44]	; (8010828 <__libc_init_array+0x40>)
 80107fa:	4c0c      	ldr	r4, [pc, #48]	; (801082c <__libc_init_array+0x44>)
 80107fc:	f004 fc7c 	bl	80150f8 <_init>
 8010800:	1b64      	subs	r4, r4, r5
 8010802:	10a4      	asrs	r4, r4, #2
 8010804:	2600      	movs	r6, #0
 8010806:	42a6      	cmp	r6, r4
 8010808:	d105      	bne.n	8010816 <__libc_init_array+0x2e>
 801080a:	bd70      	pop	{r4, r5, r6, pc}
 801080c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010810:	4798      	blx	r3
 8010812:	3601      	adds	r6, #1
 8010814:	e7ee      	b.n	80107f4 <__libc_init_array+0xc>
 8010816:	f855 3b04 	ldr.w	r3, [r5], #4
 801081a:	4798      	blx	r3
 801081c:	3601      	adds	r6, #1
 801081e:	e7f2      	b.n	8010806 <__libc_init_array+0x1e>
 8010820:	0801591c 	.word	0x0801591c
 8010824:	0801591c 	.word	0x0801591c
 8010828:	0801591c 	.word	0x0801591c
 801082c:	08015920 	.word	0x08015920

08010830 <memcpy>:
 8010830:	440a      	add	r2, r1
 8010832:	4291      	cmp	r1, r2
 8010834:	f100 33ff 	add.w	r3, r0, #4294967295
 8010838:	d100      	bne.n	801083c <memcpy+0xc>
 801083a:	4770      	bx	lr
 801083c:	b510      	push	{r4, lr}
 801083e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010846:	4291      	cmp	r1, r2
 8010848:	d1f9      	bne.n	801083e <memcpy+0xe>
 801084a:	bd10      	pop	{r4, pc}

0801084c <memset>:
 801084c:	4402      	add	r2, r0
 801084e:	4603      	mov	r3, r0
 8010850:	4293      	cmp	r3, r2
 8010852:	d100      	bne.n	8010856 <memset+0xa>
 8010854:	4770      	bx	lr
 8010856:	f803 1b01 	strb.w	r1, [r3], #1
 801085a:	e7f9      	b.n	8010850 <memset+0x4>

0801085c <__cvt>:
 801085c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010860:	ec55 4b10 	vmov	r4, r5, d0
 8010864:	2d00      	cmp	r5, #0
 8010866:	460e      	mov	r6, r1
 8010868:	4619      	mov	r1, r3
 801086a:	462b      	mov	r3, r5
 801086c:	bfbb      	ittet	lt
 801086e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010872:	461d      	movlt	r5, r3
 8010874:	2300      	movge	r3, #0
 8010876:	232d      	movlt	r3, #45	; 0x2d
 8010878:	700b      	strb	r3, [r1, #0]
 801087a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801087c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010880:	4691      	mov	r9, r2
 8010882:	f023 0820 	bic.w	r8, r3, #32
 8010886:	bfbc      	itt	lt
 8010888:	4622      	movlt	r2, r4
 801088a:	4614      	movlt	r4, r2
 801088c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010890:	d005      	beq.n	801089e <__cvt+0x42>
 8010892:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010896:	d100      	bne.n	801089a <__cvt+0x3e>
 8010898:	3601      	adds	r6, #1
 801089a:	2102      	movs	r1, #2
 801089c:	e000      	b.n	80108a0 <__cvt+0x44>
 801089e:	2103      	movs	r1, #3
 80108a0:	ab03      	add	r3, sp, #12
 80108a2:	9301      	str	r3, [sp, #4]
 80108a4:	ab02      	add	r3, sp, #8
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	ec45 4b10 	vmov	d0, r4, r5
 80108ac:	4653      	mov	r3, sl
 80108ae:	4632      	mov	r2, r6
 80108b0:	f001 fdea 	bl	8012488 <_dtoa_r>
 80108b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80108b8:	4607      	mov	r7, r0
 80108ba:	d102      	bne.n	80108c2 <__cvt+0x66>
 80108bc:	f019 0f01 	tst.w	r9, #1
 80108c0:	d022      	beq.n	8010908 <__cvt+0xac>
 80108c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80108c6:	eb07 0906 	add.w	r9, r7, r6
 80108ca:	d110      	bne.n	80108ee <__cvt+0x92>
 80108cc:	783b      	ldrb	r3, [r7, #0]
 80108ce:	2b30      	cmp	r3, #48	; 0x30
 80108d0:	d10a      	bne.n	80108e8 <__cvt+0x8c>
 80108d2:	2200      	movs	r2, #0
 80108d4:	2300      	movs	r3, #0
 80108d6:	4620      	mov	r0, r4
 80108d8:	4629      	mov	r1, r5
 80108da:	f7f0 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80108de:	b918      	cbnz	r0, 80108e8 <__cvt+0x8c>
 80108e0:	f1c6 0601 	rsb	r6, r6, #1
 80108e4:	f8ca 6000 	str.w	r6, [sl]
 80108e8:	f8da 3000 	ldr.w	r3, [sl]
 80108ec:	4499      	add	r9, r3
 80108ee:	2200      	movs	r2, #0
 80108f0:	2300      	movs	r3, #0
 80108f2:	4620      	mov	r0, r4
 80108f4:	4629      	mov	r1, r5
 80108f6:	f7f0 f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80108fa:	b108      	cbz	r0, 8010900 <__cvt+0xa4>
 80108fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8010900:	2230      	movs	r2, #48	; 0x30
 8010902:	9b03      	ldr	r3, [sp, #12]
 8010904:	454b      	cmp	r3, r9
 8010906:	d307      	bcc.n	8010918 <__cvt+0xbc>
 8010908:	9b03      	ldr	r3, [sp, #12]
 801090a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801090c:	1bdb      	subs	r3, r3, r7
 801090e:	4638      	mov	r0, r7
 8010910:	6013      	str	r3, [r2, #0]
 8010912:	b004      	add	sp, #16
 8010914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010918:	1c59      	adds	r1, r3, #1
 801091a:	9103      	str	r1, [sp, #12]
 801091c:	701a      	strb	r2, [r3, #0]
 801091e:	e7f0      	b.n	8010902 <__cvt+0xa6>

08010920 <__exponent>:
 8010920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010922:	4603      	mov	r3, r0
 8010924:	2900      	cmp	r1, #0
 8010926:	bfb8      	it	lt
 8010928:	4249      	neglt	r1, r1
 801092a:	f803 2b02 	strb.w	r2, [r3], #2
 801092e:	bfb4      	ite	lt
 8010930:	222d      	movlt	r2, #45	; 0x2d
 8010932:	222b      	movge	r2, #43	; 0x2b
 8010934:	2909      	cmp	r1, #9
 8010936:	7042      	strb	r2, [r0, #1]
 8010938:	dd2a      	ble.n	8010990 <__exponent+0x70>
 801093a:	f10d 0407 	add.w	r4, sp, #7
 801093e:	46a4      	mov	ip, r4
 8010940:	270a      	movs	r7, #10
 8010942:	46a6      	mov	lr, r4
 8010944:	460a      	mov	r2, r1
 8010946:	fb91 f6f7 	sdiv	r6, r1, r7
 801094a:	fb07 1516 	mls	r5, r7, r6, r1
 801094e:	3530      	adds	r5, #48	; 0x30
 8010950:	2a63      	cmp	r2, #99	; 0x63
 8010952:	f104 34ff 	add.w	r4, r4, #4294967295
 8010956:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801095a:	4631      	mov	r1, r6
 801095c:	dcf1      	bgt.n	8010942 <__exponent+0x22>
 801095e:	3130      	adds	r1, #48	; 0x30
 8010960:	f1ae 0502 	sub.w	r5, lr, #2
 8010964:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010968:	1c44      	adds	r4, r0, #1
 801096a:	4629      	mov	r1, r5
 801096c:	4561      	cmp	r1, ip
 801096e:	d30a      	bcc.n	8010986 <__exponent+0x66>
 8010970:	f10d 0209 	add.w	r2, sp, #9
 8010974:	eba2 020e 	sub.w	r2, r2, lr
 8010978:	4565      	cmp	r5, ip
 801097a:	bf88      	it	hi
 801097c:	2200      	movhi	r2, #0
 801097e:	4413      	add	r3, r2
 8010980:	1a18      	subs	r0, r3, r0
 8010982:	b003      	add	sp, #12
 8010984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010986:	f811 2b01 	ldrb.w	r2, [r1], #1
 801098a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801098e:	e7ed      	b.n	801096c <__exponent+0x4c>
 8010990:	2330      	movs	r3, #48	; 0x30
 8010992:	3130      	adds	r1, #48	; 0x30
 8010994:	7083      	strb	r3, [r0, #2]
 8010996:	70c1      	strb	r1, [r0, #3]
 8010998:	1d03      	adds	r3, r0, #4
 801099a:	e7f1      	b.n	8010980 <__exponent+0x60>

0801099c <_printf_float>:
 801099c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a0:	ed2d 8b02 	vpush	{d8}
 80109a4:	b08d      	sub	sp, #52	; 0x34
 80109a6:	460c      	mov	r4, r1
 80109a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80109ac:	4616      	mov	r6, r2
 80109ae:	461f      	mov	r7, r3
 80109b0:	4605      	mov	r5, r0
 80109b2:	f002 fec5 	bl	8013740 <_localeconv_r>
 80109b6:	f8d0 a000 	ldr.w	sl, [r0]
 80109ba:	4650      	mov	r0, sl
 80109bc:	f7ef fc08 	bl	80001d0 <strlen>
 80109c0:	2300      	movs	r3, #0
 80109c2:	930a      	str	r3, [sp, #40]	; 0x28
 80109c4:	6823      	ldr	r3, [r4, #0]
 80109c6:	9305      	str	r3, [sp, #20]
 80109c8:	f8d8 3000 	ldr.w	r3, [r8]
 80109cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80109d0:	3307      	adds	r3, #7
 80109d2:	f023 0307 	bic.w	r3, r3, #7
 80109d6:	f103 0208 	add.w	r2, r3, #8
 80109da:	f8c8 2000 	str.w	r2, [r8]
 80109de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80109e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80109ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80109ee:	9307      	str	r3, [sp, #28]
 80109f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80109f4:	ee08 0a10 	vmov	s16, r0
 80109f8:	4b9f      	ldr	r3, [pc, #636]	; (8010c78 <_printf_float+0x2dc>)
 80109fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010a02:	f7f0 f893 	bl	8000b2c <__aeabi_dcmpun>
 8010a06:	bb88      	cbnz	r0, 8010a6c <_printf_float+0xd0>
 8010a08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010a0c:	4b9a      	ldr	r3, [pc, #616]	; (8010c78 <_printf_float+0x2dc>)
 8010a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a12:	f7f0 f86d 	bl	8000af0 <__aeabi_dcmple>
 8010a16:	bb48      	cbnz	r0, 8010a6c <_printf_float+0xd0>
 8010a18:	2200      	movs	r2, #0
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	4640      	mov	r0, r8
 8010a1e:	4649      	mov	r1, r9
 8010a20:	f7f0 f85c 	bl	8000adc <__aeabi_dcmplt>
 8010a24:	b110      	cbz	r0, 8010a2c <_printf_float+0x90>
 8010a26:	232d      	movs	r3, #45	; 0x2d
 8010a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a2c:	4b93      	ldr	r3, [pc, #588]	; (8010c7c <_printf_float+0x2e0>)
 8010a2e:	4894      	ldr	r0, [pc, #592]	; (8010c80 <_printf_float+0x2e4>)
 8010a30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010a34:	bf94      	ite	ls
 8010a36:	4698      	movls	r8, r3
 8010a38:	4680      	movhi	r8, r0
 8010a3a:	2303      	movs	r3, #3
 8010a3c:	6123      	str	r3, [r4, #16]
 8010a3e:	9b05      	ldr	r3, [sp, #20]
 8010a40:	f023 0204 	bic.w	r2, r3, #4
 8010a44:	6022      	str	r2, [r4, #0]
 8010a46:	f04f 0900 	mov.w	r9, #0
 8010a4a:	9700      	str	r7, [sp, #0]
 8010a4c:	4633      	mov	r3, r6
 8010a4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010a50:	4621      	mov	r1, r4
 8010a52:	4628      	mov	r0, r5
 8010a54:	f000 f9d8 	bl	8010e08 <_printf_common>
 8010a58:	3001      	adds	r0, #1
 8010a5a:	f040 8090 	bne.w	8010b7e <_printf_float+0x1e2>
 8010a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8010a62:	b00d      	add	sp, #52	; 0x34
 8010a64:	ecbd 8b02 	vpop	{d8}
 8010a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a6c:	4642      	mov	r2, r8
 8010a6e:	464b      	mov	r3, r9
 8010a70:	4640      	mov	r0, r8
 8010a72:	4649      	mov	r1, r9
 8010a74:	f7f0 f85a 	bl	8000b2c <__aeabi_dcmpun>
 8010a78:	b140      	cbz	r0, 8010a8c <_printf_float+0xf0>
 8010a7a:	464b      	mov	r3, r9
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	bfbc      	itt	lt
 8010a80:	232d      	movlt	r3, #45	; 0x2d
 8010a82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010a86:	487f      	ldr	r0, [pc, #508]	; (8010c84 <_printf_float+0x2e8>)
 8010a88:	4b7f      	ldr	r3, [pc, #508]	; (8010c88 <_printf_float+0x2ec>)
 8010a8a:	e7d1      	b.n	8010a30 <_printf_float+0x94>
 8010a8c:	6863      	ldr	r3, [r4, #4]
 8010a8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8010a92:	9206      	str	r2, [sp, #24]
 8010a94:	1c5a      	adds	r2, r3, #1
 8010a96:	d13f      	bne.n	8010b18 <_printf_float+0x17c>
 8010a98:	2306      	movs	r3, #6
 8010a9a:	6063      	str	r3, [r4, #4]
 8010a9c:	9b05      	ldr	r3, [sp, #20]
 8010a9e:	6861      	ldr	r1, [r4, #4]
 8010aa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	9303      	str	r3, [sp, #12]
 8010aa8:	ab0a      	add	r3, sp, #40	; 0x28
 8010aaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8010aae:	ab09      	add	r3, sp, #36	; 0x24
 8010ab0:	ec49 8b10 	vmov	d0, r8, r9
 8010ab4:	9300      	str	r3, [sp, #0]
 8010ab6:	6022      	str	r2, [r4, #0]
 8010ab8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010abc:	4628      	mov	r0, r5
 8010abe:	f7ff fecd 	bl	801085c <__cvt>
 8010ac2:	9b06      	ldr	r3, [sp, #24]
 8010ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ac6:	2b47      	cmp	r3, #71	; 0x47
 8010ac8:	4680      	mov	r8, r0
 8010aca:	d108      	bne.n	8010ade <_printf_float+0x142>
 8010acc:	1cc8      	adds	r0, r1, #3
 8010ace:	db02      	blt.n	8010ad6 <_printf_float+0x13a>
 8010ad0:	6863      	ldr	r3, [r4, #4]
 8010ad2:	4299      	cmp	r1, r3
 8010ad4:	dd41      	ble.n	8010b5a <_printf_float+0x1be>
 8010ad6:	f1ab 0b02 	sub.w	fp, fp, #2
 8010ada:	fa5f fb8b 	uxtb.w	fp, fp
 8010ade:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010ae2:	d820      	bhi.n	8010b26 <_printf_float+0x18a>
 8010ae4:	3901      	subs	r1, #1
 8010ae6:	465a      	mov	r2, fp
 8010ae8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010aec:	9109      	str	r1, [sp, #36]	; 0x24
 8010aee:	f7ff ff17 	bl	8010920 <__exponent>
 8010af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010af4:	1813      	adds	r3, r2, r0
 8010af6:	2a01      	cmp	r2, #1
 8010af8:	4681      	mov	r9, r0
 8010afa:	6123      	str	r3, [r4, #16]
 8010afc:	dc02      	bgt.n	8010b04 <_printf_float+0x168>
 8010afe:	6822      	ldr	r2, [r4, #0]
 8010b00:	07d2      	lsls	r2, r2, #31
 8010b02:	d501      	bpl.n	8010b08 <_printf_float+0x16c>
 8010b04:	3301      	adds	r3, #1
 8010b06:	6123      	str	r3, [r4, #16]
 8010b08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d09c      	beq.n	8010a4a <_printf_float+0xae>
 8010b10:	232d      	movs	r3, #45	; 0x2d
 8010b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b16:	e798      	b.n	8010a4a <_printf_float+0xae>
 8010b18:	9a06      	ldr	r2, [sp, #24]
 8010b1a:	2a47      	cmp	r2, #71	; 0x47
 8010b1c:	d1be      	bne.n	8010a9c <_printf_float+0x100>
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d1bc      	bne.n	8010a9c <_printf_float+0x100>
 8010b22:	2301      	movs	r3, #1
 8010b24:	e7b9      	b.n	8010a9a <_printf_float+0xfe>
 8010b26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8010b2a:	d118      	bne.n	8010b5e <_printf_float+0x1c2>
 8010b2c:	2900      	cmp	r1, #0
 8010b2e:	6863      	ldr	r3, [r4, #4]
 8010b30:	dd0b      	ble.n	8010b4a <_printf_float+0x1ae>
 8010b32:	6121      	str	r1, [r4, #16]
 8010b34:	b913      	cbnz	r3, 8010b3c <_printf_float+0x1a0>
 8010b36:	6822      	ldr	r2, [r4, #0]
 8010b38:	07d0      	lsls	r0, r2, #31
 8010b3a:	d502      	bpl.n	8010b42 <_printf_float+0x1a6>
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	440b      	add	r3, r1
 8010b40:	6123      	str	r3, [r4, #16]
 8010b42:	65a1      	str	r1, [r4, #88]	; 0x58
 8010b44:	f04f 0900 	mov.w	r9, #0
 8010b48:	e7de      	b.n	8010b08 <_printf_float+0x16c>
 8010b4a:	b913      	cbnz	r3, 8010b52 <_printf_float+0x1b6>
 8010b4c:	6822      	ldr	r2, [r4, #0]
 8010b4e:	07d2      	lsls	r2, r2, #31
 8010b50:	d501      	bpl.n	8010b56 <_printf_float+0x1ba>
 8010b52:	3302      	adds	r3, #2
 8010b54:	e7f4      	b.n	8010b40 <_printf_float+0x1a4>
 8010b56:	2301      	movs	r3, #1
 8010b58:	e7f2      	b.n	8010b40 <_printf_float+0x1a4>
 8010b5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b60:	4299      	cmp	r1, r3
 8010b62:	db05      	blt.n	8010b70 <_printf_float+0x1d4>
 8010b64:	6823      	ldr	r3, [r4, #0]
 8010b66:	6121      	str	r1, [r4, #16]
 8010b68:	07d8      	lsls	r0, r3, #31
 8010b6a:	d5ea      	bpl.n	8010b42 <_printf_float+0x1a6>
 8010b6c:	1c4b      	adds	r3, r1, #1
 8010b6e:	e7e7      	b.n	8010b40 <_printf_float+0x1a4>
 8010b70:	2900      	cmp	r1, #0
 8010b72:	bfd4      	ite	le
 8010b74:	f1c1 0202 	rsble	r2, r1, #2
 8010b78:	2201      	movgt	r2, #1
 8010b7a:	4413      	add	r3, r2
 8010b7c:	e7e0      	b.n	8010b40 <_printf_float+0x1a4>
 8010b7e:	6823      	ldr	r3, [r4, #0]
 8010b80:	055a      	lsls	r2, r3, #21
 8010b82:	d407      	bmi.n	8010b94 <_printf_float+0x1f8>
 8010b84:	6923      	ldr	r3, [r4, #16]
 8010b86:	4642      	mov	r2, r8
 8010b88:	4631      	mov	r1, r6
 8010b8a:	4628      	mov	r0, r5
 8010b8c:	47b8      	blx	r7
 8010b8e:	3001      	adds	r0, #1
 8010b90:	d12c      	bne.n	8010bec <_printf_float+0x250>
 8010b92:	e764      	b.n	8010a5e <_printf_float+0xc2>
 8010b94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010b98:	f240 80e0 	bls.w	8010d5c <_printf_float+0x3c0>
 8010b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	f7ef ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ba8:	2800      	cmp	r0, #0
 8010baa:	d034      	beq.n	8010c16 <_printf_float+0x27a>
 8010bac:	4a37      	ldr	r2, [pc, #220]	; (8010c8c <_printf_float+0x2f0>)
 8010bae:	2301      	movs	r3, #1
 8010bb0:	4631      	mov	r1, r6
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	47b8      	blx	r7
 8010bb6:	3001      	adds	r0, #1
 8010bb8:	f43f af51 	beq.w	8010a5e <_printf_float+0xc2>
 8010bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	db02      	blt.n	8010bca <_printf_float+0x22e>
 8010bc4:	6823      	ldr	r3, [r4, #0]
 8010bc6:	07d8      	lsls	r0, r3, #31
 8010bc8:	d510      	bpl.n	8010bec <_printf_float+0x250>
 8010bca:	ee18 3a10 	vmov	r3, s16
 8010bce:	4652      	mov	r2, sl
 8010bd0:	4631      	mov	r1, r6
 8010bd2:	4628      	mov	r0, r5
 8010bd4:	47b8      	blx	r7
 8010bd6:	3001      	adds	r0, #1
 8010bd8:	f43f af41 	beq.w	8010a5e <_printf_float+0xc2>
 8010bdc:	f04f 0800 	mov.w	r8, #0
 8010be0:	f104 091a 	add.w	r9, r4, #26
 8010be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010be6:	3b01      	subs	r3, #1
 8010be8:	4543      	cmp	r3, r8
 8010bea:	dc09      	bgt.n	8010c00 <_printf_float+0x264>
 8010bec:	6823      	ldr	r3, [r4, #0]
 8010bee:	079b      	lsls	r3, r3, #30
 8010bf0:	f100 8105 	bmi.w	8010dfe <_printf_float+0x462>
 8010bf4:	68e0      	ldr	r0, [r4, #12]
 8010bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bf8:	4298      	cmp	r0, r3
 8010bfa:	bfb8      	it	lt
 8010bfc:	4618      	movlt	r0, r3
 8010bfe:	e730      	b.n	8010a62 <_printf_float+0xc6>
 8010c00:	2301      	movs	r3, #1
 8010c02:	464a      	mov	r2, r9
 8010c04:	4631      	mov	r1, r6
 8010c06:	4628      	mov	r0, r5
 8010c08:	47b8      	blx	r7
 8010c0a:	3001      	adds	r0, #1
 8010c0c:	f43f af27 	beq.w	8010a5e <_printf_float+0xc2>
 8010c10:	f108 0801 	add.w	r8, r8, #1
 8010c14:	e7e6      	b.n	8010be4 <_printf_float+0x248>
 8010c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	dc39      	bgt.n	8010c90 <_printf_float+0x2f4>
 8010c1c:	4a1b      	ldr	r2, [pc, #108]	; (8010c8c <_printf_float+0x2f0>)
 8010c1e:	2301      	movs	r3, #1
 8010c20:	4631      	mov	r1, r6
 8010c22:	4628      	mov	r0, r5
 8010c24:	47b8      	blx	r7
 8010c26:	3001      	adds	r0, #1
 8010c28:	f43f af19 	beq.w	8010a5e <_printf_float+0xc2>
 8010c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c30:	4313      	orrs	r3, r2
 8010c32:	d102      	bne.n	8010c3a <_printf_float+0x29e>
 8010c34:	6823      	ldr	r3, [r4, #0]
 8010c36:	07d9      	lsls	r1, r3, #31
 8010c38:	d5d8      	bpl.n	8010bec <_printf_float+0x250>
 8010c3a:	ee18 3a10 	vmov	r3, s16
 8010c3e:	4652      	mov	r2, sl
 8010c40:	4631      	mov	r1, r6
 8010c42:	4628      	mov	r0, r5
 8010c44:	47b8      	blx	r7
 8010c46:	3001      	adds	r0, #1
 8010c48:	f43f af09 	beq.w	8010a5e <_printf_float+0xc2>
 8010c4c:	f04f 0900 	mov.w	r9, #0
 8010c50:	f104 0a1a 	add.w	sl, r4, #26
 8010c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c56:	425b      	negs	r3, r3
 8010c58:	454b      	cmp	r3, r9
 8010c5a:	dc01      	bgt.n	8010c60 <_printf_float+0x2c4>
 8010c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c5e:	e792      	b.n	8010b86 <_printf_float+0x1ea>
 8010c60:	2301      	movs	r3, #1
 8010c62:	4652      	mov	r2, sl
 8010c64:	4631      	mov	r1, r6
 8010c66:	4628      	mov	r0, r5
 8010c68:	47b8      	blx	r7
 8010c6a:	3001      	adds	r0, #1
 8010c6c:	f43f aef7 	beq.w	8010a5e <_printf_float+0xc2>
 8010c70:	f109 0901 	add.w	r9, r9, #1
 8010c74:	e7ee      	b.n	8010c54 <_printf_float+0x2b8>
 8010c76:	bf00      	nop
 8010c78:	7fefffff 	.word	0x7fefffff
 8010c7c:	08015460 	.word	0x08015460
 8010c80:	08015464 	.word	0x08015464
 8010c84:	0801546c 	.word	0x0801546c
 8010c88:	08015468 	.word	0x08015468
 8010c8c:	08015470 	.word	0x08015470
 8010c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010c94:	429a      	cmp	r2, r3
 8010c96:	bfa8      	it	ge
 8010c98:	461a      	movge	r2, r3
 8010c9a:	2a00      	cmp	r2, #0
 8010c9c:	4691      	mov	r9, r2
 8010c9e:	dc37      	bgt.n	8010d10 <_printf_float+0x374>
 8010ca0:	f04f 0b00 	mov.w	fp, #0
 8010ca4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ca8:	f104 021a 	add.w	r2, r4, #26
 8010cac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010cae:	9305      	str	r3, [sp, #20]
 8010cb0:	eba3 0309 	sub.w	r3, r3, r9
 8010cb4:	455b      	cmp	r3, fp
 8010cb6:	dc33      	bgt.n	8010d20 <_printf_float+0x384>
 8010cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	db3b      	blt.n	8010d38 <_printf_float+0x39c>
 8010cc0:	6823      	ldr	r3, [r4, #0]
 8010cc2:	07da      	lsls	r2, r3, #31
 8010cc4:	d438      	bmi.n	8010d38 <_printf_float+0x39c>
 8010cc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010cc8:	9b05      	ldr	r3, [sp, #20]
 8010cca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ccc:	1ad3      	subs	r3, r2, r3
 8010cce:	eba2 0901 	sub.w	r9, r2, r1
 8010cd2:	4599      	cmp	r9, r3
 8010cd4:	bfa8      	it	ge
 8010cd6:	4699      	movge	r9, r3
 8010cd8:	f1b9 0f00 	cmp.w	r9, #0
 8010cdc:	dc35      	bgt.n	8010d4a <_printf_float+0x3ae>
 8010cde:	f04f 0800 	mov.w	r8, #0
 8010ce2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ce6:	f104 0a1a 	add.w	sl, r4, #26
 8010cea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010cee:	1a9b      	subs	r3, r3, r2
 8010cf0:	eba3 0309 	sub.w	r3, r3, r9
 8010cf4:	4543      	cmp	r3, r8
 8010cf6:	f77f af79 	ble.w	8010bec <_printf_float+0x250>
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	4652      	mov	r2, sl
 8010cfe:	4631      	mov	r1, r6
 8010d00:	4628      	mov	r0, r5
 8010d02:	47b8      	blx	r7
 8010d04:	3001      	adds	r0, #1
 8010d06:	f43f aeaa 	beq.w	8010a5e <_printf_float+0xc2>
 8010d0a:	f108 0801 	add.w	r8, r8, #1
 8010d0e:	e7ec      	b.n	8010cea <_printf_float+0x34e>
 8010d10:	4613      	mov	r3, r2
 8010d12:	4631      	mov	r1, r6
 8010d14:	4642      	mov	r2, r8
 8010d16:	4628      	mov	r0, r5
 8010d18:	47b8      	blx	r7
 8010d1a:	3001      	adds	r0, #1
 8010d1c:	d1c0      	bne.n	8010ca0 <_printf_float+0x304>
 8010d1e:	e69e      	b.n	8010a5e <_printf_float+0xc2>
 8010d20:	2301      	movs	r3, #1
 8010d22:	4631      	mov	r1, r6
 8010d24:	4628      	mov	r0, r5
 8010d26:	9205      	str	r2, [sp, #20]
 8010d28:	47b8      	blx	r7
 8010d2a:	3001      	adds	r0, #1
 8010d2c:	f43f ae97 	beq.w	8010a5e <_printf_float+0xc2>
 8010d30:	9a05      	ldr	r2, [sp, #20]
 8010d32:	f10b 0b01 	add.w	fp, fp, #1
 8010d36:	e7b9      	b.n	8010cac <_printf_float+0x310>
 8010d38:	ee18 3a10 	vmov	r3, s16
 8010d3c:	4652      	mov	r2, sl
 8010d3e:	4631      	mov	r1, r6
 8010d40:	4628      	mov	r0, r5
 8010d42:	47b8      	blx	r7
 8010d44:	3001      	adds	r0, #1
 8010d46:	d1be      	bne.n	8010cc6 <_printf_float+0x32a>
 8010d48:	e689      	b.n	8010a5e <_printf_float+0xc2>
 8010d4a:	9a05      	ldr	r2, [sp, #20]
 8010d4c:	464b      	mov	r3, r9
 8010d4e:	4442      	add	r2, r8
 8010d50:	4631      	mov	r1, r6
 8010d52:	4628      	mov	r0, r5
 8010d54:	47b8      	blx	r7
 8010d56:	3001      	adds	r0, #1
 8010d58:	d1c1      	bne.n	8010cde <_printf_float+0x342>
 8010d5a:	e680      	b.n	8010a5e <_printf_float+0xc2>
 8010d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d5e:	2a01      	cmp	r2, #1
 8010d60:	dc01      	bgt.n	8010d66 <_printf_float+0x3ca>
 8010d62:	07db      	lsls	r3, r3, #31
 8010d64:	d538      	bpl.n	8010dd8 <_printf_float+0x43c>
 8010d66:	2301      	movs	r3, #1
 8010d68:	4642      	mov	r2, r8
 8010d6a:	4631      	mov	r1, r6
 8010d6c:	4628      	mov	r0, r5
 8010d6e:	47b8      	blx	r7
 8010d70:	3001      	adds	r0, #1
 8010d72:	f43f ae74 	beq.w	8010a5e <_printf_float+0xc2>
 8010d76:	ee18 3a10 	vmov	r3, s16
 8010d7a:	4652      	mov	r2, sl
 8010d7c:	4631      	mov	r1, r6
 8010d7e:	4628      	mov	r0, r5
 8010d80:	47b8      	blx	r7
 8010d82:	3001      	adds	r0, #1
 8010d84:	f43f ae6b 	beq.w	8010a5e <_printf_float+0xc2>
 8010d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	2300      	movs	r3, #0
 8010d90:	f7ef fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010d94:	b9d8      	cbnz	r0, 8010dce <_printf_float+0x432>
 8010d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d98:	f108 0201 	add.w	r2, r8, #1
 8010d9c:	3b01      	subs	r3, #1
 8010d9e:	4631      	mov	r1, r6
 8010da0:	4628      	mov	r0, r5
 8010da2:	47b8      	blx	r7
 8010da4:	3001      	adds	r0, #1
 8010da6:	d10e      	bne.n	8010dc6 <_printf_float+0x42a>
 8010da8:	e659      	b.n	8010a5e <_printf_float+0xc2>
 8010daa:	2301      	movs	r3, #1
 8010dac:	4652      	mov	r2, sl
 8010dae:	4631      	mov	r1, r6
 8010db0:	4628      	mov	r0, r5
 8010db2:	47b8      	blx	r7
 8010db4:	3001      	adds	r0, #1
 8010db6:	f43f ae52 	beq.w	8010a5e <_printf_float+0xc2>
 8010dba:	f108 0801 	add.w	r8, r8, #1
 8010dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dc0:	3b01      	subs	r3, #1
 8010dc2:	4543      	cmp	r3, r8
 8010dc4:	dcf1      	bgt.n	8010daa <_printf_float+0x40e>
 8010dc6:	464b      	mov	r3, r9
 8010dc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010dcc:	e6dc      	b.n	8010b88 <_printf_float+0x1ec>
 8010dce:	f04f 0800 	mov.w	r8, #0
 8010dd2:	f104 0a1a 	add.w	sl, r4, #26
 8010dd6:	e7f2      	b.n	8010dbe <_printf_float+0x422>
 8010dd8:	2301      	movs	r3, #1
 8010dda:	4642      	mov	r2, r8
 8010ddc:	e7df      	b.n	8010d9e <_printf_float+0x402>
 8010dde:	2301      	movs	r3, #1
 8010de0:	464a      	mov	r2, r9
 8010de2:	4631      	mov	r1, r6
 8010de4:	4628      	mov	r0, r5
 8010de6:	47b8      	blx	r7
 8010de8:	3001      	adds	r0, #1
 8010dea:	f43f ae38 	beq.w	8010a5e <_printf_float+0xc2>
 8010dee:	f108 0801 	add.w	r8, r8, #1
 8010df2:	68e3      	ldr	r3, [r4, #12]
 8010df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010df6:	1a5b      	subs	r3, r3, r1
 8010df8:	4543      	cmp	r3, r8
 8010dfa:	dcf0      	bgt.n	8010dde <_printf_float+0x442>
 8010dfc:	e6fa      	b.n	8010bf4 <_printf_float+0x258>
 8010dfe:	f04f 0800 	mov.w	r8, #0
 8010e02:	f104 0919 	add.w	r9, r4, #25
 8010e06:	e7f4      	b.n	8010df2 <_printf_float+0x456>

08010e08 <_printf_common>:
 8010e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e0c:	4616      	mov	r6, r2
 8010e0e:	4699      	mov	r9, r3
 8010e10:	688a      	ldr	r2, [r1, #8]
 8010e12:	690b      	ldr	r3, [r1, #16]
 8010e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	bfb8      	it	lt
 8010e1c:	4613      	movlt	r3, r2
 8010e1e:	6033      	str	r3, [r6, #0]
 8010e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e24:	4607      	mov	r7, r0
 8010e26:	460c      	mov	r4, r1
 8010e28:	b10a      	cbz	r2, 8010e2e <_printf_common+0x26>
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	6033      	str	r3, [r6, #0]
 8010e2e:	6823      	ldr	r3, [r4, #0]
 8010e30:	0699      	lsls	r1, r3, #26
 8010e32:	bf42      	ittt	mi
 8010e34:	6833      	ldrmi	r3, [r6, #0]
 8010e36:	3302      	addmi	r3, #2
 8010e38:	6033      	strmi	r3, [r6, #0]
 8010e3a:	6825      	ldr	r5, [r4, #0]
 8010e3c:	f015 0506 	ands.w	r5, r5, #6
 8010e40:	d106      	bne.n	8010e50 <_printf_common+0x48>
 8010e42:	f104 0a19 	add.w	sl, r4, #25
 8010e46:	68e3      	ldr	r3, [r4, #12]
 8010e48:	6832      	ldr	r2, [r6, #0]
 8010e4a:	1a9b      	subs	r3, r3, r2
 8010e4c:	42ab      	cmp	r3, r5
 8010e4e:	dc26      	bgt.n	8010e9e <_printf_common+0x96>
 8010e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e54:	1e13      	subs	r3, r2, #0
 8010e56:	6822      	ldr	r2, [r4, #0]
 8010e58:	bf18      	it	ne
 8010e5a:	2301      	movne	r3, #1
 8010e5c:	0692      	lsls	r2, r2, #26
 8010e5e:	d42b      	bmi.n	8010eb8 <_printf_common+0xb0>
 8010e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e64:	4649      	mov	r1, r9
 8010e66:	4638      	mov	r0, r7
 8010e68:	47c0      	blx	r8
 8010e6a:	3001      	adds	r0, #1
 8010e6c:	d01e      	beq.n	8010eac <_printf_common+0xa4>
 8010e6e:	6823      	ldr	r3, [r4, #0]
 8010e70:	68e5      	ldr	r5, [r4, #12]
 8010e72:	6832      	ldr	r2, [r6, #0]
 8010e74:	f003 0306 	and.w	r3, r3, #6
 8010e78:	2b04      	cmp	r3, #4
 8010e7a:	bf08      	it	eq
 8010e7c:	1aad      	subeq	r5, r5, r2
 8010e7e:	68a3      	ldr	r3, [r4, #8]
 8010e80:	6922      	ldr	r2, [r4, #16]
 8010e82:	bf0c      	ite	eq
 8010e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010e88:	2500      	movne	r5, #0
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	bfc4      	itt	gt
 8010e8e:	1a9b      	subgt	r3, r3, r2
 8010e90:	18ed      	addgt	r5, r5, r3
 8010e92:	2600      	movs	r6, #0
 8010e94:	341a      	adds	r4, #26
 8010e96:	42b5      	cmp	r5, r6
 8010e98:	d11a      	bne.n	8010ed0 <_printf_common+0xc8>
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	e008      	b.n	8010eb0 <_printf_common+0xa8>
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	4652      	mov	r2, sl
 8010ea2:	4649      	mov	r1, r9
 8010ea4:	4638      	mov	r0, r7
 8010ea6:	47c0      	blx	r8
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	d103      	bne.n	8010eb4 <_printf_common+0xac>
 8010eac:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eb4:	3501      	adds	r5, #1
 8010eb6:	e7c6      	b.n	8010e46 <_printf_common+0x3e>
 8010eb8:	18e1      	adds	r1, r4, r3
 8010eba:	1c5a      	adds	r2, r3, #1
 8010ebc:	2030      	movs	r0, #48	; 0x30
 8010ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ec2:	4422      	add	r2, r4
 8010ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010ecc:	3302      	adds	r3, #2
 8010ece:	e7c7      	b.n	8010e60 <_printf_common+0x58>
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	4622      	mov	r2, r4
 8010ed4:	4649      	mov	r1, r9
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	47c0      	blx	r8
 8010eda:	3001      	adds	r0, #1
 8010edc:	d0e6      	beq.n	8010eac <_printf_common+0xa4>
 8010ede:	3601      	adds	r6, #1
 8010ee0:	e7d9      	b.n	8010e96 <_printf_common+0x8e>
	...

08010ee4 <_printf_i>:
 8010ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ee8:	460c      	mov	r4, r1
 8010eea:	4691      	mov	r9, r2
 8010eec:	7e27      	ldrb	r7, [r4, #24]
 8010eee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010ef0:	2f78      	cmp	r7, #120	; 0x78
 8010ef2:	4680      	mov	r8, r0
 8010ef4:	469a      	mov	sl, r3
 8010ef6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010efa:	d807      	bhi.n	8010f0c <_printf_i+0x28>
 8010efc:	2f62      	cmp	r7, #98	; 0x62
 8010efe:	d80a      	bhi.n	8010f16 <_printf_i+0x32>
 8010f00:	2f00      	cmp	r7, #0
 8010f02:	f000 80d8 	beq.w	80110b6 <_printf_i+0x1d2>
 8010f06:	2f58      	cmp	r7, #88	; 0x58
 8010f08:	f000 80a3 	beq.w	8011052 <_printf_i+0x16e>
 8010f0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f14:	e03a      	b.n	8010f8c <_printf_i+0xa8>
 8010f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f1a:	2b15      	cmp	r3, #21
 8010f1c:	d8f6      	bhi.n	8010f0c <_printf_i+0x28>
 8010f1e:	a001      	add	r0, pc, #4	; (adr r0, 8010f24 <_printf_i+0x40>)
 8010f20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010f24:	08010f7d 	.word	0x08010f7d
 8010f28:	08010f91 	.word	0x08010f91
 8010f2c:	08010f0d 	.word	0x08010f0d
 8010f30:	08010f0d 	.word	0x08010f0d
 8010f34:	08010f0d 	.word	0x08010f0d
 8010f38:	08010f0d 	.word	0x08010f0d
 8010f3c:	08010f91 	.word	0x08010f91
 8010f40:	08010f0d 	.word	0x08010f0d
 8010f44:	08010f0d 	.word	0x08010f0d
 8010f48:	08010f0d 	.word	0x08010f0d
 8010f4c:	08010f0d 	.word	0x08010f0d
 8010f50:	0801109d 	.word	0x0801109d
 8010f54:	08010fc1 	.word	0x08010fc1
 8010f58:	0801107f 	.word	0x0801107f
 8010f5c:	08010f0d 	.word	0x08010f0d
 8010f60:	08010f0d 	.word	0x08010f0d
 8010f64:	080110bf 	.word	0x080110bf
 8010f68:	08010f0d 	.word	0x08010f0d
 8010f6c:	08010fc1 	.word	0x08010fc1
 8010f70:	08010f0d 	.word	0x08010f0d
 8010f74:	08010f0d 	.word	0x08010f0d
 8010f78:	08011087 	.word	0x08011087
 8010f7c:	680b      	ldr	r3, [r1, #0]
 8010f7e:	1d1a      	adds	r2, r3, #4
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	600a      	str	r2, [r1, #0]
 8010f84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e0a3      	b.n	80110d8 <_printf_i+0x1f4>
 8010f90:	6825      	ldr	r5, [r4, #0]
 8010f92:	6808      	ldr	r0, [r1, #0]
 8010f94:	062e      	lsls	r6, r5, #24
 8010f96:	f100 0304 	add.w	r3, r0, #4
 8010f9a:	d50a      	bpl.n	8010fb2 <_printf_i+0xce>
 8010f9c:	6805      	ldr	r5, [r0, #0]
 8010f9e:	600b      	str	r3, [r1, #0]
 8010fa0:	2d00      	cmp	r5, #0
 8010fa2:	da03      	bge.n	8010fac <_printf_i+0xc8>
 8010fa4:	232d      	movs	r3, #45	; 0x2d
 8010fa6:	426d      	negs	r5, r5
 8010fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fac:	485e      	ldr	r0, [pc, #376]	; (8011128 <_printf_i+0x244>)
 8010fae:	230a      	movs	r3, #10
 8010fb0:	e019      	b.n	8010fe6 <_printf_i+0x102>
 8010fb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010fb6:	6805      	ldr	r5, [r0, #0]
 8010fb8:	600b      	str	r3, [r1, #0]
 8010fba:	bf18      	it	ne
 8010fbc:	b22d      	sxthne	r5, r5
 8010fbe:	e7ef      	b.n	8010fa0 <_printf_i+0xbc>
 8010fc0:	680b      	ldr	r3, [r1, #0]
 8010fc2:	6825      	ldr	r5, [r4, #0]
 8010fc4:	1d18      	adds	r0, r3, #4
 8010fc6:	6008      	str	r0, [r1, #0]
 8010fc8:	0628      	lsls	r0, r5, #24
 8010fca:	d501      	bpl.n	8010fd0 <_printf_i+0xec>
 8010fcc:	681d      	ldr	r5, [r3, #0]
 8010fce:	e002      	b.n	8010fd6 <_printf_i+0xf2>
 8010fd0:	0669      	lsls	r1, r5, #25
 8010fd2:	d5fb      	bpl.n	8010fcc <_printf_i+0xe8>
 8010fd4:	881d      	ldrh	r5, [r3, #0]
 8010fd6:	4854      	ldr	r0, [pc, #336]	; (8011128 <_printf_i+0x244>)
 8010fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8010fda:	bf0c      	ite	eq
 8010fdc:	2308      	moveq	r3, #8
 8010fde:	230a      	movne	r3, #10
 8010fe0:	2100      	movs	r1, #0
 8010fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010fe6:	6866      	ldr	r6, [r4, #4]
 8010fe8:	60a6      	str	r6, [r4, #8]
 8010fea:	2e00      	cmp	r6, #0
 8010fec:	bfa2      	ittt	ge
 8010fee:	6821      	ldrge	r1, [r4, #0]
 8010ff0:	f021 0104 	bicge.w	r1, r1, #4
 8010ff4:	6021      	strge	r1, [r4, #0]
 8010ff6:	b90d      	cbnz	r5, 8010ffc <_printf_i+0x118>
 8010ff8:	2e00      	cmp	r6, #0
 8010ffa:	d04d      	beq.n	8011098 <_printf_i+0x1b4>
 8010ffc:	4616      	mov	r6, r2
 8010ffe:	fbb5 f1f3 	udiv	r1, r5, r3
 8011002:	fb03 5711 	mls	r7, r3, r1, r5
 8011006:	5dc7      	ldrb	r7, [r0, r7]
 8011008:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801100c:	462f      	mov	r7, r5
 801100e:	42bb      	cmp	r3, r7
 8011010:	460d      	mov	r5, r1
 8011012:	d9f4      	bls.n	8010ffe <_printf_i+0x11a>
 8011014:	2b08      	cmp	r3, #8
 8011016:	d10b      	bne.n	8011030 <_printf_i+0x14c>
 8011018:	6823      	ldr	r3, [r4, #0]
 801101a:	07df      	lsls	r7, r3, #31
 801101c:	d508      	bpl.n	8011030 <_printf_i+0x14c>
 801101e:	6923      	ldr	r3, [r4, #16]
 8011020:	6861      	ldr	r1, [r4, #4]
 8011022:	4299      	cmp	r1, r3
 8011024:	bfde      	ittt	le
 8011026:	2330      	movle	r3, #48	; 0x30
 8011028:	f806 3c01 	strble.w	r3, [r6, #-1]
 801102c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011030:	1b92      	subs	r2, r2, r6
 8011032:	6122      	str	r2, [r4, #16]
 8011034:	f8cd a000 	str.w	sl, [sp]
 8011038:	464b      	mov	r3, r9
 801103a:	aa03      	add	r2, sp, #12
 801103c:	4621      	mov	r1, r4
 801103e:	4640      	mov	r0, r8
 8011040:	f7ff fee2 	bl	8010e08 <_printf_common>
 8011044:	3001      	adds	r0, #1
 8011046:	d14c      	bne.n	80110e2 <_printf_i+0x1fe>
 8011048:	f04f 30ff 	mov.w	r0, #4294967295
 801104c:	b004      	add	sp, #16
 801104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011052:	4835      	ldr	r0, [pc, #212]	; (8011128 <_printf_i+0x244>)
 8011054:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011058:	6823      	ldr	r3, [r4, #0]
 801105a:	680e      	ldr	r6, [r1, #0]
 801105c:	061f      	lsls	r7, r3, #24
 801105e:	f856 5b04 	ldr.w	r5, [r6], #4
 8011062:	600e      	str	r6, [r1, #0]
 8011064:	d514      	bpl.n	8011090 <_printf_i+0x1ac>
 8011066:	07d9      	lsls	r1, r3, #31
 8011068:	bf44      	itt	mi
 801106a:	f043 0320 	orrmi.w	r3, r3, #32
 801106e:	6023      	strmi	r3, [r4, #0]
 8011070:	b91d      	cbnz	r5, 801107a <_printf_i+0x196>
 8011072:	6823      	ldr	r3, [r4, #0]
 8011074:	f023 0320 	bic.w	r3, r3, #32
 8011078:	6023      	str	r3, [r4, #0]
 801107a:	2310      	movs	r3, #16
 801107c:	e7b0      	b.n	8010fe0 <_printf_i+0xfc>
 801107e:	6823      	ldr	r3, [r4, #0]
 8011080:	f043 0320 	orr.w	r3, r3, #32
 8011084:	6023      	str	r3, [r4, #0]
 8011086:	2378      	movs	r3, #120	; 0x78
 8011088:	4828      	ldr	r0, [pc, #160]	; (801112c <_printf_i+0x248>)
 801108a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801108e:	e7e3      	b.n	8011058 <_printf_i+0x174>
 8011090:	065e      	lsls	r6, r3, #25
 8011092:	bf48      	it	mi
 8011094:	b2ad      	uxthmi	r5, r5
 8011096:	e7e6      	b.n	8011066 <_printf_i+0x182>
 8011098:	4616      	mov	r6, r2
 801109a:	e7bb      	b.n	8011014 <_printf_i+0x130>
 801109c:	680b      	ldr	r3, [r1, #0]
 801109e:	6826      	ldr	r6, [r4, #0]
 80110a0:	6960      	ldr	r0, [r4, #20]
 80110a2:	1d1d      	adds	r5, r3, #4
 80110a4:	600d      	str	r5, [r1, #0]
 80110a6:	0635      	lsls	r5, r6, #24
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	d501      	bpl.n	80110b0 <_printf_i+0x1cc>
 80110ac:	6018      	str	r0, [r3, #0]
 80110ae:	e002      	b.n	80110b6 <_printf_i+0x1d2>
 80110b0:	0671      	lsls	r1, r6, #25
 80110b2:	d5fb      	bpl.n	80110ac <_printf_i+0x1c8>
 80110b4:	8018      	strh	r0, [r3, #0]
 80110b6:	2300      	movs	r3, #0
 80110b8:	6123      	str	r3, [r4, #16]
 80110ba:	4616      	mov	r6, r2
 80110bc:	e7ba      	b.n	8011034 <_printf_i+0x150>
 80110be:	680b      	ldr	r3, [r1, #0]
 80110c0:	1d1a      	adds	r2, r3, #4
 80110c2:	600a      	str	r2, [r1, #0]
 80110c4:	681e      	ldr	r6, [r3, #0]
 80110c6:	6862      	ldr	r2, [r4, #4]
 80110c8:	2100      	movs	r1, #0
 80110ca:	4630      	mov	r0, r6
 80110cc:	f7ef f888 	bl	80001e0 <memchr>
 80110d0:	b108      	cbz	r0, 80110d6 <_printf_i+0x1f2>
 80110d2:	1b80      	subs	r0, r0, r6
 80110d4:	6060      	str	r0, [r4, #4]
 80110d6:	6863      	ldr	r3, [r4, #4]
 80110d8:	6123      	str	r3, [r4, #16]
 80110da:	2300      	movs	r3, #0
 80110dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80110e0:	e7a8      	b.n	8011034 <_printf_i+0x150>
 80110e2:	6923      	ldr	r3, [r4, #16]
 80110e4:	4632      	mov	r2, r6
 80110e6:	4649      	mov	r1, r9
 80110e8:	4640      	mov	r0, r8
 80110ea:	47d0      	blx	sl
 80110ec:	3001      	adds	r0, #1
 80110ee:	d0ab      	beq.n	8011048 <_printf_i+0x164>
 80110f0:	6823      	ldr	r3, [r4, #0]
 80110f2:	079b      	lsls	r3, r3, #30
 80110f4:	d413      	bmi.n	801111e <_printf_i+0x23a>
 80110f6:	68e0      	ldr	r0, [r4, #12]
 80110f8:	9b03      	ldr	r3, [sp, #12]
 80110fa:	4298      	cmp	r0, r3
 80110fc:	bfb8      	it	lt
 80110fe:	4618      	movlt	r0, r3
 8011100:	e7a4      	b.n	801104c <_printf_i+0x168>
 8011102:	2301      	movs	r3, #1
 8011104:	4632      	mov	r2, r6
 8011106:	4649      	mov	r1, r9
 8011108:	4640      	mov	r0, r8
 801110a:	47d0      	blx	sl
 801110c:	3001      	adds	r0, #1
 801110e:	d09b      	beq.n	8011048 <_printf_i+0x164>
 8011110:	3501      	adds	r5, #1
 8011112:	68e3      	ldr	r3, [r4, #12]
 8011114:	9903      	ldr	r1, [sp, #12]
 8011116:	1a5b      	subs	r3, r3, r1
 8011118:	42ab      	cmp	r3, r5
 801111a:	dcf2      	bgt.n	8011102 <_printf_i+0x21e>
 801111c:	e7eb      	b.n	80110f6 <_printf_i+0x212>
 801111e:	2500      	movs	r5, #0
 8011120:	f104 0619 	add.w	r6, r4, #25
 8011124:	e7f5      	b.n	8011112 <_printf_i+0x22e>
 8011126:	bf00      	nop
 8011128:	08015472 	.word	0x08015472
 801112c:	08015483 	.word	0x08015483

08011130 <_scanf_float>:
 8011130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011134:	b087      	sub	sp, #28
 8011136:	4617      	mov	r7, r2
 8011138:	9303      	str	r3, [sp, #12]
 801113a:	688b      	ldr	r3, [r1, #8]
 801113c:	1e5a      	subs	r2, r3, #1
 801113e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011142:	bf83      	ittte	hi
 8011144:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011148:	195b      	addhi	r3, r3, r5
 801114a:	9302      	strhi	r3, [sp, #8]
 801114c:	2300      	movls	r3, #0
 801114e:	bf86      	itte	hi
 8011150:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011154:	608b      	strhi	r3, [r1, #8]
 8011156:	9302      	strls	r3, [sp, #8]
 8011158:	680b      	ldr	r3, [r1, #0]
 801115a:	468b      	mov	fp, r1
 801115c:	2500      	movs	r5, #0
 801115e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011162:	f84b 3b1c 	str.w	r3, [fp], #28
 8011166:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801116a:	4680      	mov	r8, r0
 801116c:	460c      	mov	r4, r1
 801116e:	465e      	mov	r6, fp
 8011170:	46aa      	mov	sl, r5
 8011172:	46a9      	mov	r9, r5
 8011174:	9501      	str	r5, [sp, #4]
 8011176:	68a2      	ldr	r2, [r4, #8]
 8011178:	b152      	cbz	r2, 8011190 <_scanf_float+0x60>
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	781b      	ldrb	r3, [r3, #0]
 801117e:	2b4e      	cmp	r3, #78	; 0x4e
 8011180:	d864      	bhi.n	801124c <_scanf_float+0x11c>
 8011182:	2b40      	cmp	r3, #64	; 0x40
 8011184:	d83c      	bhi.n	8011200 <_scanf_float+0xd0>
 8011186:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801118a:	b2c8      	uxtb	r0, r1
 801118c:	280e      	cmp	r0, #14
 801118e:	d93a      	bls.n	8011206 <_scanf_float+0xd6>
 8011190:	f1b9 0f00 	cmp.w	r9, #0
 8011194:	d003      	beq.n	801119e <_scanf_float+0x6e>
 8011196:	6823      	ldr	r3, [r4, #0]
 8011198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80111a2:	f1ba 0f01 	cmp.w	sl, #1
 80111a6:	f200 8113 	bhi.w	80113d0 <_scanf_float+0x2a0>
 80111aa:	455e      	cmp	r6, fp
 80111ac:	f200 8105 	bhi.w	80113ba <_scanf_float+0x28a>
 80111b0:	2501      	movs	r5, #1
 80111b2:	4628      	mov	r0, r5
 80111b4:	b007      	add	sp, #28
 80111b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80111be:	2a0d      	cmp	r2, #13
 80111c0:	d8e6      	bhi.n	8011190 <_scanf_float+0x60>
 80111c2:	a101      	add	r1, pc, #4	; (adr r1, 80111c8 <_scanf_float+0x98>)
 80111c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80111c8:	08011307 	.word	0x08011307
 80111cc:	08011191 	.word	0x08011191
 80111d0:	08011191 	.word	0x08011191
 80111d4:	08011191 	.word	0x08011191
 80111d8:	08011367 	.word	0x08011367
 80111dc:	0801133f 	.word	0x0801133f
 80111e0:	08011191 	.word	0x08011191
 80111e4:	08011191 	.word	0x08011191
 80111e8:	08011315 	.word	0x08011315
 80111ec:	08011191 	.word	0x08011191
 80111f0:	08011191 	.word	0x08011191
 80111f4:	08011191 	.word	0x08011191
 80111f8:	08011191 	.word	0x08011191
 80111fc:	080112cd 	.word	0x080112cd
 8011200:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011204:	e7db      	b.n	80111be <_scanf_float+0x8e>
 8011206:	290e      	cmp	r1, #14
 8011208:	d8c2      	bhi.n	8011190 <_scanf_float+0x60>
 801120a:	a001      	add	r0, pc, #4	; (adr r0, 8011210 <_scanf_float+0xe0>)
 801120c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011210:	080112bf 	.word	0x080112bf
 8011214:	08011191 	.word	0x08011191
 8011218:	080112bf 	.word	0x080112bf
 801121c:	08011353 	.word	0x08011353
 8011220:	08011191 	.word	0x08011191
 8011224:	0801126d 	.word	0x0801126d
 8011228:	080112a9 	.word	0x080112a9
 801122c:	080112a9 	.word	0x080112a9
 8011230:	080112a9 	.word	0x080112a9
 8011234:	080112a9 	.word	0x080112a9
 8011238:	080112a9 	.word	0x080112a9
 801123c:	080112a9 	.word	0x080112a9
 8011240:	080112a9 	.word	0x080112a9
 8011244:	080112a9 	.word	0x080112a9
 8011248:	080112a9 	.word	0x080112a9
 801124c:	2b6e      	cmp	r3, #110	; 0x6e
 801124e:	d809      	bhi.n	8011264 <_scanf_float+0x134>
 8011250:	2b60      	cmp	r3, #96	; 0x60
 8011252:	d8b2      	bhi.n	80111ba <_scanf_float+0x8a>
 8011254:	2b54      	cmp	r3, #84	; 0x54
 8011256:	d077      	beq.n	8011348 <_scanf_float+0x218>
 8011258:	2b59      	cmp	r3, #89	; 0x59
 801125a:	d199      	bne.n	8011190 <_scanf_float+0x60>
 801125c:	2d07      	cmp	r5, #7
 801125e:	d197      	bne.n	8011190 <_scanf_float+0x60>
 8011260:	2508      	movs	r5, #8
 8011262:	e029      	b.n	80112b8 <_scanf_float+0x188>
 8011264:	2b74      	cmp	r3, #116	; 0x74
 8011266:	d06f      	beq.n	8011348 <_scanf_float+0x218>
 8011268:	2b79      	cmp	r3, #121	; 0x79
 801126a:	e7f6      	b.n	801125a <_scanf_float+0x12a>
 801126c:	6821      	ldr	r1, [r4, #0]
 801126e:	05c8      	lsls	r0, r1, #23
 8011270:	d51a      	bpl.n	80112a8 <_scanf_float+0x178>
 8011272:	9b02      	ldr	r3, [sp, #8]
 8011274:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011278:	6021      	str	r1, [r4, #0]
 801127a:	f109 0901 	add.w	r9, r9, #1
 801127e:	b11b      	cbz	r3, 8011288 <_scanf_float+0x158>
 8011280:	3b01      	subs	r3, #1
 8011282:	3201      	adds	r2, #1
 8011284:	9302      	str	r3, [sp, #8]
 8011286:	60a2      	str	r2, [r4, #8]
 8011288:	68a3      	ldr	r3, [r4, #8]
 801128a:	3b01      	subs	r3, #1
 801128c:	60a3      	str	r3, [r4, #8]
 801128e:	6923      	ldr	r3, [r4, #16]
 8011290:	3301      	adds	r3, #1
 8011292:	6123      	str	r3, [r4, #16]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	3b01      	subs	r3, #1
 8011298:	2b00      	cmp	r3, #0
 801129a:	607b      	str	r3, [r7, #4]
 801129c:	f340 8084 	ble.w	80113a8 <_scanf_float+0x278>
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	3301      	adds	r3, #1
 80112a4:	603b      	str	r3, [r7, #0]
 80112a6:	e766      	b.n	8011176 <_scanf_float+0x46>
 80112a8:	eb1a 0f05 	cmn.w	sl, r5
 80112ac:	f47f af70 	bne.w	8011190 <_scanf_float+0x60>
 80112b0:	6822      	ldr	r2, [r4, #0]
 80112b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80112b6:	6022      	str	r2, [r4, #0]
 80112b8:	f806 3b01 	strb.w	r3, [r6], #1
 80112bc:	e7e4      	b.n	8011288 <_scanf_float+0x158>
 80112be:	6822      	ldr	r2, [r4, #0]
 80112c0:	0610      	lsls	r0, r2, #24
 80112c2:	f57f af65 	bpl.w	8011190 <_scanf_float+0x60>
 80112c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80112ca:	e7f4      	b.n	80112b6 <_scanf_float+0x186>
 80112cc:	f1ba 0f00 	cmp.w	sl, #0
 80112d0:	d10e      	bne.n	80112f0 <_scanf_float+0x1c0>
 80112d2:	f1b9 0f00 	cmp.w	r9, #0
 80112d6:	d10e      	bne.n	80112f6 <_scanf_float+0x1c6>
 80112d8:	6822      	ldr	r2, [r4, #0]
 80112da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80112de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80112e2:	d108      	bne.n	80112f6 <_scanf_float+0x1c6>
 80112e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80112e8:	6022      	str	r2, [r4, #0]
 80112ea:	f04f 0a01 	mov.w	sl, #1
 80112ee:	e7e3      	b.n	80112b8 <_scanf_float+0x188>
 80112f0:	f1ba 0f02 	cmp.w	sl, #2
 80112f4:	d055      	beq.n	80113a2 <_scanf_float+0x272>
 80112f6:	2d01      	cmp	r5, #1
 80112f8:	d002      	beq.n	8011300 <_scanf_float+0x1d0>
 80112fa:	2d04      	cmp	r5, #4
 80112fc:	f47f af48 	bne.w	8011190 <_scanf_float+0x60>
 8011300:	3501      	adds	r5, #1
 8011302:	b2ed      	uxtb	r5, r5
 8011304:	e7d8      	b.n	80112b8 <_scanf_float+0x188>
 8011306:	f1ba 0f01 	cmp.w	sl, #1
 801130a:	f47f af41 	bne.w	8011190 <_scanf_float+0x60>
 801130e:	f04f 0a02 	mov.w	sl, #2
 8011312:	e7d1      	b.n	80112b8 <_scanf_float+0x188>
 8011314:	b97d      	cbnz	r5, 8011336 <_scanf_float+0x206>
 8011316:	f1b9 0f00 	cmp.w	r9, #0
 801131a:	f47f af3c 	bne.w	8011196 <_scanf_float+0x66>
 801131e:	6822      	ldr	r2, [r4, #0]
 8011320:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011324:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011328:	f47f af39 	bne.w	801119e <_scanf_float+0x6e>
 801132c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011330:	6022      	str	r2, [r4, #0]
 8011332:	2501      	movs	r5, #1
 8011334:	e7c0      	b.n	80112b8 <_scanf_float+0x188>
 8011336:	2d03      	cmp	r5, #3
 8011338:	d0e2      	beq.n	8011300 <_scanf_float+0x1d0>
 801133a:	2d05      	cmp	r5, #5
 801133c:	e7de      	b.n	80112fc <_scanf_float+0x1cc>
 801133e:	2d02      	cmp	r5, #2
 8011340:	f47f af26 	bne.w	8011190 <_scanf_float+0x60>
 8011344:	2503      	movs	r5, #3
 8011346:	e7b7      	b.n	80112b8 <_scanf_float+0x188>
 8011348:	2d06      	cmp	r5, #6
 801134a:	f47f af21 	bne.w	8011190 <_scanf_float+0x60>
 801134e:	2507      	movs	r5, #7
 8011350:	e7b2      	b.n	80112b8 <_scanf_float+0x188>
 8011352:	6822      	ldr	r2, [r4, #0]
 8011354:	0591      	lsls	r1, r2, #22
 8011356:	f57f af1b 	bpl.w	8011190 <_scanf_float+0x60>
 801135a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801135e:	6022      	str	r2, [r4, #0]
 8011360:	f8cd 9004 	str.w	r9, [sp, #4]
 8011364:	e7a8      	b.n	80112b8 <_scanf_float+0x188>
 8011366:	6822      	ldr	r2, [r4, #0]
 8011368:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801136c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011370:	d006      	beq.n	8011380 <_scanf_float+0x250>
 8011372:	0550      	lsls	r0, r2, #21
 8011374:	f57f af0c 	bpl.w	8011190 <_scanf_float+0x60>
 8011378:	f1b9 0f00 	cmp.w	r9, #0
 801137c:	f43f af0f 	beq.w	801119e <_scanf_float+0x6e>
 8011380:	0591      	lsls	r1, r2, #22
 8011382:	bf58      	it	pl
 8011384:	9901      	ldrpl	r1, [sp, #4]
 8011386:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801138a:	bf58      	it	pl
 801138c:	eba9 0101 	subpl.w	r1, r9, r1
 8011390:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8011394:	bf58      	it	pl
 8011396:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801139a:	6022      	str	r2, [r4, #0]
 801139c:	f04f 0900 	mov.w	r9, #0
 80113a0:	e78a      	b.n	80112b8 <_scanf_float+0x188>
 80113a2:	f04f 0a03 	mov.w	sl, #3
 80113a6:	e787      	b.n	80112b8 <_scanf_float+0x188>
 80113a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80113ac:	4639      	mov	r1, r7
 80113ae:	4640      	mov	r0, r8
 80113b0:	4798      	blx	r3
 80113b2:	2800      	cmp	r0, #0
 80113b4:	f43f aedf 	beq.w	8011176 <_scanf_float+0x46>
 80113b8:	e6ea      	b.n	8011190 <_scanf_float+0x60>
 80113ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80113c2:	463a      	mov	r2, r7
 80113c4:	4640      	mov	r0, r8
 80113c6:	4798      	blx	r3
 80113c8:	6923      	ldr	r3, [r4, #16]
 80113ca:	3b01      	subs	r3, #1
 80113cc:	6123      	str	r3, [r4, #16]
 80113ce:	e6ec      	b.n	80111aa <_scanf_float+0x7a>
 80113d0:	1e6b      	subs	r3, r5, #1
 80113d2:	2b06      	cmp	r3, #6
 80113d4:	d825      	bhi.n	8011422 <_scanf_float+0x2f2>
 80113d6:	2d02      	cmp	r5, #2
 80113d8:	d836      	bhi.n	8011448 <_scanf_float+0x318>
 80113da:	455e      	cmp	r6, fp
 80113dc:	f67f aee8 	bls.w	80111b0 <_scanf_float+0x80>
 80113e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80113e8:	463a      	mov	r2, r7
 80113ea:	4640      	mov	r0, r8
 80113ec:	4798      	blx	r3
 80113ee:	6923      	ldr	r3, [r4, #16]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	6123      	str	r3, [r4, #16]
 80113f4:	e7f1      	b.n	80113da <_scanf_float+0x2aa>
 80113f6:	9802      	ldr	r0, [sp, #8]
 80113f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80113fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011400:	9002      	str	r0, [sp, #8]
 8011402:	463a      	mov	r2, r7
 8011404:	4640      	mov	r0, r8
 8011406:	4798      	blx	r3
 8011408:	6923      	ldr	r3, [r4, #16]
 801140a:	3b01      	subs	r3, #1
 801140c:	6123      	str	r3, [r4, #16]
 801140e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011412:	fa5f fa8a 	uxtb.w	sl, sl
 8011416:	f1ba 0f02 	cmp.w	sl, #2
 801141a:	d1ec      	bne.n	80113f6 <_scanf_float+0x2c6>
 801141c:	3d03      	subs	r5, #3
 801141e:	b2ed      	uxtb	r5, r5
 8011420:	1b76      	subs	r6, r6, r5
 8011422:	6823      	ldr	r3, [r4, #0]
 8011424:	05da      	lsls	r2, r3, #23
 8011426:	d52f      	bpl.n	8011488 <_scanf_float+0x358>
 8011428:	055b      	lsls	r3, r3, #21
 801142a:	d510      	bpl.n	801144e <_scanf_float+0x31e>
 801142c:	455e      	cmp	r6, fp
 801142e:	f67f aebf 	bls.w	80111b0 <_scanf_float+0x80>
 8011432:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011436:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801143a:	463a      	mov	r2, r7
 801143c:	4640      	mov	r0, r8
 801143e:	4798      	blx	r3
 8011440:	6923      	ldr	r3, [r4, #16]
 8011442:	3b01      	subs	r3, #1
 8011444:	6123      	str	r3, [r4, #16]
 8011446:	e7f1      	b.n	801142c <_scanf_float+0x2fc>
 8011448:	46aa      	mov	sl, r5
 801144a:	9602      	str	r6, [sp, #8]
 801144c:	e7df      	b.n	801140e <_scanf_float+0x2de>
 801144e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011452:	6923      	ldr	r3, [r4, #16]
 8011454:	2965      	cmp	r1, #101	; 0x65
 8011456:	f103 33ff 	add.w	r3, r3, #4294967295
 801145a:	f106 35ff 	add.w	r5, r6, #4294967295
 801145e:	6123      	str	r3, [r4, #16]
 8011460:	d00c      	beq.n	801147c <_scanf_float+0x34c>
 8011462:	2945      	cmp	r1, #69	; 0x45
 8011464:	d00a      	beq.n	801147c <_scanf_float+0x34c>
 8011466:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801146a:	463a      	mov	r2, r7
 801146c:	4640      	mov	r0, r8
 801146e:	4798      	blx	r3
 8011470:	6923      	ldr	r3, [r4, #16]
 8011472:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011476:	3b01      	subs	r3, #1
 8011478:	1eb5      	subs	r5, r6, #2
 801147a:	6123      	str	r3, [r4, #16]
 801147c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011480:	463a      	mov	r2, r7
 8011482:	4640      	mov	r0, r8
 8011484:	4798      	blx	r3
 8011486:	462e      	mov	r6, r5
 8011488:	6825      	ldr	r5, [r4, #0]
 801148a:	f015 0510 	ands.w	r5, r5, #16
 801148e:	d158      	bne.n	8011542 <_scanf_float+0x412>
 8011490:	7035      	strb	r5, [r6, #0]
 8011492:	6823      	ldr	r3, [r4, #0]
 8011494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801149c:	d11c      	bne.n	80114d8 <_scanf_float+0x3a8>
 801149e:	9b01      	ldr	r3, [sp, #4]
 80114a0:	454b      	cmp	r3, r9
 80114a2:	eba3 0209 	sub.w	r2, r3, r9
 80114a6:	d124      	bne.n	80114f2 <_scanf_float+0x3c2>
 80114a8:	2200      	movs	r2, #0
 80114aa:	4659      	mov	r1, fp
 80114ac:	4640      	mov	r0, r8
 80114ae:	f000 fed1 	bl	8012254 <_strtod_r>
 80114b2:	9b03      	ldr	r3, [sp, #12]
 80114b4:	6821      	ldr	r1, [r4, #0]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	f011 0f02 	tst.w	r1, #2
 80114bc:	ec57 6b10 	vmov	r6, r7, d0
 80114c0:	f103 0204 	add.w	r2, r3, #4
 80114c4:	d020      	beq.n	8011508 <_scanf_float+0x3d8>
 80114c6:	9903      	ldr	r1, [sp, #12]
 80114c8:	600a      	str	r2, [r1, #0]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	e9c3 6700 	strd	r6, r7, [r3]
 80114d0:	68e3      	ldr	r3, [r4, #12]
 80114d2:	3301      	adds	r3, #1
 80114d4:	60e3      	str	r3, [r4, #12]
 80114d6:	e66c      	b.n	80111b2 <_scanf_float+0x82>
 80114d8:	9b04      	ldr	r3, [sp, #16]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d0e4      	beq.n	80114a8 <_scanf_float+0x378>
 80114de:	9905      	ldr	r1, [sp, #20]
 80114e0:	230a      	movs	r3, #10
 80114e2:	462a      	mov	r2, r5
 80114e4:	3101      	adds	r1, #1
 80114e6:	4640      	mov	r0, r8
 80114e8:	f000 ff3e 	bl	8012368 <_strtol_r>
 80114ec:	9b04      	ldr	r3, [sp, #16]
 80114ee:	9e05      	ldr	r6, [sp, #20]
 80114f0:	1ac2      	subs	r2, r0, r3
 80114f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80114f6:	429e      	cmp	r6, r3
 80114f8:	bf28      	it	cs
 80114fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80114fe:	4912      	ldr	r1, [pc, #72]	; (8011548 <_scanf_float+0x418>)
 8011500:	4630      	mov	r0, r6
 8011502:	f000 f85f 	bl	80115c4 <siprintf>
 8011506:	e7cf      	b.n	80114a8 <_scanf_float+0x378>
 8011508:	f011 0f04 	tst.w	r1, #4
 801150c:	9903      	ldr	r1, [sp, #12]
 801150e:	600a      	str	r2, [r1, #0]
 8011510:	d1db      	bne.n	80114ca <_scanf_float+0x39a>
 8011512:	f8d3 8000 	ldr.w	r8, [r3]
 8011516:	ee10 2a10 	vmov	r2, s0
 801151a:	ee10 0a10 	vmov	r0, s0
 801151e:	463b      	mov	r3, r7
 8011520:	4639      	mov	r1, r7
 8011522:	f7ef fb03 	bl	8000b2c <__aeabi_dcmpun>
 8011526:	b128      	cbz	r0, 8011534 <_scanf_float+0x404>
 8011528:	4808      	ldr	r0, [pc, #32]	; (801154c <_scanf_float+0x41c>)
 801152a:	f000 f811 	bl	8011550 <nanf>
 801152e:	ed88 0a00 	vstr	s0, [r8]
 8011532:	e7cd      	b.n	80114d0 <_scanf_float+0x3a0>
 8011534:	4630      	mov	r0, r6
 8011536:	4639      	mov	r1, r7
 8011538:	f7ef fb56 	bl	8000be8 <__aeabi_d2f>
 801153c:	f8c8 0000 	str.w	r0, [r8]
 8011540:	e7c6      	b.n	80114d0 <_scanf_float+0x3a0>
 8011542:	2500      	movs	r5, #0
 8011544:	e635      	b.n	80111b2 <_scanf_float+0x82>
 8011546:	bf00      	nop
 8011548:	08015494 	.word	0x08015494
 801154c:	080158b0 	.word	0x080158b0

08011550 <nanf>:
 8011550:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011558 <nanf+0x8>
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop
 8011558:	7fc00000 	.word	0x7fc00000

0801155c <sniprintf>:
 801155c:	b40c      	push	{r2, r3}
 801155e:	b530      	push	{r4, r5, lr}
 8011560:	4b17      	ldr	r3, [pc, #92]	; (80115c0 <sniprintf+0x64>)
 8011562:	1e0c      	subs	r4, r1, #0
 8011564:	681d      	ldr	r5, [r3, #0]
 8011566:	b09d      	sub	sp, #116	; 0x74
 8011568:	da08      	bge.n	801157c <sniprintf+0x20>
 801156a:	238b      	movs	r3, #139	; 0x8b
 801156c:	602b      	str	r3, [r5, #0]
 801156e:	f04f 30ff 	mov.w	r0, #4294967295
 8011572:	b01d      	add	sp, #116	; 0x74
 8011574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011578:	b002      	add	sp, #8
 801157a:	4770      	bx	lr
 801157c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011580:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011584:	bf14      	ite	ne
 8011586:	f104 33ff 	addne.w	r3, r4, #4294967295
 801158a:	4623      	moveq	r3, r4
 801158c:	9304      	str	r3, [sp, #16]
 801158e:	9307      	str	r3, [sp, #28]
 8011590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011594:	9002      	str	r0, [sp, #8]
 8011596:	9006      	str	r0, [sp, #24]
 8011598:	f8ad 3016 	strh.w	r3, [sp, #22]
 801159c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801159e:	ab21      	add	r3, sp, #132	; 0x84
 80115a0:	a902      	add	r1, sp, #8
 80115a2:	4628      	mov	r0, r5
 80115a4:	9301      	str	r3, [sp, #4]
 80115a6:	f002 feb9 	bl	801431c <_svfiprintf_r>
 80115aa:	1c43      	adds	r3, r0, #1
 80115ac:	bfbc      	itt	lt
 80115ae:	238b      	movlt	r3, #139	; 0x8b
 80115b0:	602b      	strlt	r3, [r5, #0]
 80115b2:	2c00      	cmp	r4, #0
 80115b4:	d0dd      	beq.n	8011572 <sniprintf+0x16>
 80115b6:	9b02      	ldr	r3, [sp, #8]
 80115b8:	2200      	movs	r2, #0
 80115ba:	701a      	strb	r2, [r3, #0]
 80115bc:	e7d9      	b.n	8011572 <sniprintf+0x16>
 80115be:	bf00      	nop
 80115c0:	20000198 	.word	0x20000198

080115c4 <siprintf>:
 80115c4:	b40e      	push	{r1, r2, r3}
 80115c6:	b500      	push	{lr}
 80115c8:	b09c      	sub	sp, #112	; 0x70
 80115ca:	ab1d      	add	r3, sp, #116	; 0x74
 80115cc:	9002      	str	r0, [sp, #8]
 80115ce:	9006      	str	r0, [sp, #24]
 80115d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80115d4:	4809      	ldr	r0, [pc, #36]	; (80115fc <siprintf+0x38>)
 80115d6:	9107      	str	r1, [sp, #28]
 80115d8:	9104      	str	r1, [sp, #16]
 80115da:	4909      	ldr	r1, [pc, #36]	; (8011600 <siprintf+0x3c>)
 80115dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80115e0:	9105      	str	r1, [sp, #20]
 80115e2:	6800      	ldr	r0, [r0, #0]
 80115e4:	9301      	str	r3, [sp, #4]
 80115e6:	a902      	add	r1, sp, #8
 80115e8:	f002 fe98 	bl	801431c <_svfiprintf_r>
 80115ec:	9b02      	ldr	r3, [sp, #8]
 80115ee:	2200      	movs	r2, #0
 80115f0:	701a      	strb	r2, [r3, #0]
 80115f2:	b01c      	add	sp, #112	; 0x70
 80115f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80115f8:	b003      	add	sp, #12
 80115fa:	4770      	bx	lr
 80115fc:	20000198 	.word	0x20000198
 8011600:	ffff0208 	.word	0xffff0208

08011604 <sulp>:
 8011604:	b570      	push	{r4, r5, r6, lr}
 8011606:	4604      	mov	r4, r0
 8011608:	460d      	mov	r5, r1
 801160a:	ec45 4b10 	vmov	d0, r4, r5
 801160e:	4616      	mov	r6, r2
 8011610:	f002 fc20 	bl	8013e54 <__ulp>
 8011614:	ec51 0b10 	vmov	r0, r1, d0
 8011618:	b17e      	cbz	r6, 801163a <sulp+0x36>
 801161a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801161e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011622:	2b00      	cmp	r3, #0
 8011624:	dd09      	ble.n	801163a <sulp+0x36>
 8011626:	051b      	lsls	r3, r3, #20
 8011628:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801162c:	2400      	movs	r4, #0
 801162e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011632:	4622      	mov	r2, r4
 8011634:	462b      	mov	r3, r5
 8011636:	f7ee ffdf 	bl	80005f8 <__aeabi_dmul>
 801163a:	bd70      	pop	{r4, r5, r6, pc}
 801163c:	0000      	movs	r0, r0
	...

08011640 <_strtod_l>:
 8011640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011644:	b0a3      	sub	sp, #140	; 0x8c
 8011646:	461f      	mov	r7, r3
 8011648:	2300      	movs	r3, #0
 801164a:	931e      	str	r3, [sp, #120]	; 0x78
 801164c:	4ba4      	ldr	r3, [pc, #656]	; (80118e0 <_strtod_l+0x2a0>)
 801164e:	9219      	str	r2, [sp, #100]	; 0x64
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	9307      	str	r3, [sp, #28]
 8011654:	4604      	mov	r4, r0
 8011656:	4618      	mov	r0, r3
 8011658:	4688      	mov	r8, r1
 801165a:	f7ee fdb9 	bl	80001d0 <strlen>
 801165e:	f04f 0a00 	mov.w	sl, #0
 8011662:	4605      	mov	r5, r0
 8011664:	f04f 0b00 	mov.w	fp, #0
 8011668:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801166c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801166e:	781a      	ldrb	r2, [r3, #0]
 8011670:	2a2b      	cmp	r2, #43	; 0x2b
 8011672:	d04c      	beq.n	801170e <_strtod_l+0xce>
 8011674:	d839      	bhi.n	80116ea <_strtod_l+0xaa>
 8011676:	2a0d      	cmp	r2, #13
 8011678:	d832      	bhi.n	80116e0 <_strtod_l+0xa0>
 801167a:	2a08      	cmp	r2, #8
 801167c:	d832      	bhi.n	80116e4 <_strtod_l+0xa4>
 801167e:	2a00      	cmp	r2, #0
 8011680:	d03c      	beq.n	80116fc <_strtod_l+0xbc>
 8011682:	2300      	movs	r3, #0
 8011684:	930e      	str	r3, [sp, #56]	; 0x38
 8011686:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011688:	7833      	ldrb	r3, [r6, #0]
 801168a:	2b30      	cmp	r3, #48	; 0x30
 801168c:	f040 80b4 	bne.w	80117f8 <_strtod_l+0x1b8>
 8011690:	7873      	ldrb	r3, [r6, #1]
 8011692:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011696:	2b58      	cmp	r3, #88	; 0x58
 8011698:	d16c      	bne.n	8011774 <_strtod_l+0x134>
 801169a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801169c:	9301      	str	r3, [sp, #4]
 801169e:	ab1e      	add	r3, sp, #120	; 0x78
 80116a0:	9702      	str	r7, [sp, #8]
 80116a2:	9300      	str	r3, [sp, #0]
 80116a4:	4a8f      	ldr	r2, [pc, #572]	; (80118e4 <_strtod_l+0x2a4>)
 80116a6:	ab1f      	add	r3, sp, #124	; 0x7c
 80116a8:	a91d      	add	r1, sp, #116	; 0x74
 80116aa:	4620      	mov	r0, r4
 80116ac:	f001 fd40 	bl	8013130 <__gethex>
 80116b0:	f010 0707 	ands.w	r7, r0, #7
 80116b4:	4605      	mov	r5, r0
 80116b6:	d005      	beq.n	80116c4 <_strtod_l+0x84>
 80116b8:	2f06      	cmp	r7, #6
 80116ba:	d12a      	bne.n	8011712 <_strtod_l+0xd2>
 80116bc:	3601      	adds	r6, #1
 80116be:	2300      	movs	r3, #0
 80116c0:	961d      	str	r6, [sp, #116]	; 0x74
 80116c2:	930e      	str	r3, [sp, #56]	; 0x38
 80116c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f040 8596 	bne.w	80121f8 <_strtod_l+0xbb8>
 80116cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116ce:	b1db      	cbz	r3, 8011708 <_strtod_l+0xc8>
 80116d0:	4652      	mov	r2, sl
 80116d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80116d6:	ec43 2b10 	vmov	d0, r2, r3
 80116da:	b023      	add	sp, #140	; 0x8c
 80116dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e0:	2a20      	cmp	r2, #32
 80116e2:	d1ce      	bne.n	8011682 <_strtod_l+0x42>
 80116e4:	3301      	adds	r3, #1
 80116e6:	931d      	str	r3, [sp, #116]	; 0x74
 80116e8:	e7c0      	b.n	801166c <_strtod_l+0x2c>
 80116ea:	2a2d      	cmp	r2, #45	; 0x2d
 80116ec:	d1c9      	bne.n	8011682 <_strtod_l+0x42>
 80116ee:	2201      	movs	r2, #1
 80116f0:	920e      	str	r2, [sp, #56]	; 0x38
 80116f2:	1c5a      	adds	r2, r3, #1
 80116f4:	921d      	str	r2, [sp, #116]	; 0x74
 80116f6:	785b      	ldrb	r3, [r3, #1]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d1c4      	bne.n	8011686 <_strtod_l+0x46>
 80116fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80116fe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8011702:	2b00      	cmp	r3, #0
 8011704:	f040 8576 	bne.w	80121f4 <_strtod_l+0xbb4>
 8011708:	4652      	mov	r2, sl
 801170a:	465b      	mov	r3, fp
 801170c:	e7e3      	b.n	80116d6 <_strtod_l+0x96>
 801170e:	2200      	movs	r2, #0
 8011710:	e7ee      	b.n	80116f0 <_strtod_l+0xb0>
 8011712:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011714:	b13a      	cbz	r2, 8011726 <_strtod_l+0xe6>
 8011716:	2135      	movs	r1, #53	; 0x35
 8011718:	a820      	add	r0, sp, #128	; 0x80
 801171a:	f002 fca6 	bl	801406a <__copybits>
 801171e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011720:	4620      	mov	r0, r4
 8011722:	f002 f86b 	bl	80137fc <_Bfree>
 8011726:	3f01      	subs	r7, #1
 8011728:	2f05      	cmp	r7, #5
 801172a:	d807      	bhi.n	801173c <_strtod_l+0xfc>
 801172c:	e8df f007 	tbb	[pc, r7]
 8011730:	1d180b0e 	.word	0x1d180b0e
 8011734:	030e      	.short	0x030e
 8011736:	f04f 0b00 	mov.w	fp, #0
 801173a:	46da      	mov	sl, fp
 801173c:	0728      	lsls	r0, r5, #28
 801173e:	d5c1      	bpl.n	80116c4 <_strtod_l+0x84>
 8011740:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011744:	e7be      	b.n	80116c4 <_strtod_l+0x84>
 8011746:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801174a:	e7f7      	b.n	801173c <_strtod_l+0xfc>
 801174c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8011750:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011752:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011756:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801175a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801175e:	e7ed      	b.n	801173c <_strtod_l+0xfc>
 8011760:	f8df b184 	ldr.w	fp, [pc, #388]	; 80118e8 <_strtod_l+0x2a8>
 8011764:	f04f 0a00 	mov.w	sl, #0
 8011768:	e7e8      	b.n	801173c <_strtod_l+0xfc>
 801176a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801176e:	f04f 3aff 	mov.w	sl, #4294967295
 8011772:	e7e3      	b.n	801173c <_strtod_l+0xfc>
 8011774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011776:	1c5a      	adds	r2, r3, #1
 8011778:	921d      	str	r2, [sp, #116]	; 0x74
 801177a:	785b      	ldrb	r3, [r3, #1]
 801177c:	2b30      	cmp	r3, #48	; 0x30
 801177e:	d0f9      	beq.n	8011774 <_strtod_l+0x134>
 8011780:	2b00      	cmp	r3, #0
 8011782:	d09f      	beq.n	80116c4 <_strtod_l+0x84>
 8011784:	2301      	movs	r3, #1
 8011786:	f04f 0900 	mov.w	r9, #0
 801178a:	9304      	str	r3, [sp, #16]
 801178c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801178e:	930a      	str	r3, [sp, #40]	; 0x28
 8011790:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011794:	464f      	mov	r7, r9
 8011796:	220a      	movs	r2, #10
 8011798:	981d      	ldr	r0, [sp, #116]	; 0x74
 801179a:	7806      	ldrb	r6, [r0, #0]
 801179c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80117a0:	b2d9      	uxtb	r1, r3
 80117a2:	2909      	cmp	r1, #9
 80117a4:	d92a      	bls.n	80117fc <_strtod_l+0x1bc>
 80117a6:	9907      	ldr	r1, [sp, #28]
 80117a8:	462a      	mov	r2, r5
 80117aa:	f002 fed1 	bl	8014550 <strncmp>
 80117ae:	b398      	cbz	r0, 8011818 <_strtod_l+0x1d8>
 80117b0:	2000      	movs	r0, #0
 80117b2:	4633      	mov	r3, r6
 80117b4:	463d      	mov	r5, r7
 80117b6:	9007      	str	r0, [sp, #28]
 80117b8:	4602      	mov	r2, r0
 80117ba:	2b65      	cmp	r3, #101	; 0x65
 80117bc:	d001      	beq.n	80117c2 <_strtod_l+0x182>
 80117be:	2b45      	cmp	r3, #69	; 0x45
 80117c0:	d118      	bne.n	80117f4 <_strtod_l+0x1b4>
 80117c2:	b91d      	cbnz	r5, 80117cc <_strtod_l+0x18c>
 80117c4:	9b04      	ldr	r3, [sp, #16]
 80117c6:	4303      	orrs	r3, r0
 80117c8:	d098      	beq.n	80116fc <_strtod_l+0xbc>
 80117ca:	2500      	movs	r5, #0
 80117cc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80117d0:	f108 0301 	add.w	r3, r8, #1
 80117d4:	931d      	str	r3, [sp, #116]	; 0x74
 80117d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80117da:	2b2b      	cmp	r3, #43	; 0x2b
 80117dc:	d075      	beq.n	80118ca <_strtod_l+0x28a>
 80117de:	2b2d      	cmp	r3, #45	; 0x2d
 80117e0:	d07b      	beq.n	80118da <_strtod_l+0x29a>
 80117e2:	f04f 0c00 	mov.w	ip, #0
 80117e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80117ea:	2909      	cmp	r1, #9
 80117ec:	f240 8082 	bls.w	80118f4 <_strtod_l+0x2b4>
 80117f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80117f4:	2600      	movs	r6, #0
 80117f6:	e09d      	b.n	8011934 <_strtod_l+0x2f4>
 80117f8:	2300      	movs	r3, #0
 80117fa:	e7c4      	b.n	8011786 <_strtod_l+0x146>
 80117fc:	2f08      	cmp	r7, #8
 80117fe:	bfd8      	it	le
 8011800:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011802:	f100 0001 	add.w	r0, r0, #1
 8011806:	bfda      	itte	le
 8011808:	fb02 3301 	mlale	r3, r2, r1, r3
 801180c:	9309      	strle	r3, [sp, #36]	; 0x24
 801180e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8011812:	3701      	adds	r7, #1
 8011814:	901d      	str	r0, [sp, #116]	; 0x74
 8011816:	e7bf      	b.n	8011798 <_strtod_l+0x158>
 8011818:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801181a:	195a      	adds	r2, r3, r5
 801181c:	921d      	str	r2, [sp, #116]	; 0x74
 801181e:	5d5b      	ldrb	r3, [r3, r5]
 8011820:	2f00      	cmp	r7, #0
 8011822:	d037      	beq.n	8011894 <_strtod_l+0x254>
 8011824:	9007      	str	r0, [sp, #28]
 8011826:	463d      	mov	r5, r7
 8011828:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801182c:	2a09      	cmp	r2, #9
 801182e:	d912      	bls.n	8011856 <_strtod_l+0x216>
 8011830:	2201      	movs	r2, #1
 8011832:	e7c2      	b.n	80117ba <_strtod_l+0x17a>
 8011834:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011836:	1c5a      	adds	r2, r3, #1
 8011838:	921d      	str	r2, [sp, #116]	; 0x74
 801183a:	785b      	ldrb	r3, [r3, #1]
 801183c:	3001      	adds	r0, #1
 801183e:	2b30      	cmp	r3, #48	; 0x30
 8011840:	d0f8      	beq.n	8011834 <_strtod_l+0x1f4>
 8011842:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011846:	2a08      	cmp	r2, #8
 8011848:	f200 84db 	bhi.w	8012202 <_strtod_l+0xbc2>
 801184c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801184e:	9007      	str	r0, [sp, #28]
 8011850:	2000      	movs	r0, #0
 8011852:	920a      	str	r2, [sp, #40]	; 0x28
 8011854:	4605      	mov	r5, r0
 8011856:	3b30      	subs	r3, #48	; 0x30
 8011858:	f100 0201 	add.w	r2, r0, #1
 801185c:	d014      	beq.n	8011888 <_strtod_l+0x248>
 801185e:	9907      	ldr	r1, [sp, #28]
 8011860:	4411      	add	r1, r2
 8011862:	9107      	str	r1, [sp, #28]
 8011864:	462a      	mov	r2, r5
 8011866:	eb00 0e05 	add.w	lr, r0, r5
 801186a:	210a      	movs	r1, #10
 801186c:	4572      	cmp	r2, lr
 801186e:	d113      	bne.n	8011898 <_strtod_l+0x258>
 8011870:	182a      	adds	r2, r5, r0
 8011872:	2a08      	cmp	r2, #8
 8011874:	f105 0501 	add.w	r5, r5, #1
 8011878:	4405      	add	r5, r0
 801187a:	dc1c      	bgt.n	80118b6 <_strtod_l+0x276>
 801187c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801187e:	220a      	movs	r2, #10
 8011880:	fb02 3301 	mla	r3, r2, r1, r3
 8011884:	9309      	str	r3, [sp, #36]	; 0x24
 8011886:	2200      	movs	r2, #0
 8011888:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801188a:	1c59      	adds	r1, r3, #1
 801188c:	911d      	str	r1, [sp, #116]	; 0x74
 801188e:	785b      	ldrb	r3, [r3, #1]
 8011890:	4610      	mov	r0, r2
 8011892:	e7c9      	b.n	8011828 <_strtod_l+0x1e8>
 8011894:	4638      	mov	r0, r7
 8011896:	e7d2      	b.n	801183e <_strtod_l+0x1fe>
 8011898:	2a08      	cmp	r2, #8
 801189a:	dc04      	bgt.n	80118a6 <_strtod_l+0x266>
 801189c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801189e:	434e      	muls	r6, r1
 80118a0:	9609      	str	r6, [sp, #36]	; 0x24
 80118a2:	3201      	adds	r2, #1
 80118a4:	e7e2      	b.n	801186c <_strtod_l+0x22c>
 80118a6:	f102 0c01 	add.w	ip, r2, #1
 80118aa:	f1bc 0f10 	cmp.w	ip, #16
 80118ae:	bfd8      	it	le
 80118b0:	fb01 f909 	mulle.w	r9, r1, r9
 80118b4:	e7f5      	b.n	80118a2 <_strtod_l+0x262>
 80118b6:	2d10      	cmp	r5, #16
 80118b8:	bfdc      	itt	le
 80118ba:	220a      	movle	r2, #10
 80118bc:	fb02 3909 	mlale	r9, r2, r9, r3
 80118c0:	e7e1      	b.n	8011886 <_strtod_l+0x246>
 80118c2:	2300      	movs	r3, #0
 80118c4:	9307      	str	r3, [sp, #28]
 80118c6:	2201      	movs	r2, #1
 80118c8:	e77c      	b.n	80117c4 <_strtod_l+0x184>
 80118ca:	f04f 0c00 	mov.w	ip, #0
 80118ce:	f108 0302 	add.w	r3, r8, #2
 80118d2:	931d      	str	r3, [sp, #116]	; 0x74
 80118d4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80118d8:	e785      	b.n	80117e6 <_strtod_l+0x1a6>
 80118da:	f04f 0c01 	mov.w	ip, #1
 80118de:	e7f6      	b.n	80118ce <_strtod_l+0x28e>
 80118e0:	080156f0 	.word	0x080156f0
 80118e4:	0801549c 	.word	0x0801549c
 80118e8:	7ff00000 	.word	0x7ff00000
 80118ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80118ee:	1c59      	adds	r1, r3, #1
 80118f0:	911d      	str	r1, [sp, #116]	; 0x74
 80118f2:	785b      	ldrb	r3, [r3, #1]
 80118f4:	2b30      	cmp	r3, #48	; 0x30
 80118f6:	d0f9      	beq.n	80118ec <_strtod_l+0x2ac>
 80118f8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80118fc:	2908      	cmp	r1, #8
 80118fe:	f63f af79 	bhi.w	80117f4 <_strtod_l+0x1b4>
 8011902:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011906:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011908:	9308      	str	r3, [sp, #32]
 801190a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801190c:	1c59      	adds	r1, r3, #1
 801190e:	911d      	str	r1, [sp, #116]	; 0x74
 8011910:	785b      	ldrb	r3, [r3, #1]
 8011912:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8011916:	2e09      	cmp	r6, #9
 8011918:	d937      	bls.n	801198a <_strtod_l+0x34a>
 801191a:	9e08      	ldr	r6, [sp, #32]
 801191c:	1b89      	subs	r1, r1, r6
 801191e:	2908      	cmp	r1, #8
 8011920:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8011924:	dc02      	bgt.n	801192c <_strtod_l+0x2ec>
 8011926:	4576      	cmp	r6, lr
 8011928:	bfa8      	it	ge
 801192a:	4676      	movge	r6, lr
 801192c:	f1bc 0f00 	cmp.w	ip, #0
 8011930:	d000      	beq.n	8011934 <_strtod_l+0x2f4>
 8011932:	4276      	negs	r6, r6
 8011934:	2d00      	cmp	r5, #0
 8011936:	d14f      	bne.n	80119d8 <_strtod_l+0x398>
 8011938:	9904      	ldr	r1, [sp, #16]
 801193a:	4301      	orrs	r1, r0
 801193c:	f47f aec2 	bne.w	80116c4 <_strtod_l+0x84>
 8011940:	2a00      	cmp	r2, #0
 8011942:	f47f aedb 	bne.w	80116fc <_strtod_l+0xbc>
 8011946:	2b69      	cmp	r3, #105	; 0x69
 8011948:	d027      	beq.n	801199a <_strtod_l+0x35a>
 801194a:	dc24      	bgt.n	8011996 <_strtod_l+0x356>
 801194c:	2b49      	cmp	r3, #73	; 0x49
 801194e:	d024      	beq.n	801199a <_strtod_l+0x35a>
 8011950:	2b4e      	cmp	r3, #78	; 0x4e
 8011952:	f47f aed3 	bne.w	80116fc <_strtod_l+0xbc>
 8011956:	499e      	ldr	r1, [pc, #632]	; (8011bd0 <_strtod_l+0x590>)
 8011958:	a81d      	add	r0, sp, #116	; 0x74
 801195a:	f001 fe41 	bl	80135e0 <__match>
 801195e:	2800      	cmp	r0, #0
 8011960:	f43f aecc 	beq.w	80116fc <_strtod_l+0xbc>
 8011964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	2b28      	cmp	r3, #40	; 0x28
 801196a:	d12d      	bne.n	80119c8 <_strtod_l+0x388>
 801196c:	4999      	ldr	r1, [pc, #612]	; (8011bd4 <_strtod_l+0x594>)
 801196e:	aa20      	add	r2, sp, #128	; 0x80
 8011970:	a81d      	add	r0, sp, #116	; 0x74
 8011972:	f001 fe49 	bl	8013608 <__hexnan>
 8011976:	2805      	cmp	r0, #5
 8011978:	d126      	bne.n	80119c8 <_strtod_l+0x388>
 801197a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801197c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8011980:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011984:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011988:	e69c      	b.n	80116c4 <_strtod_l+0x84>
 801198a:	210a      	movs	r1, #10
 801198c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011990:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011994:	e7b9      	b.n	801190a <_strtod_l+0x2ca>
 8011996:	2b6e      	cmp	r3, #110	; 0x6e
 8011998:	e7db      	b.n	8011952 <_strtod_l+0x312>
 801199a:	498f      	ldr	r1, [pc, #572]	; (8011bd8 <_strtod_l+0x598>)
 801199c:	a81d      	add	r0, sp, #116	; 0x74
 801199e:	f001 fe1f 	bl	80135e0 <__match>
 80119a2:	2800      	cmp	r0, #0
 80119a4:	f43f aeaa 	beq.w	80116fc <_strtod_l+0xbc>
 80119a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119aa:	498c      	ldr	r1, [pc, #560]	; (8011bdc <_strtod_l+0x59c>)
 80119ac:	3b01      	subs	r3, #1
 80119ae:	a81d      	add	r0, sp, #116	; 0x74
 80119b0:	931d      	str	r3, [sp, #116]	; 0x74
 80119b2:	f001 fe15 	bl	80135e0 <__match>
 80119b6:	b910      	cbnz	r0, 80119be <_strtod_l+0x37e>
 80119b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119ba:	3301      	adds	r3, #1
 80119bc:	931d      	str	r3, [sp, #116]	; 0x74
 80119be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8011bec <_strtod_l+0x5ac>
 80119c2:	f04f 0a00 	mov.w	sl, #0
 80119c6:	e67d      	b.n	80116c4 <_strtod_l+0x84>
 80119c8:	4885      	ldr	r0, [pc, #532]	; (8011be0 <_strtod_l+0x5a0>)
 80119ca:	f002 fda9 	bl	8014520 <nan>
 80119ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 80119d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80119d6:	e675      	b.n	80116c4 <_strtod_l+0x84>
 80119d8:	9b07      	ldr	r3, [sp, #28]
 80119da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119dc:	1af3      	subs	r3, r6, r3
 80119de:	2f00      	cmp	r7, #0
 80119e0:	bf08      	it	eq
 80119e2:	462f      	moveq	r7, r5
 80119e4:	2d10      	cmp	r5, #16
 80119e6:	9308      	str	r3, [sp, #32]
 80119e8:	46a8      	mov	r8, r5
 80119ea:	bfa8      	it	ge
 80119ec:	f04f 0810 	movge.w	r8, #16
 80119f0:	f7ee fd88 	bl	8000504 <__aeabi_ui2d>
 80119f4:	2d09      	cmp	r5, #9
 80119f6:	4682      	mov	sl, r0
 80119f8:	468b      	mov	fp, r1
 80119fa:	dd13      	ble.n	8011a24 <_strtod_l+0x3e4>
 80119fc:	4b79      	ldr	r3, [pc, #484]	; (8011be4 <_strtod_l+0x5a4>)
 80119fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011a02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011a06:	f7ee fdf7 	bl	80005f8 <__aeabi_dmul>
 8011a0a:	4682      	mov	sl, r0
 8011a0c:	4648      	mov	r0, r9
 8011a0e:	468b      	mov	fp, r1
 8011a10:	f7ee fd78 	bl	8000504 <__aeabi_ui2d>
 8011a14:	4602      	mov	r2, r0
 8011a16:	460b      	mov	r3, r1
 8011a18:	4650      	mov	r0, sl
 8011a1a:	4659      	mov	r1, fp
 8011a1c:	f7ee fc36 	bl	800028c <__adddf3>
 8011a20:	4682      	mov	sl, r0
 8011a22:	468b      	mov	fp, r1
 8011a24:	2d0f      	cmp	r5, #15
 8011a26:	dc38      	bgt.n	8011a9a <_strtod_l+0x45a>
 8011a28:	9b08      	ldr	r3, [sp, #32]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	f43f ae4a 	beq.w	80116c4 <_strtod_l+0x84>
 8011a30:	dd24      	ble.n	8011a7c <_strtod_l+0x43c>
 8011a32:	2b16      	cmp	r3, #22
 8011a34:	dc0b      	bgt.n	8011a4e <_strtod_l+0x40e>
 8011a36:	4d6b      	ldr	r5, [pc, #428]	; (8011be4 <_strtod_l+0x5a4>)
 8011a38:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8011a3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011a40:	4652      	mov	r2, sl
 8011a42:	465b      	mov	r3, fp
 8011a44:	f7ee fdd8 	bl	80005f8 <__aeabi_dmul>
 8011a48:	4682      	mov	sl, r0
 8011a4a:	468b      	mov	fp, r1
 8011a4c:	e63a      	b.n	80116c4 <_strtod_l+0x84>
 8011a4e:	9a08      	ldr	r2, [sp, #32]
 8011a50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011a54:	4293      	cmp	r3, r2
 8011a56:	db20      	blt.n	8011a9a <_strtod_l+0x45a>
 8011a58:	4c62      	ldr	r4, [pc, #392]	; (8011be4 <_strtod_l+0x5a4>)
 8011a5a:	f1c5 050f 	rsb	r5, r5, #15
 8011a5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011a62:	4652      	mov	r2, sl
 8011a64:	465b      	mov	r3, fp
 8011a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a6a:	f7ee fdc5 	bl	80005f8 <__aeabi_dmul>
 8011a6e:	9b08      	ldr	r3, [sp, #32]
 8011a70:	1b5d      	subs	r5, r3, r5
 8011a72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011a76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011a7a:	e7e3      	b.n	8011a44 <_strtod_l+0x404>
 8011a7c:	9b08      	ldr	r3, [sp, #32]
 8011a7e:	3316      	adds	r3, #22
 8011a80:	db0b      	blt.n	8011a9a <_strtod_l+0x45a>
 8011a82:	9b07      	ldr	r3, [sp, #28]
 8011a84:	4a57      	ldr	r2, [pc, #348]	; (8011be4 <_strtod_l+0x5a4>)
 8011a86:	1b9e      	subs	r6, r3, r6
 8011a88:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8011a8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011a90:	4650      	mov	r0, sl
 8011a92:	4659      	mov	r1, fp
 8011a94:	f7ee feda 	bl	800084c <__aeabi_ddiv>
 8011a98:	e7d6      	b.n	8011a48 <_strtod_l+0x408>
 8011a9a:	9b08      	ldr	r3, [sp, #32]
 8011a9c:	eba5 0808 	sub.w	r8, r5, r8
 8011aa0:	4498      	add	r8, r3
 8011aa2:	f1b8 0f00 	cmp.w	r8, #0
 8011aa6:	dd71      	ble.n	8011b8c <_strtod_l+0x54c>
 8011aa8:	f018 030f 	ands.w	r3, r8, #15
 8011aac:	d00a      	beq.n	8011ac4 <_strtod_l+0x484>
 8011aae:	494d      	ldr	r1, [pc, #308]	; (8011be4 <_strtod_l+0x5a4>)
 8011ab0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011ab4:	4652      	mov	r2, sl
 8011ab6:	465b      	mov	r3, fp
 8011ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011abc:	f7ee fd9c 	bl	80005f8 <__aeabi_dmul>
 8011ac0:	4682      	mov	sl, r0
 8011ac2:	468b      	mov	fp, r1
 8011ac4:	f038 080f 	bics.w	r8, r8, #15
 8011ac8:	d04d      	beq.n	8011b66 <_strtod_l+0x526>
 8011aca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011ace:	dd22      	ble.n	8011b16 <_strtod_l+0x4d6>
 8011ad0:	2500      	movs	r5, #0
 8011ad2:	462e      	mov	r6, r5
 8011ad4:	9509      	str	r5, [sp, #36]	; 0x24
 8011ad6:	9507      	str	r5, [sp, #28]
 8011ad8:	2322      	movs	r3, #34	; 0x22
 8011ada:	f8df b110 	ldr.w	fp, [pc, #272]	; 8011bec <_strtod_l+0x5ac>
 8011ade:	6023      	str	r3, [r4, #0]
 8011ae0:	f04f 0a00 	mov.w	sl, #0
 8011ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f43f adec 	beq.w	80116c4 <_strtod_l+0x84>
 8011aec:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011aee:	4620      	mov	r0, r4
 8011af0:	f001 fe84 	bl	80137fc <_Bfree>
 8011af4:	9907      	ldr	r1, [sp, #28]
 8011af6:	4620      	mov	r0, r4
 8011af8:	f001 fe80 	bl	80137fc <_Bfree>
 8011afc:	4631      	mov	r1, r6
 8011afe:	4620      	mov	r0, r4
 8011b00:	f001 fe7c 	bl	80137fc <_Bfree>
 8011b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b06:	4620      	mov	r0, r4
 8011b08:	f001 fe78 	bl	80137fc <_Bfree>
 8011b0c:	4629      	mov	r1, r5
 8011b0e:	4620      	mov	r0, r4
 8011b10:	f001 fe74 	bl	80137fc <_Bfree>
 8011b14:	e5d6      	b.n	80116c4 <_strtod_l+0x84>
 8011b16:	2300      	movs	r3, #0
 8011b18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011b1c:	4650      	mov	r0, sl
 8011b1e:	4659      	mov	r1, fp
 8011b20:	4699      	mov	r9, r3
 8011b22:	f1b8 0f01 	cmp.w	r8, #1
 8011b26:	dc21      	bgt.n	8011b6c <_strtod_l+0x52c>
 8011b28:	b10b      	cbz	r3, 8011b2e <_strtod_l+0x4ee>
 8011b2a:	4682      	mov	sl, r0
 8011b2c:	468b      	mov	fp, r1
 8011b2e:	4b2e      	ldr	r3, [pc, #184]	; (8011be8 <_strtod_l+0x5a8>)
 8011b30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011b34:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8011b38:	4652      	mov	r2, sl
 8011b3a:	465b      	mov	r3, fp
 8011b3c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011b40:	f7ee fd5a 	bl	80005f8 <__aeabi_dmul>
 8011b44:	4b29      	ldr	r3, [pc, #164]	; (8011bec <_strtod_l+0x5ac>)
 8011b46:	460a      	mov	r2, r1
 8011b48:	400b      	ands	r3, r1
 8011b4a:	4929      	ldr	r1, [pc, #164]	; (8011bf0 <_strtod_l+0x5b0>)
 8011b4c:	428b      	cmp	r3, r1
 8011b4e:	4682      	mov	sl, r0
 8011b50:	d8be      	bhi.n	8011ad0 <_strtod_l+0x490>
 8011b52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011b56:	428b      	cmp	r3, r1
 8011b58:	bf86      	itte	hi
 8011b5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011bf4 <_strtod_l+0x5b4>
 8011b5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8011b62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011b66:	2300      	movs	r3, #0
 8011b68:	9304      	str	r3, [sp, #16]
 8011b6a:	e081      	b.n	8011c70 <_strtod_l+0x630>
 8011b6c:	f018 0f01 	tst.w	r8, #1
 8011b70:	d007      	beq.n	8011b82 <_strtod_l+0x542>
 8011b72:	4b1d      	ldr	r3, [pc, #116]	; (8011be8 <_strtod_l+0x5a8>)
 8011b74:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8011b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7c:	f7ee fd3c 	bl	80005f8 <__aeabi_dmul>
 8011b80:	2301      	movs	r3, #1
 8011b82:	f109 0901 	add.w	r9, r9, #1
 8011b86:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011b8a:	e7ca      	b.n	8011b22 <_strtod_l+0x4e2>
 8011b8c:	d0eb      	beq.n	8011b66 <_strtod_l+0x526>
 8011b8e:	f1c8 0800 	rsb	r8, r8, #0
 8011b92:	f018 020f 	ands.w	r2, r8, #15
 8011b96:	d00a      	beq.n	8011bae <_strtod_l+0x56e>
 8011b98:	4b12      	ldr	r3, [pc, #72]	; (8011be4 <_strtod_l+0x5a4>)
 8011b9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b9e:	4650      	mov	r0, sl
 8011ba0:	4659      	mov	r1, fp
 8011ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba6:	f7ee fe51 	bl	800084c <__aeabi_ddiv>
 8011baa:	4682      	mov	sl, r0
 8011bac:	468b      	mov	fp, r1
 8011bae:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011bb2:	d0d8      	beq.n	8011b66 <_strtod_l+0x526>
 8011bb4:	f1b8 0f1f 	cmp.w	r8, #31
 8011bb8:	dd1e      	ble.n	8011bf8 <_strtod_l+0x5b8>
 8011bba:	2500      	movs	r5, #0
 8011bbc:	462e      	mov	r6, r5
 8011bbe:	9509      	str	r5, [sp, #36]	; 0x24
 8011bc0:	9507      	str	r5, [sp, #28]
 8011bc2:	2322      	movs	r3, #34	; 0x22
 8011bc4:	f04f 0a00 	mov.w	sl, #0
 8011bc8:	f04f 0b00 	mov.w	fp, #0
 8011bcc:	6023      	str	r3, [r4, #0]
 8011bce:	e789      	b.n	8011ae4 <_strtod_l+0x4a4>
 8011bd0:	0801546d 	.word	0x0801546d
 8011bd4:	080154b0 	.word	0x080154b0
 8011bd8:	08015465 	.word	0x08015465
 8011bdc:	080155f4 	.word	0x080155f4
 8011be0:	080158b0 	.word	0x080158b0
 8011be4:	08015790 	.word	0x08015790
 8011be8:	08015768 	.word	0x08015768
 8011bec:	7ff00000 	.word	0x7ff00000
 8011bf0:	7ca00000 	.word	0x7ca00000
 8011bf4:	7fefffff 	.word	0x7fefffff
 8011bf8:	f018 0310 	ands.w	r3, r8, #16
 8011bfc:	bf18      	it	ne
 8011bfe:	236a      	movne	r3, #106	; 0x6a
 8011c00:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8011fb8 <_strtod_l+0x978>
 8011c04:	9304      	str	r3, [sp, #16]
 8011c06:	4650      	mov	r0, sl
 8011c08:	4659      	mov	r1, fp
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	f018 0f01 	tst.w	r8, #1
 8011c10:	d004      	beq.n	8011c1c <_strtod_l+0x5dc>
 8011c12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8011c16:	f7ee fcef 	bl	80005f8 <__aeabi_dmul>
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8011c20:	f109 0908 	add.w	r9, r9, #8
 8011c24:	d1f2      	bne.n	8011c0c <_strtod_l+0x5cc>
 8011c26:	b10b      	cbz	r3, 8011c2c <_strtod_l+0x5ec>
 8011c28:	4682      	mov	sl, r0
 8011c2a:	468b      	mov	fp, r1
 8011c2c:	9b04      	ldr	r3, [sp, #16]
 8011c2e:	b1bb      	cbz	r3, 8011c60 <_strtod_l+0x620>
 8011c30:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011c34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	4659      	mov	r1, fp
 8011c3c:	dd10      	ble.n	8011c60 <_strtod_l+0x620>
 8011c3e:	2b1f      	cmp	r3, #31
 8011c40:	f340 8128 	ble.w	8011e94 <_strtod_l+0x854>
 8011c44:	2b34      	cmp	r3, #52	; 0x34
 8011c46:	bfde      	ittt	le
 8011c48:	3b20      	suble	r3, #32
 8011c4a:	f04f 32ff 	movle.w	r2, #4294967295
 8011c4e:	fa02 f303 	lslle.w	r3, r2, r3
 8011c52:	f04f 0a00 	mov.w	sl, #0
 8011c56:	bfcc      	ite	gt
 8011c58:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011c5c:	ea03 0b01 	andle.w	fp, r3, r1
 8011c60:	2200      	movs	r2, #0
 8011c62:	2300      	movs	r3, #0
 8011c64:	4650      	mov	r0, sl
 8011c66:	4659      	mov	r1, fp
 8011c68:	f7ee ff2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c6c:	2800      	cmp	r0, #0
 8011c6e:	d1a4      	bne.n	8011bba <_strtod_l+0x57a>
 8011c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c72:	9300      	str	r3, [sp, #0]
 8011c74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011c76:	462b      	mov	r3, r5
 8011c78:	463a      	mov	r2, r7
 8011c7a:	4620      	mov	r0, r4
 8011c7c:	f001 fe2a 	bl	80138d4 <__s2b>
 8011c80:	9009      	str	r0, [sp, #36]	; 0x24
 8011c82:	2800      	cmp	r0, #0
 8011c84:	f43f af24 	beq.w	8011ad0 <_strtod_l+0x490>
 8011c88:	9b07      	ldr	r3, [sp, #28]
 8011c8a:	1b9e      	subs	r6, r3, r6
 8011c8c:	9b08      	ldr	r3, [sp, #32]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	bfb4      	ite	lt
 8011c92:	4633      	movlt	r3, r6
 8011c94:	2300      	movge	r3, #0
 8011c96:	9310      	str	r3, [sp, #64]	; 0x40
 8011c98:	9b08      	ldr	r3, [sp, #32]
 8011c9a:	2500      	movs	r5, #0
 8011c9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011ca0:	9318      	str	r3, [sp, #96]	; 0x60
 8011ca2:	462e      	mov	r6, r5
 8011ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	6859      	ldr	r1, [r3, #4]
 8011caa:	f001 fd67 	bl	801377c <_Balloc>
 8011cae:	9007      	str	r0, [sp, #28]
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	f43f af11 	beq.w	8011ad8 <_strtod_l+0x498>
 8011cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cb8:	691a      	ldr	r2, [r3, #16]
 8011cba:	3202      	adds	r2, #2
 8011cbc:	f103 010c 	add.w	r1, r3, #12
 8011cc0:	0092      	lsls	r2, r2, #2
 8011cc2:	300c      	adds	r0, #12
 8011cc4:	f7fe fdb4 	bl	8010830 <memcpy>
 8011cc8:	ec4b ab10 	vmov	d0, sl, fp
 8011ccc:	aa20      	add	r2, sp, #128	; 0x80
 8011cce:	a91f      	add	r1, sp, #124	; 0x7c
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011cd6:	f002 f939 	bl	8013f4c <__d2b>
 8011cda:	901e      	str	r0, [sp, #120]	; 0x78
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	f43f aefb 	beq.w	8011ad8 <_strtod_l+0x498>
 8011ce2:	2101      	movs	r1, #1
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	f001 fe8f 	bl	8013a08 <__i2b>
 8011cea:	4606      	mov	r6, r0
 8011cec:	2800      	cmp	r0, #0
 8011cee:	f43f aef3 	beq.w	8011ad8 <_strtod_l+0x498>
 8011cf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011cf4:	9904      	ldr	r1, [sp, #16]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	bfab      	itete	ge
 8011cfa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8011cfc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8011cfe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8011d00:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8011d04:	bfac      	ite	ge
 8011d06:	eb03 0902 	addge.w	r9, r3, r2
 8011d0a:	1ad7      	sublt	r7, r2, r3
 8011d0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011d0e:	eba3 0801 	sub.w	r8, r3, r1
 8011d12:	4490      	add	r8, r2
 8011d14:	4ba3      	ldr	r3, [pc, #652]	; (8011fa4 <_strtod_l+0x964>)
 8011d16:	f108 38ff 	add.w	r8, r8, #4294967295
 8011d1a:	4598      	cmp	r8, r3
 8011d1c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011d20:	f280 80cc 	bge.w	8011ebc <_strtod_l+0x87c>
 8011d24:	eba3 0308 	sub.w	r3, r3, r8
 8011d28:	2b1f      	cmp	r3, #31
 8011d2a:	eba2 0203 	sub.w	r2, r2, r3
 8011d2e:	f04f 0101 	mov.w	r1, #1
 8011d32:	f300 80b6 	bgt.w	8011ea2 <_strtod_l+0x862>
 8011d36:	fa01 f303 	lsl.w	r3, r1, r3
 8011d3a:	9311      	str	r3, [sp, #68]	; 0x44
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8011d40:	eb09 0802 	add.w	r8, r9, r2
 8011d44:	9b04      	ldr	r3, [sp, #16]
 8011d46:	45c1      	cmp	r9, r8
 8011d48:	4417      	add	r7, r2
 8011d4a:	441f      	add	r7, r3
 8011d4c:	464b      	mov	r3, r9
 8011d4e:	bfa8      	it	ge
 8011d50:	4643      	movge	r3, r8
 8011d52:	42bb      	cmp	r3, r7
 8011d54:	bfa8      	it	ge
 8011d56:	463b      	movge	r3, r7
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	bfc2      	ittt	gt
 8011d5c:	eba8 0803 	subgt.w	r8, r8, r3
 8011d60:	1aff      	subgt	r7, r7, r3
 8011d62:	eba9 0903 	subgt.w	r9, r9, r3
 8011d66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	dd17      	ble.n	8011d9c <_strtod_l+0x75c>
 8011d6c:	4631      	mov	r1, r6
 8011d6e:	461a      	mov	r2, r3
 8011d70:	4620      	mov	r0, r4
 8011d72:	f001 ff05 	bl	8013b80 <__pow5mult>
 8011d76:	4606      	mov	r6, r0
 8011d78:	2800      	cmp	r0, #0
 8011d7a:	f43f aead 	beq.w	8011ad8 <_strtod_l+0x498>
 8011d7e:	4601      	mov	r1, r0
 8011d80:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011d82:	4620      	mov	r0, r4
 8011d84:	f001 fe56 	bl	8013a34 <__multiply>
 8011d88:	900f      	str	r0, [sp, #60]	; 0x3c
 8011d8a:	2800      	cmp	r0, #0
 8011d8c:	f43f aea4 	beq.w	8011ad8 <_strtod_l+0x498>
 8011d90:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011d92:	4620      	mov	r0, r4
 8011d94:	f001 fd32 	bl	80137fc <_Bfree>
 8011d98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d9a:	931e      	str	r3, [sp, #120]	; 0x78
 8011d9c:	f1b8 0f00 	cmp.w	r8, #0
 8011da0:	f300 8091 	bgt.w	8011ec6 <_strtod_l+0x886>
 8011da4:	9b08      	ldr	r3, [sp, #32]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	dd08      	ble.n	8011dbc <_strtod_l+0x77c>
 8011daa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011dac:	9907      	ldr	r1, [sp, #28]
 8011dae:	4620      	mov	r0, r4
 8011db0:	f001 fee6 	bl	8013b80 <__pow5mult>
 8011db4:	9007      	str	r0, [sp, #28]
 8011db6:	2800      	cmp	r0, #0
 8011db8:	f43f ae8e 	beq.w	8011ad8 <_strtod_l+0x498>
 8011dbc:	2f00      	cmp	r7, #0
 8011dbe:	dd08      	ble.n	8011dd2 <_strtod_l+0x792>
 8011dc0:	9907      	ldr	r1, [sp, #28]
 8011dc2:	463a      	mov	r2, r7
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	f001 ff35 	bl	8013c34 <__lshift>
 8011dca:	9007      	str	r0, [sp, #28]
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	f43f ae83 	beq.w	8011ad8 <_strtod_l+0x498>
 8011dd2:	f1b9 0f00 	cmp.w	r9, #0
 8011dd6:	dd08      	ble.n	8011dea <_strtod_l+0x7aa>
 8011dd8:	4631      	mov	r1, r6
 8011dda:	464a      	mov	r2, r9
 8011ddc:	4620      	mov	r0, r4
 8011dde:	f001 ff29 	bl	8013c34 <__lshift>
 8011de2:	4606      	mov	r6, r0
 8011de4:	2800      	cmp	r0, #0
 8011de6:	f43f ae77 	beq.w	8011ad8 <_strtod_l+0x498>
 8011dea:	9a07      	ldr	r2, [sp, #28]
 8011dec:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011dee:	4620      	mov	r0, r4
 8011df0:	f001 ffa8 	bl	8013d44 <__mdiff>
 8011df4:	4605      	mov	r5, r0
 8011df6:	2800      	cmp	r0, #0
 8011df8:	f43f ae6e 	beq.w	8011ad8 <_strtod_l+0x498>
 8011dfc:	68c3      	ldr	r3, [r0, #12]
 8011dfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e00:	2300      	movs	r3, #0
 8011e02:	60c3      	str	r3, [r0, #12]
 8011e04:	4631      	mov	r1, r6
 8011e06:	f001 ff81 	bl	8013d0c <__mcmp>
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	da65      	bge.n	8011eda <_strtod_l+0x89a>
 8011e0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e10:	ea53 030a 	orrs.w	r3, r3, sl
 8011e14:	f040 8087 	bne.w	8011f26 <_strtod_l+0x8e6>
 8011e18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	f040 8082 	bne.w	8011f26 <_strtod_l+0x8e6>
 8011e22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e26:	0d1b      	lsrs	r3, r3, #20
 8011e28:	051b      	lsls	r3, r3, #20
 8011e2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011e2e:	d97a      	bls.n	8011f26 <_strtod_l+0x8e6>
 8011e30:	696b      	ldr	r3, [r5, #20]
 8011e32:	b913      	cbnz	r3, 8011e3a <_strtod_l+0x7fa>
 8011e34:	692b      	ldr	r3, [r5, #16]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	dd75      	ble.n	8011f26 <_strtod_l+0x8e6>
 8011e3a:	4629      	mov	r1, r5
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	4620      	mov	r0, r4
 8011e40:	f001 fef8 	bl	8013c34 <__lshift>
 8011e44:	4631      	mov	r1, r6
 8011e46:	4605      	mov	r5, r0
 8011e48:	f001 ff60 	bl	8013d0c <__mcmp>
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	dd6a      	ble.n	8011f26 <_strtod_l+0x8e6>
 8011e50:	9904      	ldr	r1, [sp, #16]
 8011e52:	4a55      	ldr	r2, [pc, #340]	; (8011fa8 <_strtod_l+0x968>)
 8011e54:	465b      	mov	r3, fp
 8011e56:	2900      	cmp	r1, #0
 8011e58:	f000 8085 	beq.w	8011f66 <_strtod_l+0x926>
 8011e5c:	ea02 010b 	and.w	r1, r2, fp
 8011e60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011e64:	dc7f      	bgt.n	8011f66 <_strtod_l+0x926>
 8011e66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011e6a:	f77f aeaa 	ble.w	8011bc2 <_strtod_l+0x582>
 8011e6e:	4a4f      	ldr	r2, [pc, #316]	; (8011fac <_strtod_l+0x96c>)
 8011e70:	2300      	movs	r3, #0
 8011e72:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8011e76:	4650      	mov	r0, sl
 8011e78:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8011e7c:	4659      	mov	r1, fp
 8011e7e:	f7ee fbbb 	bl	80005f8 <__aeabi_dmul>
 8011e82:	460b      	mov	r3, r1
 8011e84:	4303      	orrs	r3, r0
 8011e86:	bf08      	it	eq
 8011e88:	2322      	moveq	r3, #34	; 0x22
 8011e8a:	4682      	mov	sl, r0
 8011e8c:	468b      	mov	fp, r1
 8011e8e:	bf08      	it	eq
 8011e90:	6023      	streq	r3, [r4, #0]
 8011e92:	e62b      	b.n	8011aec <_strtod_l+0x4ac>
 8011e94:	f04f 32ff 	mov.w	r2, #4294967295
 8011e98:	fa02 f303 	lsl.w	r3, r2, r3
 8011e9c:	ea03 0a0a 	and.w	sl, r3, sl
 8011ea0:	e6de      	b.n	8011c60 <_strtod_l+0x620>
 8011ea2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011ea6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011eaa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011eae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011eb2:	fa01 f308 	lsl.w	r3, r1, r8
 8011eb6:	930c      	str	r3, [sp, #48]	; 0x30
 8011eb8:	9111      	str	r1, [sp, #68]	; 0x44
 8011eba:	e741      	b.n	8011d40 <_strtod_l+0x700>
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	9311      	str	r3, [sp, #68]	; 0x44
 8011ec4:	e73c      	b.n	8011d40 <_strtod_l+0x700>
 8011ec6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011ec8:	4642      	mov	r2, r8
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f001 feb2 	bl	8013c34 <__lshift>
 8011ed0:	901e      	str	r0, [sp, #120]	; 0x78
 8011ed2:	2800      	cmp	r0, #0
 8011ed4:	f47f af66 	bne.w	8011da4 <_strtod_l+0x764>
 8011ed8:	e5fe      	b.n	8011ad8 <_strtod_l+0x498>
 8011eda:	465f      	mov	r7, fp
 8011edc:	d16e      	bne.n	8011fbc <_strtod_l+0x97c>
 8011ede:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ee0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011ee4:	b342      	cbz	r2, 8011f38 <_strtod_l+0x8f8>
 8011ee6:	4a32      	ldr	r2, [pc, #200]	; (8011fb0 <_strtod_l+0x970>)
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	d128      	bne.n	8011f3e <_strtod_l+0x8fe>
 8011eec:	9b04      	ldr	r3, [sp, #16]
 8011eee:	4650      	mov	r0, sl
 8011ef0:	b1eb      	cbz	r3, 8011f2e <_strtod_l+0x8ee>
 8011ef2:	4a2d      	ldr	r2, [pc, #180]	; (8011fa8 <_strtod_l+0x968>)
 8011ef4:	403a      	ands	r2, r7
 8011ef6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011efa:	f04f 31ff 	mov.w	r1, #4294967295
 8011efe:	d819      	bhi.n	8011f34 <_strtod_l+0x8f4>
 8011f00:	0d12      	lsrs	r2, r2, #20
 8011f02:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011f06:	fa01 f303 	lsl.w	r3, r1, r3
 8011f0a:	4298      	cmp	r0, r3
 8011f0c:	d117      	bne.n	8011f3e <_strtod_l+0x8fe>
 8011f0e:	4b29      	ldr	r3, [pc, #164]	; (8011fb4 <_strtod_l+0x974>)
 8011f10:	429f      	cmp	r7, r3
 8011f12:	d102      	bne.n	8011f1a <_strtod_l+0x8da>
 8011f14:	3001      	adds	r0, #1
 8011f16:	f43f addf 	beq.w	8011ad8 <_strtod_l+0x498>
 8011f1a:	4b23      	ldr	r3, [pc, #140]	; (8011fa8 <_strtod_l+0x968>)
 8011f1c:	403b      	ands	r3, r7
 8011f1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011f22:	f04f 0a00 	mov.w	sl, #0
 8011f26:	9b04      	ldr	r3, [sp, #16]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d1a0      	bne.n	8011e6e <_strtod_l+0x82e>
 8011f2c:	e5de      	b.n	8011aec <_strtod_l+0x4ac>
 8011f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f32:	e7ea      	b.n	8011f0a <_strtod_l+0x8ca>
 8011f34:	460b      	mov	r3, r1
 8011f36:	e7e8      	b.n	8011f0a <_strtod_l+0x8ca>
 8011f38:	ea53 030a 	orrs.w	r3, r3, sl
 8011f3c:	d088      	beq.n	8011e50 <_strtod_l+0x810>
 8011f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f40:	b1db      	cbz	r3, 8011f7a <_strtod_l+0x93a>
 8011f42:	423b      	tst	r3, r7
 8011f44:	d0ef      	beq.n	8011f26 <_strtod_l+0x8e6>
 8011f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f48:	9a04      	ldr	r2, [sp, #16]
 8011f4a:	4650      	mov	r0, sl
 8011f4c:	4659      	mov	r1, fp
 8011f4e:	b1c3      	cbz	r3, 8011f82 <_strtod_l+0x942>
 8011f50:	f7ff fb58 	bl	8011604 <sulp>
 8011f54:	4602      	mov	r2, r0
 8011f56:	460b      	mov	r3, r1
 8011f58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011f5c:	f7ee f996 	bl	800028c <__adddf3>
 8011f60:	4682      	mov	sl, r0
 8011f62:	468b      	mov	fp, r1
 8011f64:	e7df      	b.n	8011f26 <_strtod_l+0x8e6>
 8011f66:	4013      	ands	r3, r2
 8011f68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011f6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011f70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011f74:	f04f 3aff 	mov.w	sl, #4294967295
 8011f78:	e7d5      	b.n	8011f26 <_strtod_l+0x8e6>
 8011f7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f7c:	ea13 0f0a 	tst.w	r3, sl
 8011f80:	e7e0      	b.n	8011f44 <_strtod_l+0x904>
 8011f82:	f7ff fb3f 	bl	8011604 <sulp>
 8011f86:	4602      	mov	r2, r0
 8011f88:	460b      	mov	r3, r1
 8011f8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011f8e:	f7ee f97b 	bl	8000288 <__aeabi_dsub>
 8011f92:	2200      	movs	r2, #0
 8011f94:	2300      	movs	r3, #0
 8011f96:	4682      	mov	sl, r0
 8011f98:	468b      	mov	fp, r1
 8011f9a:	f7ee fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	d0c1      	beq.n	8011f26 <_strtod_l+0x8e6>
 8011fa2:	e60e      	b.n	8011bc2 <_strtod_l+0x582>
 8011fa4:	fffffc02 	.word	0xfffffc02
 8011fa8:	7ff00000 	.word	0x7ff00000
 8011fac:	39500000 	.word	0x39500000
 8011fb0:	000fffff 	.word	0x000fffff
 8011fb4:	7fefffff 	.word	0x7fefffff
 8011fb8:	080154c8 	.word	0x080154c8
 8011fbc:	4631      	mov	r1, r6
 8011fbe:	4628      	mov	r0, r5
 8011fc0:	f002 f820 	bl	8014004 <__ratio>
 8011fc4:	ec59 8b10 	vmov	r8, r9, d0
 8011fc8:	ee10 0a10 	vmov	r0, s0
 8011fcc:	2200      	movs	r2, #0
 8011fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011fd2:	4649      	mov	r1, r9
 8011fd4:	f7ee fd8c 	bl	8000af0 <__aeabi_dcmple>
 8011fd8:	2800      	cmp	r0, #0
 8011fda:	d07c      	beq.n	80120d6 <_strtod_l+0xa96>
 8011fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d04c      	beq.n	801207c <_strtod_l+0xa3c>
 8011fe2:	4b95      	ldr	r3, [pc, #596]	; (8012238 <_strtod_l+0xbf8>)
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011fea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8012238 <_strtod_l+0xbf8>
 8011fee:	f04f 0800 	mov.w	r8, #0
 8011ff2:	4b92      	ldr	r3, [pc, #584]	; (801223c <_strtod_l+0xbfc>)
 8011ff4:	403b      	ands	r3, r7
 8011ff6:	9311      	str	r3, [sp, #68]	; 0x44
 8011ff8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011ffa:	4b91      	ldr	r3, [pc, #580]	; (8012240 <_strtod_l+0xc00>)
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	f040 80b2 	bne.w	8012166 <_strtod_l+0xb26>
 8012002:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801200a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801200e:	ec4b ab10 	vmov	d0, sl, fp
 8012012:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012016:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801201a:	f001 ff1b 	bl	8013e54 <__ulp>
 801201e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012022:	ec53 2b10 	vmov	r2, r3, d0
 8012026:	f7ee fae7 	bl	80005f8 <__aeabi_dmul>
 801202a:	4652      	mov	r2, sl
 801202c:	465b      	mov	r3, fp
 801202e:	f7ee f92d 	bl	800028c <__adddf3>
 8012032:	460b      	mov	r3, r1
 8012034:	4981      	ldr	r1, [pc, #516]	; (801223c <_strtod_l+0xbfc>)
 8012036:	4a83      	ldr	r2, [pc, #524]	; (8012244 <_strtod_l+0xc04>)
 8012038:	4019      	ands	r1, r3
 801203a:	4291      	cmp	r1, r2
 801203c:	4682      	mov	sl, r0
 801203e:	d95e      	bls.n	80120fe <_strtod_l+0xabe>
 8012040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012042:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012046:	4293      	cmp	r3, r2
 8012048:	d103      	bne.n	8012052 <_strtod_l+0xa12>
 801204a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801204c:	3301      	adds	r3, #1
 801204e:	f43f ad43 	beq.w	8011ad8 <_strtod_l+0x498>
 8012052:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8012250 <_strtod_l+0xc10>
 8012056:	f04f 3aff 	mov.w	sl, #4294967295
 801205a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801205c:	4620      	mov	r0, r4
 801205e:	f001 fbcd 	bl	80137fc <_Bfree>
 8012062:	9907      	ldr	r1, [sp, #28]
 8012064:	4620      	mov	r0, r4
 8012066:	f001 fbc9 	bl	80137fc <_Bfree>
 801206a:	4631      	mov	r1, r6
 801206c:	4620      	mov	r0, r4
 801206e:	f001 fbc5 	bl	80137fc <_Bfree>
 8012072:	4629      	mov	r1, r5
 8012074:	4620      	mov	r0, r4
 8012076:	f001 fbc1 	bl	80137fc <_Bfree>
 801207a:	e613      	b.n	8011ca4 <_strtod_l+0x664>
 801207c:	f1ba 0f00 	cmp.w	sl, #0
 8012080:	d11b      	bne.n	80120ba <_strtod_l+0xa7a>
 8012082:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012086:	b9f3      	cbnz	r3, 80120c6 <_strtod_l+0xa86>
 8012088:	4b6b      	ldr	r3, [pc, #428]	; (8012238 <_strtod_l+0xbf8>)
 801208a:	2200      	movs	r2, #0
 801208c:	4640      	mov	r0, r8
 801208e:	4649      	mov	r1, r9
 8012090:	f7ee fd24 	bl	8000adc <__aeabi_dcmplt>
 8012094:	b9d0      	cbnz	r0, 80120cc <_strtod_l+0xa8c>
 8012096:	4640      	mov	r0, r8
 8012098:	4649      	mov	r1, r9
 801209a:	4b6b      	ldr	r3, [pc, #428]	; (8012248 <_strtod_l+0xc08>)
 801209c:	2200      	movs	r2, #0
 801209e:	f7ee faab 	bl	80005f8 <__aeabi_dmul>
 80120a2:	4680      	mov	r8, r0
 80120a4:	4689      	mov	r9, r1
 80120a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80120aa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80120ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80120b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80120b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80120b8:	e79b      	b.n	8011ff2 <_strtod_l+0x9b2>
 80120ba:	f1ba 0f01 	cmp.w	sl, #1
 80120be:	d102      	bne.n	80120c6 <_strtod_l+0xa86>
 80120c0:	2f00      	cmp	r7, #0
 80120c2:	f43f ad7e 	beq.w	8011bc2 <_strtod_l+0x582>
 80120c6:	4b61      	ldr	r3, [pc, #388]	; (801224c <_strtod_l+0xc0c>)
 80120c8:	2200      	movs	r2, #0
 80120ca:	e78c      	b.n	8011fe6 <_strtod_l+0x9a6>
 80120cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012248 <_strtod_l+0xc08>
 80120d0:	f04f 0800 	mov.w	r8, #0
 80120d4:	e7e7      	b.n	80120a6 <_strtod_l+0xa66>
 80120d6:	4b5c      	ldr	r3, [pc, #368]	; (8012248 <_strtod_l+0xc08>)
 80120d8:	4640      	mov	r0, r8
 80120da:	4649      	mov	r1, r9
 80120dc:	2200      	movs	r2, #0
 80120de:	f7ee fa8b 	bl	80005f8 <__aeabi_dmul>
 80120e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80120e4:	4680      	mov	r8, r0
 80120e6:	4689      	mov	r9, r1
 80120e8:	b933      	cbnz	r3, 80120f8 <_strtod_l+0xab8>
 80120ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120ee:	9012      	str	r0, [sp, #72]	; 0x48
 80120f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80120f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80120f6:	e7dd      	b.n	80120b4 <_strtod_l+0xa74>
 80120f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80120fc:	e7f9      	b.n	80120f2 <_strtod_l+0xab2>
 80120fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012102:	9b04      	ldr	r3, [sp, #16]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d1a8      	bne.n	801205a <_strtod_l+0xa1a>
 8012108:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801210c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801210e:	0d1b      	lsrs	r3, r3, #20
 8012110:	051b      	lsls	r3, r3, #20
 8012112:	429a      	cmp	r2, r3
 8012114:	d1a1      	bne.n	801205a <_strtod_l+0xa1a>
 8012116:	4640      	mov	r0, r8
 8012118:	4649      	mov	r1, r9
 801211a:	f7ee fdcd 	bl	8000cb8 <__aeabi_d2lz>
 801211e:	f7ee fa3d 	bl	800059c <__aeabi_l2d>
 8012122:	4602      	mov	r2, r0
 8012124:	460b      	mov	r3, r1
 8012126:	4640      	mov	r0, r8
 8012128:	4649      	mov	r1, r9
 801212a:	f7ee f8ad 	bl	8000288 <__aeabi_dsub>
 801212e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012130:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012134:	ea43 030a 	orr.w	r3, r3, sl
 8012138:	4313      	orrs	r3, r2
 801213a:	4680      	mov	r8, r0
 801213c:	4689      	mov	r9, r1
 801213e:	d053      	beq.n	80121e8 <_strtod_l+0xba8>
 8012140:	a335      	add	r3, pc, #212	; (adr r3, 8012218 <_strtod_l+0xbd8>)
 8012142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012146:	f7ee fcc9 	bl	8000adc <__aeabi_dcmplt>
 801214a:	2800      	cmp	r0, #0
 801214c:	f47f acce 	bne.w	8011aec <_strtod_l+0x4ac>
 8012150:	a333      	add	r3, pc, #204	; (adr r3, 8012220 <_strtod_l+0xbe0>)
 8012152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012156:	4640      	mov	r0, r8
 8012158:	4649      	mov	r1, r9
 801215a:	f7ee fcdd 	bl	8000b18 <__aeabi_dcmpgt>
 801215e:	2800      	cmp	r0, #0
 8012160:	f43f af7b 	beq.w	801205a <_strtod_l+0xa1a>
 8012164:	e4c2      	b.n	8011aec <_strtod_l+0x4ac>
 8012166:	9b04      	ldr	r3, [sp, #16]
 8012168:	b333      	cbz	r3, 80121b8 <_strtod_l+0xb78>
 801216a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801216c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012170:	d822      	bhi.n	80121b8 <_strtod_l+0xb78>
 8012172:	a32d      	add	r3, pc, #180	; (adr r3, 8012228 <_strtod_l+0xbe8>)
 8012174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012178:	4640      	mov	r0, r8
 801217a:	4649      	mov	r1, r9
 801217c:	f7ee fcb8 	bl	8000af0 <__aeabi_dcmple>
 8012180:	b1a0      	cbz	r0, 80121ac <_strtod_l+0xb6c>
 8012182:	4649      	mov	r1, r9
 8012184:	4640      	mov	r0, r8
 8012186:	f7ee fd0f 	bl	8000ba8 <__aeabi_d2uiz>
 801218a:	2801      	cmp	r0, #1
 801218c:	bf38      	it	cc
 801218e:	2001      	movcc	r0, #1
 8012190:	f7ee f9b8 	bl	8000504 <__aeabi_ui2d>
 8012194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012196:	4680      	mov	r8, r0
 8012198:	4689      	mov	r9, r1
 801219a:	bb13      	cbnz	r3, 80121e2 <_strtod_l+0xba2>
 801219c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121a0:	9014      	str	r0, [sp, #80]	; 0x50
 80121a2:	9315      	str	r3, [sp, #84]	; 0x54
 80121a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80121a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80121ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80121b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80121b4:	1a9b      	subs	r3, r3, r2
 80121b6:	930d      	str	r3, [sp, #52]	; 0x34
 80121b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80121bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80121c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80121c4:	f001 fe46 	bl	8013e54 <__ulp>
 80121c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80121cc:	ec53 2b10 	vmov	r2, r3, d0
 80121d0:	f7ee fa12 	bl	80005f8 <__aeabi_dmul>
 80121d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80121d8:	f7ee f858 	bl	800028c <__adddf3>
 80121dc:	4682      	mov	sl, r0
 80121de:	468b      	mov	fp, r1
 80121e0:	e78f      	b.n	8012102 <_strtod_l+0xac2>
 80121e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80121e6:	e7dd      	b.n	80121a4 <_strtod_l+0xb64>
 80121e8:	a311      	add	r3, pc, #68	; (adr r3, 8012230 <_strtod_l+0xbf0>)
 80121ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ee:	f7ee fc75 	bl	8000adc <__aeabi_dcmplt>
 80121f2:	e7b4      	b.n	801215e <_strtod_l+0xb1e>
 80121f4:	2300      	movs	r3, #0
 80121f6:	930e      	str	r3, [sp, #56]	; 0x38
 80121f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80121fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80121fc:	6013      	str	r3, [r2, #0]
 80121fe:	f7ff ba65 	b.w	80116cc <_strtod_l+0x8c>
 8012202:	2b65      	cmp	r3, #101	; 0x65
 8012204:	f43f ab5d 	beq.w	80118c2 <_strtod_l+0x282>
 8012208:	2b45      	cmp	r3, #69	; 0x45
 801220a:	f43f ab5a 	beq.w	80118c2 <_strtod_l+0x282>
 801220e:	2201      	movs	r2, #1
 8012210:	f7ff bb92 	b.w	8011938 <_strtod_l+0x2f8>
 8012214:	f3af 8000 	nop.w
 8012218:	94a03595 	.word	0x94a03595
 801221c:	3fdfffff 	.word	0x3fdfffff
 8012220:	35afe535 	.word	0x35afe535
 8012224:	3fe00000 	.word	0x3fe00000
 8012228:	ffc00000 	.word	0xffc00000
 801222c:	41dfffff 	.word	0x41dfffff
 8012230:	94a03595 	.word	0x94a03595
 8012234:	3fcfffff 	.word	0x3fcfffff
 8012238:	3ff00000 	.word	0x3ff00000
 801223c:	7ff00000 	.word	0x7ff00000
 8012240:	7fe00000 	.word	0x7fe00000
 8012244:	7c9fffff 	.word	0x7c9fffff
 8012248:	3fe00000 	.word	0x3fe00000
 801224c:	bff00000 	.word	0xbff00000
 8012250:	7fefffff 	.word	0x7fefffff

08012254 <_strtod_r>:
 8012254:	4b01      	ldr	r3, [pc, #4]	; (801225c <_strtod_r+0x8>)
 8012256:	f7ff b9f3 	b.w	8011640 <_strtod_l>
 801225a:	bf00      	nop
 801225c:	20000200 	.word	0x20000200

08012260 <_strtol_l.isra.0>:
 8012260:	2b01      	cmp	r3, #1
 8012262:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012266:	d001      	beq.n	801226c <_strtol_l.isra.0+0xc>
 8012268:	2b24      	cmp	r3, #36	; 0x24
 801226a:	d906      	bls.n	801227a <_strtol_l.isra.0+0x1a>
 801226c:	f7fe fab6 	bl	80107dc <__errno>
 8012270:	2316      	movs	r3, #22
 8012272:	6003      	str	r3, [r0, #0]
 8012274:	2000      	movs	r0, #0
 8012276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801227a:	4f3a      	ldr	r7, [pc, #232]	; (8012364 <_strtol_l.isra.0+0x104>)
 801227c:	468e      	mov	lr, r1
 801227e:	4676      	mov	r6, lr
 8012280:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8012284:	5de5      	ldrb	r5, [r4, r7]
 8012286:	f015 0508 	ands.w	r5, r5, #8
 801228a:	d1f8      	bne.n	801227e <_strtol_l.isra.0+0x1e>
 801228c:	2c2d      	cmp	r4, #45	; 0x2d
 801228e:	d134      	bne.n	80122fa <_strtol_l.isra.0+0x9a>
 8012290:	f89e 4000 	ldrb.w	r4, [lr]
 8012294:	f04f 0801 	mov.w	r8, #1
 8012298:	f106 0e02 	add.w	lr, r6, #2
 801229c:	2b00      	cmp	r3, #0
 801229e:	d05c      	beq.n	801235a <_strtol_l.isra.0+0xfa>
 80122a0:	2b10      	cmp	r3, #16
 80122a2:	d10c      	bne.n	80122be <_strtol_l.isra.0+0x5e>
 80122a4:	2c30      	cmp	r4, #48	; 0x30
 80122a6:	d10a      	bne.n	80122be <_strtol_l.isra.0+0x5e>
 80122a8:	f89e 4000 	ldrb.w	r4, [lr]
 80122ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80122b0:	2c58      	cmp	r4, #88	; 0x58
 80122b2:	d14d      	bne.n	8012350 <_strtol_l.isra.0+0xf0>
 80122b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80122b8:	2310      	movs	r3, #16
 80122ba:	f10e 0e02 	add.w	lr, lr, #2
 80122be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80122c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80122c6:	2600      	movs	r6, #0
 80122c8:	fbbc f9f3 	udiv	r9, ip, r3
 80122cc:	4635      	mov	r5, r6
 80122ce:	fb03 ca19 	mls	sl, r3, r9, ip
 80122d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80122d6:	2f09      	cmp	r7, #9
 80122d8:	d818      	bhi.n	801230c <_strtol_l.isra.0+0xac>
 80122da:	463c      	mov	r4, r7
 80122dc:	42a3      	cmp	r3, r4
 80122de:	dd24      	ble.n	801232a <_strtol_l.isra.0+0xca>
 80122e0:	2e00      	cmp	r6, #0
 80122e2:	db1f      	blt.n	8012324 <_strtol_l.isra.0+0xc4>
 80122e4:	45a9      	cmp	r9, r5
 80122e6:	d31d      	bcc.n	8012324 <_strtol_l.isra.0+0xc4>
 80122e8:	d101      	bne.n	80122ee <_strtol_l.isra.0+0x8e>
 80122ea:	45a2      	cmp	sl, r4
 80122ec:	db1a      	blt.n	8012324 <_strtol_l.isra.0+0xc4>
 80122ee:	fb05 4503 	mla	r5, r5, r3, r4
 80122f2:	2601      	movs	r6, #1
 80122f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80122f8:	e7eb      	b.n	80122d2 <_strtol_l.isra.0+0x72>
 80122fa:	2c2b      	cmp	r4, #43	; 0x2b
 80122fc:	bf08      	it	eq
 80122fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8012302:	46a8      	mov	r8, r5
 8012304:	bf08      	it	eq
 8012306:	f106 0e02 	addeq.w	lr, r6, #2
 801230a:	e7c7      	b.n	801229c <_strtol_l.isra.0+0x3c>
 801230c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012310:	2f19      	cmp	r7, #25
 8012312:	d801      	bhi.n	8012318 <_strtol_l.isra.0+0xb8>
 8012314:	3c37      	subs	r4, #55	; 0x37
 8012316:	e7e1      	b.n	80122dc <_strtol_l.isra.0+0x7c>
 8012318:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801231c:	2f19      	cmp	r7, #25
 801231e:	d804      	bhi.n	801232a <_strtol_l.isra.0+0xca>
 8012320:	3c57      	subs	r4, #87	; 0x57
 8012322:	e7db      	b.n	80122dc <_strtol_l.isra.0+0x7c>
 8012324:	f04f 36ff 	mov.w	r6, #4294967295
 8012328:	e7e4      	b.n	80122f4 <_strtol_l.isra.0+0x94>
 801232a:	2e00      	cmp	r6, #0
 801232c:	da05      	bge.n	801233a <_strtol_l.isra.0+0xda>
 801232e:	2322      	movs	r3, #34	; 0x22
 8012330:	6003      	str	r3, [r0, #0]
 8012332:	4665      	mov	r5, ip
 8012334:	b942      	cbnz	r2, 8012348 <_strtol_l.isra.0+0xe8>
 8012336:	4628      	mov	r0, r5
 8012338:	e79d      	b.n	8012276 <_strtol_l.isra.0+0x16>
 801233a:	f1b8 0f00 	cmp.w	r8, #0
 801233e:	d000      	beq.n	8012342 <_strtol_l.isra.0+0xe2>
 8012340:	426d      	negs	r5, r5
 8012342:	2a00      	cmp	r2, #0
 8012344:	d0f7      	beq.n	8012336 <_strtol_l.isra.0+0xd6>
 8012346:	b10e      	cbz	r6, 801234c <_strtol_l.isra.0+0xec>
 8012348:	f10e 31ff 	add.w	r1, lr, #4294967295
 801234c:	6011      	str	r1, [r2, #0]
 801234e:	e7f2      	b.n	8012336 <_strtol_l.isra.0+0xd6>
 8012350:	2430      	movs	r4, #48	; 0x30
 8012352:	2b00      	cmp	r3, #0
 8012354:	d1b3      	bne.n	80122be <_strtol_l.isra.0+0x5e>
 8012356:	2308      	movs	r3, #8
 8012358:	e7b1      	b.n	80122be <_strtol_l.isra.0+0x5e>
 801235a:	2c30      	cmp	r4, #48	; 0x30
 801235c:	d0a4      	beq.n	80122a8 <_strtol_l.isra.0+0x48>
 801235e:	230a      	movs	r3, #10
 8012360:	e7ad      	b.n	80122be <_strtol_l.isra.0+0x5e>
 8012362:	bf00      	nop
 8012364:	080154f1 	.word	0x080154f1

08012368 <_strtol_r>:
 8012368:	f7ff bf7a 	b.w	8012260 <_strtol_l.isra.0>

0801236c <quorem>:
 801236c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012370:	6903      	ldr	r3, [r0, #16]
 8012372:	690c      	ldr	r4, [r1, #16]
 8012374:	42a3      	cmp	r3, r4
 8012376:	4607      	mov	r7, r0
 8012378:	f2c0 8081 	blt.w	801247e <quorem+0x112>
 801237c:	3c01      	subs	r4, #1
 801237e:	f101 0814 	add.w	r8, r1, #20
 8012382:	f100 0514 	add.w	r5, r0, #20
 8012386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801238a:	9301      	str	r3, [sp, #4]
 801238c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012394:	3301      	adds	r3, #1
 8012396:	429a      	cmp	r2, r3
 8012398:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801239c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80123a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80123a4:	d331      	bcc.n	801240a <quorem+0x9e>
 80123a6:	f04f 0e00 	mov.w	lr, #0
 80123aa:	4640      	mov	r0, r8
 80123ac:	46ac      	mov	ip, r5
 80123ae:	46f2      	mov	sl, lr
 80123b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80123b4:	b293      	uxth	r3, r2
 80123b6:	fb06 e303 	mla	r3, r6, r3, lr
 80123ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80123be:	b29b      	uxth	r3, r3
 80123c0:	ebaa 0303 	sub.w	r3, sl, r3
 80123c4:	0c12      	lsrs	r2, r2, #16
 80123c6:	f8dc a000 	ldr.w	sl, [ip]
 80123ca:	fb06 e202 	mla	r2, r6, r2, lr
 80123ce:	fa13 f38a 	uxtah	r3, r3, sl
 80123d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80123d6:	fa1f fa82 	uxth.w	sl, r2
 80123da:	f8dc 2000 	ldr.w	r2, [ip]
 80123de:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80123e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123ec:	4581      	cmp	r9, r0
 80123ee:	f84c 3b04 	str.w	r3, [ip], #4
 80123f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80123f6:	d2db      	bcs.n	80123b0 <quorem+0x44>
 80123f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80123fc:	b92b      	cbnz	r3, 801240a <quorem+0x9e>
 80123fe:	9b01      	ldr	r3, [sp, #4]
 8012400:	3b04      	subs	r3, #4
 8012402:	429d      	cmp	r5, r3
 8012404:	461a      	mov	r2, r3
 8012406:	d32e      	bcc.n	8012466 <quorem+0xfa>
 8012408:	613c      	str	r4, [r7, #16]
 801240a:	4638      	mov	r0, r7
 801240c:	f001 fc7e 	bl	8013d0c <__mcmp>
 8012410:	2800      	cmp	r0, #0
 8012412:	db24      	blt.n	801245e <quorem+0xf2>
 8012414:	3601      	adds	r6, #1
 8012416:	4628      	mov	r0, r5
 8012418:	f04f 0c00 	mov.w	ip, #0
 801241c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012420:	f8d0 e000 	ldr.w	lr, [r0]
 8012424:	b293      	uxth	r3, r2
 8012426:	ebac 0303 	sub.w	r3, ip, r3
 801242a:	0c12      	lsrs	r2, r2, #16
 801242c:	fa13 f38e 	uxtah	r3, r3, lr
 8012430:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012438:	b29b      	uxth	r3, r3
 801243a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801243e:	45c1      	cmp	r9, r8
 8012440:	f840 3b04 	str.w	r3, [r0], #4
 8012444:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012448:	d2e8      	bcs.n	801241c <quorem+0xb0>
 801244a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801244e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012452:	b922      	cbnz	r2, 801245e <quorem+0xf2>
 8012454:	3b04      	subs	r3, #4
 8012456:	429d      	cmp	r5, r3
 8012458:	461a      	mov	r2, r3
 801245a:	d30a      	bcc.n	8012472 <quorem+0x106>
 801245c:	613c      	str	r4, [r7, #16]
 801245e:	4630      	mov	r0, r6
 8012460:	b003      	add	sp, #12
 8012462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012466:	6812      	ldr	r2, [r2, #0]
 8012468:	3b04      	subs	r3, #4
 801246a:	2a00      	cmp	r2, #0
 801246c:	d1cc      	bne.n	8012408 <quorem+0x9c>
 801246e:	3c01      	subs	r4, #1
 8012470:	e7c7      	b.n	8012402 <quorem+0x96>
 8012472:	6812      	ldr	r2, [r2, #0]
 8012474:	3b04      	subs	r3, #4
 8012476:	2a00      	cmp	r2, #0
 8012478:	d1f0      	bne.n	801245c <quorem+0xf0>
 801247a:	3c01      	subs	r4, #1
 801247c:	e7eb      	b.n	8012456 <quorem+0xea>
 801247e:	2000      	movs	r0, #0
 8012480:	e7ee      	b.n	8012460 <quorem+0xf4>
 8012482:	0000      	movs	r0, r0
 8012484:	0000      	movs	r0, r0
	...

08012488 <_dtoa_r>:
 8012488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248c:	ed2d 8b02 	vpush	{d8}
 8012490:	ec57 6b10 	vmov	r6, r7, d0
 8012494:	b095      	sub	sp, #84	; 0x54
 8012496:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012498:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801249c:	9105      	str	r1, [sp, #20]
 801249e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80124a2:	4604      	mov	r4, r0
 80124a4:	9209      	str	r2, [sp, #36]	; 0x24
 80124a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80124a8:	b975      	cbnz	r5, 80124c8 <_dtoa_r+0x40>
 80124aa:	2010      	movs	r0, #16
 80124ac:	f001 f94c 	bl	8013748 <malloc>
 80124b0:	4602      	mov	r2, r0
 80124b2:	6260      	str	r0, [r4, #36]	; 0x24
 80124b4:	b920      	cbnz	r0, 80124c0 <_dtoa_r+0x38>
 80124b6:	4bb2      	ldr	r3, [pc, #712]	; (8012780 <_dtoa_r+0x2f8>)
 80124b8:	21ea      	movs	r1, #234	; 0xea
 80124ba:	48b2      	ldr	r0, [pc, #712]	; (8012784 <_dtoa_r+0x2fc>)
 80124bc:	f002 f868 	bl	8014590 <__assert_func>
 80124c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80124c4:	6005      	str	r5, [r0, #0]
 80124c6:	60c5      	str	r5, [r0, #12]
 80124c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124ca:	6819      	ldr	r1, [r3, #0]
 80124cc:	b151      	cbz	r1, 80124e4 <_dtoa_r+0x5c>
 80124ce:	685a      	ldr	r2, [r3, #4]
 80124d0:	604a      	str	r2, [r1, #4]
 80124d2:	2301      	movs	r3, #1
 80124d4:	4093      	lsls	r3, r2
 80124d6:	608b      	str	r3, [r1, #8]
 80124d8:	4620      	mov	r0, r4
 80124da:	f001 f98f 	bl	80137fc <_Bfree>
 80124de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124e0:	2200      	movs	r2, #0
 80124e2:	601a      	str	r2, [r3, #0]
 80124e4:	1e3b      	subs	r3, r7, #0
 80124e6:	bfb9      	ittee	lt
 80124e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80124ec:	9303      	strlt	r3, [sp, #12]
 80124ee:	2300      	movge	r3, #0
 80124f0:	f8c8 3000 	strge.w	r3, [r8]
 80124f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80124f8:	4ba3      	ldr	r3, [pc, #652]	; (8012788 <_dtoa_r+0x300>)
 80124fa:	bfbc      	itt	lt
 80124fc:	2201      	movlt	r2, #1
 80124fe:	f8c8 2000 	strlt.w	r2, [r8]
 8012502:	ea33 0309 	bics.w	r3, r3, r9
 8012506:	d11b      	bne.n	8012540 <_dtoa_r+0xb8>
 8012508:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801250a:	f242 730f 	movw	r3, #9999	; 0x270f
 801250e:	6013      	str	r3, [r2, #0]
 8012510:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012514:	4333      	orrs	r3, r6
 8012516:	f000 857a 	beq.w	801300e <_dtoa_r+0xb86>
 801251a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801251c:	b963      	cbnz	r3, 8012538 <_dtoa_r+0xb0>
 801251e:	4b9b      	ldr	r3, [pc, #620]	; (801278c <_dtoa_r+0x304>)
 8012520:	e024      	b.n	801256c <_dtoa_r+0xe4>
 8012522:	4b9b      	ldr	r3, [pc, #620]	; (8012790 <_dtoa_r+0x308>)
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	3308      	adds	r3, #8
 8012528:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801252a:	6013      	str	r3, [r2, #0]
 801252c:	9800      	ldr	r0, [sp, #0]
 801252e:	b015      	add	sp, #84	; 0x54
 8012530:	ecbd 8b02 	vpop	{d8}
 8012534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012538:	4b94      	ldr	r3, [pc, #592]	; (801278c <_dtoa_r+0x304>)
 801253a:	9300      	str	r3, [sp, #0]
 801253c:	3303      	adds	r3, #3
 801253e:	e7f3      	b.n	8012528 <_dtoa_r+0xa0>
 8012540:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012544:	2200      	movs	r2, #0
 8012546:	ec51 0b17 	vmov	r0, r1, d7
 801254a:	2300      	movs	r3, #0
 801254c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012550:	f7ee faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8012554:	4680      	mov	r8, r0
 8012556:	b158      	cbz	r0, 8012570 <_dtoa_r+0xe8>
 8012558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801255a:	2301      	movs	r3, #1
 801255c:	6013      	str	r3, [r2, #0]
 801255e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012560:	2b00      	cmp	r3, #0
 8012562:	f000 8551 	beq.w	8013008 <_dtoa_r+0xb80>
 8012566:	488b      	ldr	r0, [pc, #556]	; (8012794 <_dtoa_r+0x30c>)
 8012568:	6018      	str	r0, [r3, #0]
 801256a:	1e43      	subs	r3, r0, #1
 801256c:	9300      	str	r3, [sp, #0]
 801256e:	e7dd      	b.n	801252c <_dtoa_r+0xa4>
 8012570:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012574:	aa12      	add	r2, sp, #72	; 0x48
 8012576:	a913      	add	r1, sp, #76	; 0x4c
 8012578:	4620      	mov	r0, r4
 801257a:	f001 fce7 	bl	8013f4c <__d2b>
 801257e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012582:	4683      	mov	fp, r0
 8012584:	2d00      	cmp	r5, #0
 8012586:	d07c      	beq.n	8012682 <_dtoa_r+0x1fa>
 8012588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801258a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801258e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012592:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012596:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801259a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801259e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80125a2:	4b7d      	ldr	r3, [pc, #500]	; (8012798 <_dtoa_r+0x310>)
 80125a4:	2200      	movs	r2, #0
 80125a6:	4630      	mov	r0, r6
 80125a8:	4639      	mov	r1, r7
 80125aa:	f7ed fe6d 	bl	8000288 <__aeabi_dsub>
 80125ae:	a36e      	add	r3, pc, #440	; (adr r3, 8012768 <_dtoa_r+0x2e0>)
 80125b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b4:	f7ee f820 	bl	80005f8 <__aeabi_dmul>
 80125b8:	a36d      	add	r3, pc, #436	; (adr r3, 8012770 <_dtoa_r+0x2e8>)
 80125ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125be:	f7ed fe65 	bl	800028c <__adddf3>
 80125c2:	4606      	mov	r6, r0
 80125c4:	4628      	mov	r0, r5
 80125c6:	460f      	mov	r7, r1
 80125c8:	f7ed ffac 	bl	8000524 <__aeabi_i2d>
 80125cc:	a36a      	add	r3, pc, #424	; (adr r3, 8012778 <_dtoa_r+0x2f0>)
 80125ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d2:	f7ee f811 	bl	80005f8 <__aeabi_dmul>
 80125d6:	4602      	mov	r2, r0
 80125d8:	460b      	mov	r3, r1
 80125da:	4630      	mov	r0, r6
 80125dc:	4639      	mov	r1, r7
 80125de:	f7ed fe55 	bl	800028c <__adddf3>
 80125e2:	4606      	mov	r6, r0
 80125e4:	460f      	mov	r7, r1
 80125e6:	f7ee fab7 	bl	8000b58 <__aeabi_d2iz>
 80125ea:	2200      	movs	r2, #0
 80125ec:	4682      	mov	sl, r0
 80125ee:	2300      	movs	r3, #0
 80125f0:	4630      	mov	r0, r6
 80125f2:	4639      	mov	r1, r7
 80125f4:	f7ee fa72 	bl	8000adc <__aeabi_dcmplt>
 80125f8:	b148      	cbz	r0, 801260e <_dtoa_r+0x186>
 80125fa:	4650      	mov	r0, sl
 80125fc:	f7ed ff92 	bl	8000524 <__aeabi_i2d>
 8012600:	4632      	mov	r2, r6
 8012602:	463b      	mov	r3, r7
 8012604:	f7ee fa60 	bl	8000ac8 <__aeabi_dcmpeq>
 8012608:	b908      	cbnz	r0, 801260e <_dtoa_r+0x186>
 801260a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801260e:	f1ba 0f16 	cmp.w	sl, #22
 8012612:	d854      	bhi.n	80126be <_dtoa_r+0x236>
 8012614:	4b61      	ldr	r3, [pc, #388]	; (801279c <_dtoa_r+0x314>)
 8012616:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012622:	f7ee fa5b 	bl	8000adc <__aeabi_dcmplt>
 8012626:	2800      	cmp	r0, #0
 8012628:	d04b      	beq.n	80126c2 <_dtoa_r+0x23a>
 801262a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801262e:	2300      	movs	r3, #0
 8012630:	930e      	str	r3, [sp, #56]	; 0x38
 8012632:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012634:	1b5d      	subs	r5, r3, r5
 8012636:	1e6b      	subs	r3, r5, #1
 8012638:	9304      	str	r3, [sp, #16]
 801263a:	bf43      	ittte	mi
 801263c:	2300      	movmi	r3, #0
 801263e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012642:	9304      	strmi	r3, [sp, #16]
 8012644:	f04f 0800 	movpl.w	r8, #0
 8012648:	f1ba 0f00 	cmp.w	sl, #0
 801264c:	db3b      	blt.n	80126c6 <_dtoa_r+0x23e>
 801264e:	9b04      	ldr	r3, [sp, #16]
 8012650:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012654:	4453      	add	r3, sl
 8012656:	9304      	str	r3, [sp, #16]
 8012658:	2300      	movs	r3, #0
 801265a:	9306      	str	r3, [sp, #24]
 801265c:	9b05      	ldr	r3, [sp, #20]
 801265e:	2b09      	cmp	r3, #9
 8012660:	d869      	bhi.n	8012736 <_dtoa_r+0x2ae>
 8012662:	2b05      	cmp	r3, #5
 8012664:	bfc4      	itt	gt
 8012666:	3b04      	subgt	r3, #4
 8012668:	9305      	strgt	r3, [sp, #20]
 801266a:	9b05      	ldr	r3, [sp, #20]
 801266c:	f1a3 0302 	sub.w	r3, r3, #2
 8012670:	bfcc      	ite	gt
 8012672:	2500      	movgt	r5, #0
 8012674:	2501      	movle	r5, #1
 8012676:	2b03      	cmp	r3, #3
 8012678:	d869      	bhi.n	801274e <_dtoa_r+0x2c6>
 801267a:	e8df f003 	tbb	[pc, r3]
 801267e:	4e2c      	.short	0x4e2c
 8012680:	5a4c      	.short	0x5a4c
 8012682:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012686:	441d      	add	r5, r3
 8012688:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801268c:	2b20      	cmp	r3, #32
 801268e:	bfc1      	itttt	gt
 8012690:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012694:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012698:	fa09 f303 	lslgt.w	r3, r9, r3
 801269c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80126a0:	bfda      	itte	le
 80126a2:	f1c3 0320 	rsble	r3, r3, #32
 80126a6:	fa06 f003 	lslle.w	r0, r6, r3
 80126aa:	4318      	orrgt	r0, r3
 80126ac:	f7ed ff2a 	bl	8000504 <__aeabi_ui2d>
 80126b0:	2301      	movs	r3, #1
 80126b2:	4606      	mov	r6, r0
 80126b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80126b8:	3d01      	subs	r5, #1
 80126ba:	9310      	str	r3, [sp, #64]	; 0x40
 80126bc:	e771      	b.n	80125a2 <_dtoa_r+0x11a>
 80126be:	2301      	movs	r3, #1
 80126c0:	e7b6      	b.n	8012630 <_dtoa_r+0x1a8>
 80126c2:	900e      	str	r0, [sp, #56]	; 0x38
 80126c4:	e7b5      	b.n	8012632 <_dtoa_r+0x1aa>
 80126c6:	f1ca 0300 	rsb	r3, sl, #0
 80126ca:	9306      	str	r3, [sp, #24]
 80126cc:	2300      	movs	r3, #0
 80126ce:	eba8 080a 	sub.w	r8, r8, sl
 80126d2:	930d      	str	r3, [sp, #52]	; 0x34
 80126d4:	e7c2      	b.n	801265c <_dtoa_r+0x1d4>
 80126d6:	2300      	movs	r3, #0
 80126d8:	9308      	str	r3, [sp, #32]
 80126da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126dc:	2b00      	cmp	r3, #0
 80126de:	dc39      	bgt.n	8012754 <_dtoa_r+0x2cc>
 80126e0:	f04f 0901 	mov.w	r9, #1
 80126e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80126e8:	464b      	mov	r3, r9
 80126ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80126ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80126f0:	2200      	movs	r2, #0
 80126f2:	6042      	str	r2, [r0, #4]
 80126f4:	2204      	movs	r2, #4
 80126f6:	f102 0614 	add.w	r6, r2, #20
 80126fa:	429e      	cmp	r6, r3
 80126fc:	6841      	ldr	r1, [r0, #4]
 80126fe:	d92f      	bls.n	8012760 <_dtoa_r+0x2d8>
 8012700:	4620      	mov	r0, r4
 8012702:	f001 f83b 	bl	801377c <_Balloc>
 8012706:	9000      	str	r0, [sp, #0]
 8012708:	2800      	cmp	r0, #0
 801270a:	d14b      	bne.n	80127a4 <_dtoa_r+0x31c>
 801270c:	4b24      	ldr	r3, [pc, #144]	; (80127a0 <_dtoa_r+0x318>)
 801270e:	4602      	mov	r2, r0
 8012710:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012714:	e6d1      	b.n	80124ba <_dtoa_r+0x32>
 8012716:	2301      	movs	r3, #1
 8012718:	e7de      	b.n	80126d8 <_dtoa_r+0x250>
 801271a:	2300      	movs	r3, #0
 801271c:	9308      	str	r3, [sp, #32]
 801271e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012720:	eb0a 0903 	add.w	r9, sl, r3
 8012724:	f109 0301 	add.w	r3, r9, #1
 8012728:	2b01      	cmp	r3, #1
 801272a:	9301      	str	r3, [sp, #4]
 801272c:	bfb8      	it	lt
 801272e:	2301      	movlt	r3, #1
 8012730:	e7dd      	b.n	80126ee <_dtoa_r+0x266>
 8012732:	2301      	movs	r3, #1
 8012734:	e7f2      	b.n	801271c <_dtoa_r+0x294>
 8012736:	2501      	movs	r5, #1
 8012738:	2300      	movs	r3, #0
 801273a:	9305      	str	r3, [sp, #20]
 801273c:	9508      	str	r5, [sp, #32]
 801273e:	f04f 39ff 	mov.w	r9, #4294967295
 8012742:	2200      	movs	r2, #0
 8012744:	f8cd 9004 	str.w	r9, [sp, #4]
 8012748:	2312      	movs	r3, #18
 801274a:	9209      	str	r2, [sp, #36]	; 0x24
 801274c:	e7cf      	b.n	80126ee <_dtoa_r+0x266>
 801274e:	2301      	movs	r3, #1
 8012750:	9308      	str	r3, [sp, #32]
 8012752:	e7f4      	b.n	801273e <_dtoa_r+0x2b6>
 8012754:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8012758:	f8cd 9004 	str.w	r9, [sp, #4]
 801275c:	464b      	mov	r3, r9
 801275e:	e7c6      	b.n	80126ee <_dtoa_r+0x266>
 8012760:	3101      	adds	r1, #1
 8012762:	6041      	str	r1, [r0, #4]
 8012764:	0052      	lsls	r2, r2, #1
 8012766:	e7c6      	b.n	80126f6 <_dtoa_r+0x26e>
 8012768:	636f4361 	.word	0x636f4361
 801276c:	3fd287a7 	.word	0x3fd287a7
 8012770:	8b60c8b3 	.word	0x8b60c8b3
 8012774:	3fc68a28 	.word	0x3fc68a28
 8012778:	509f79fb 	.word	0x509f79fb
 801277c:	3fd34413 	.word	0x3fd34413
 8012780:	080155fe 	.word	0x080155fe
 8012784:	08015615 	.word	0x08015615
 8012788:	7ff00000 	.word	0x7ff00000
 801278c:	080155fa 	.word	0x080155fa
 8012790:	080155f1 	.word	0x080155f1
 8012794:	08015471 	.word	0x08015471
 8012798:	3ff80000 	.word	0x3ff80000
 801279c:	08015790 	.word	0x08015790
 80127a0:	08015674 	.word	0x08015674
 80127a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127a6:	9a00      	ldr	r2, [sp, #0]
 80127a8:	601a      	str	r2, [r3, #0]
 80127aa:	9b01      	ldr	r3, [sp, #4]
 80127ac:	2b0e      	cmp	r3, #14
 80127ae:	f200 80ad 	bhi.w	801290c <_dtoa_r+0x484>
 80127b2:	2d00      	cmp	r5, #0
 80127b4:	f000 80aa 	beq.w	801290c <_dtoa_r+0x484>
 80127b8:	f1ba 0f00 	cmp.w	sl, #0
 80127bc:	dd36      	ble.n	801282c <_dtoa_r+0x3a4>
 80127be:	4ac3      	ldr	r2, [pc, #780]	; (8012acc <_dtoa_r+0x644>)
 80127c0:	f00a 030f 	and.w	r3, sl, #15
 80127c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80127c8:	ed93 7b00 	vldr	d7, [r3]
 80127cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80127d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80127d4:	eeb0 8a47 	vmov.f32	s16, s14
 80127d8:	eef0 8a67 	vmov.f32	s17, s15
 80127dc:	d016      	beq.n	801280c <_dtoa_r+0x384>
 80127de:	4bbc      	ldr	r3, [pc, #752]	; (8012ad0 <_dtoa_r+0x648>)
 80127e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80127e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80127e8:	f7ee f830 	bl	800084c <__aeabi_ddiv>
 80127ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127f0:	f007 070f 	and.w	r7, r7, #15
 80127f4:	2503      	movs	r5, #3
 80127f6:	4eb6      	ldr	r6, [pc, #728]	; (8012ad0 <_dtoa_r+0x648>)
 80127f8:	b957      	cbnz	r7, 8012810 <_dtoa_r+0x388>
 80127fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127fe:	ec53 2b18 	vmov	r2, r3, d8
 8012802:	f7ee f823 	bl	800084c <__aeabi_ddiv>
 8012806:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801280a:	e029      	b.n	8012860 <_dtoa_r+0x3d8>
 801280c:	2502      	movs	r5, #2
 801280e:	e7f2      	b.n	80127f6 <_dtoa_r+0x36e>
 8012810:	07f9      	lsls	r1, r7, #31
 8012812:	d508      	bpl.n	8012826 <_dtoa_r+0x39e>
 8012814:	ec51 0b18 	vmov	r0, r1, d8
 8012818:	e9d6 2300 	ldrd	r2, r3, [r6]
 801281c:	f7ed feec 	bl	80005f8 <__aeabi_dmul>
 8012820:	ec41 0b18 	vmov	d8, r0, r1
 8012824:	3501      	adds	r5, #1
 8012826:	107f      	asrs	r7, r7, #1
 8012828:	3608      	adds	r6, #8
 801282a:	e7e5      	b.n	80127f8 <_dtoa_r+0x370>
 801282c:	f000 80a6 	beq.w	801297c <_dtoa_r+0x4f4>
 8012830:	f1ca 0600 	rsb	r6, sl, #0
 8012834:	4ba5      	ldr	r3, [pc, #660]	; (8012acc <_dtoa_r+0x644>)
 8012836:	4fa6      	ldr	r7, [pc, #664]	; (8012ad0 <_dtoa_r+0x648>)
 8012838:	f006 020f 	and.w	r2, r6, #15
 801283c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012844:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012848:	f7ed fed6 	bl	80005f8 <__aeabi_dmul>
 801284c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012850:	1136      	asrs	r6, r6, #4
 8012852:	2300      	movs	r3, #0
 8012854:	2502      	movs	r5, #2
 8012856:	2e00      	cmp	r6, #0
 8012858:	f040 8085 	bne.w	8012966 <_dtoa_r+0x4de>
 801285c:	2b00      	cmp	r3, #0
 801285e:	d1d2      	bne.n	8012806 <_dtoa_r+0x37e>
 8012860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012862:	2b00      	cmp	r3, #0
 8012864:	f000 808c 	beq.w	8012980 <_dtoa_r+0x4f8>
 8012868:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801286c:	4b99      	ldr	r3, [pc, #612]	; (8012ad4 <_dtoa_r+0x64c>)
 801286e:	2200      	movs	r2, #0
 8012870:	4630      	mov	r0, r6
 8012872:	4639      	mov	r1, r7
 8012874:	f7ee f932 	bl	8000adc <__aeabi_dcmplt>
 8012878:	2800      	cmp	r0, #0
 801287a:	f000 8081 	beq.w	8012980 <_dtoa_r+0x4f8>
 801287e:	9b01      	ldr	r3, [sp, #4]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d07d      	beq.n	8012980 <_dtoa_r+0x4f8>
 8012884:	f1b9 0f00 	cmp.w	r9, #0
 8012888:	dd3c      	ble.n	8012904 <_dtoa_r+0x47c>
 801288a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801288e:	9307      	str	r3, [sp, #28]
 8012890:	2200      	movs	r2, #0
 8012892:	4b91      	ldr	r3, [pc, #580]	; (8012ad8 <_dtoa_r+0x650>)
 8012894:	4630      	mov	r0, r6
 8012896:	4639      	mov	r1, r7
 8012898:	f7ed feae 	bl	80005f8 <__aeabi_dmul>
 801289c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128a0:	3501      	adds	r5, #1
 80128a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80128a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80128aa:	4628      	mov	r0, r5
 80128ac:	f7ed fe3a 	bl	8000524 <__aeabi_i2d>
 80128b0:	4632      	mov	r2, r6
 80128b2:	463b      	mov	r3, r7
 80128b4:	f7ed fea0 	bl	80005f8 <__aeabi_dmul>
 80128b8:	4b88      	ldr	r3, [pc, #544]	; (8012adc <_dtoa_r+0x654>)
 80128ba:	2200      	movs	r2, #0
 80128bc:	f7ed fce6 	bl	800028c <__adddf3>
 80128c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80128c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80128c8:	9303      	str	r3, [sp, #12]
 80128ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d15c      	bne.n	801298a <_dtoa_r+0x502>
 80128d0:	4b83      	ldr	r3, [pc, #524]	; (8012ae0 <_dtoa_r+0x658>)
 80128d2:	2200      	movs	r2, #0
 80128d4:	4630      	mov	r0, r6
 80128d6:	4639      	mov	r1, r7
 80128d8:	f7ed fcd6 	bl	8000288 <__aeabi_dsub>
 80128dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80128e0:	4606      	mov	r6, r0
 80128e2:	460f      	mov	r7, r1
 80128e4:	f7ee f918 	bl	8000b18 <__aeabi_dcmpgt>
 80128e8:	2800      	cmp	r0, #0
 80128ea:	f040 8296 	bne.w	8012e1a <_dtoa_r+0x992>
 80128ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80128f2:	4630      	mov	r0, r6
 80128f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128f8:	4639      	mov	r1, r7
 80128fa:	f7ee f8ef 	bl	8000adc <__aeabi_dcmplt>
 80128fe:	2800      	cmp	r0, #0
 8012900:	f040 8288 	bne.w	8012e14 <_dtoa_r+0x98c>
 8012904:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801290c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801290e:	2b00      	cmp	r3, #0
 8012910:	f2c0 8158 	blt.w	8012bc4 <_dtoa_r+0x73c>
 8012914:	f1ba 0f0e 	cmp.w	sl, #14
 8012918:	f300 8154 	bgt.w	8012bc4 <_dtoa_r+0x73c>
 801291c:	4b6b      	ldr	r3, [pc, #428]	; (8012acc <_dtoa_r+0x644>)
 801291e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012922:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012928:	2b00      	cmp	r3, #0
 801292a:	f280 80e3 	bge.w	8012af4 <_dtoa_r+0x66c>
 801292e:	9b01      	ldr	r3, [sp, #4]
 8012930:	2b00      	cmp	r3, #0
 8012932:	f300 80df 	bgt.w	8012af4 <_dtoa_r+0x66c>
 8012936:	f040 826d 	bne.w	8012e14 <_dtoa_r+0x98c>
 801293a:	4b69      	ldr	r3, [pc, #420]	; (8012ae0 <_dtoa_r+0x658>)
 801293c:	2200      	movs	r2, #0
 801293e:	4640      	mov	r0, r8
 8012940:	4649      	mov	r1, r9
 8012942:	f7ed fe59 	bl	80005f8 <__aeabi_dmul>
 8012946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801294a:	f7ee f8db 	bl	8000b04 <__aeabi_dcmpge>
 801294e:	9e01      	ldr	r6, [sp, #4]
 8012950:	4637      	mov	r7, r6
 8012952:	2800      	cmp	r0, #0
 8012954:	f040 8243 	bne.w	8012dde <_dtoa_r+0x956>
 8012958:	9d00      	ldr	r5, [sp, #0]
 801295a:	2331      	movs	r3, #49	; 0x31
 801295c:	f805 3b01 	strb.w	r3, [r5], #1
 8012960:	f10a 0a01 	add.w	sl, sl, #1
 8012964:	e23f      	b.n	8012de6 <_dtoa_r+0x95e>
 8012966:	07f2      	lsls	r2, r6, #31
 8012968:	d505      	bpl.n	8012976 <_dtoa_r+0x4ee>
 801296a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801296e:	f7ed fe43 	bl	80005f8 <__aeabi_dmul>
 8012972:	3501      	adds	r5, #1
 8012974:	2301      	movs	r3, #1
 8012976:	1076      	asrs	r6, r6, #1
 8012978:	3708      	adds	r7, #8
 801297a:	e76c      	b.n	8012856 <_dtoa_r+0x3ce>
 801297c:	2502      	movs	r5, #2
 801297e:	e76f      	b.n	8012860 <_dtoa_r+0x3d8>
 8012980:	9b01      	ldr	r3, [sp, #4]
 8012982:	f8cd a01c 	str.w	sl, [sp, #28]
 8012986:	930c      	str	r3, [sp, #48]	; 0x30
 8012988:	e78d      	b.n	80128a6 <_dtoa_r+0x41e>
 801298a:	9900      	ldr	r1, [sp, #0]
 801298c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801298e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012990:	4b4e      	ldr	r3, [pc, #312]	; (8012acc <_dtoa_r+0x644>)
 8012992:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012996:	4401      	add	r1, r0
 8012998:	9102      	str	r1, [sp, #8]
 801299a:	9908      	ldr	r1, [sp, #32]
 801299c:	eeb0 8a47 	vmov.f32	s16, s14
 80129a0:	eef0 8a67 	vmov.f32	s17, s15
 80129a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80129a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80129ac:	2900      	cmp	r1, #0
 80129ae:	d045      	beq.n	8012a3c <_dtoa_r+0x5b4>
 80129b0:	494c      	ldr	r1, [pc, #304]	; (8012ae4 <_dtoa_r+0x65c>)
 80129b2:	2000      	movs	r0, #0
 80129b4:	f7ed ff4a 	bl	800084c <__aeabi_ddiv>
 80129b8:	ec53 2b18 	vmov	r2, r3, d8
 80129bc:	f7ed fc64 	bl	8000288 <__aeabi_dsub>
 80129c0:	9d00      	ldr	r5, [sp, #0]
 80129c2:	ec41 0b18 	vmov	d8, r0, r1
 80129c6:	4639      	mov	r1, r7
 80129c8:	4630      	mov	r0, r6
 80129ca:	f7ee f8c5 	bl	8000b58 <__aeabi_d2iz>
 80129ce:	900c      	str	r0, [sp, #48]	; 0x30
 80129d0:	f7ed fda8 	bl	8000524 <__aeabi_i2d>
 80129d4:	4602      	mov	r2, r0
 80129d6:	460b      	mov	r3, r1
 80129d8:	4630      	mov	r0, r6
 80129da:	4639      	mov	r1, r7
 80129dc:	f7ed fc54 	bl	8000288 <__aeabi_dsub>
 80129e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80129e2:	3330      	adds	r3, #48	; 0x30
 80129e4:	f805 3b01 	strb.w	r3, [r5], #1
 80129e8:	ec53 2b18 	vmov	r2, r3, d8
 80129ec:	4606      	mov	r6, r0
 80129ee:	460f      	mov	r7, r1
 80129f0:	f7ee f874 	bl	8000adc <__aeabi_dcmplt>
 80129f4:	2800      	cmp	r0, #0
 80129f6:	d165      	bne.n	8012ac4 <_dtoa_r+0x63c>
 80129f8:	4632      	mov	r2, r6
 80129fa:	463b      	mov	r3, r7
 80129fc:	4935      	ldr	r1, [pc, #212]	; (8012ad4 <_dtoa_r+0x64c>)
 80129fe:	2000      	movs	r0, #0
 8012a00:	f7ed fc42 	bl	8000288 <__aeabi_dsub>
 8012a04:	ec53 2b18 	vmov	r2, r3, d8
 8012a08:	f7ee f868 	bl	8000adc <__aeabi_dcmplt>
 8012a0c:	2800      	cmp	r0, #0
 8012a0e:	f040 80b9 	bne.w	8012b84 <_dtoa_r+0x6fc>
 8012a12:	9b02      	ldr	r3, [sp, #8]
 8012a14:	429d      	cmp	r5, r3
 8012a16:	f43f af75 	beq.w	8012904 <_dtoa_r+0x47c>
 8012a1a:	4b2f      	ldr	r3, [pc, #188]	; (8012ad8 <_dtoa_r+0x650>)
 8012a1c:	ec51 0b18 	vmov	r0, r1, d8
 8012a20:	2200      	movs	r2, #0
 8012a22:	f7ed fde9 	bl	80005f8 <__aeabi_dmul>
 8012a26:	4b2c      	ldr	r3, [pc, #176]	; (8012ad8 <_dtoa_r+0x650>)
 8012a28:	ec41 0b18 	vmov	d8, r0, r1
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	4630      	mov	r0, r6
 8012a30:	4639      	mov	r1, r7
 8012a32:	f7ed fde1 	bl	80005f8 <__aeabi_dmul>
 8012a36:	4606      	mov	r6, r0
 8012a38:	460f      	mov	r7, r1
 8012a3a:	e7c4      	b.n	80129c6 <_dtoa_r+0x53e>
 8012a3c:	ec51 0b17 	vmov	r0, r1, d7
 8012a40:	f7ed fdda 	bl	80005f8 <__aeabi_dmul>
 8012a44:	9b02      	ldr	r3, [sp, #8]
 8012a46:	9d00      	ldr	r5, [sp, #0]
 8012a48:	930c      	str	r3, [sp, #48]	; 0x30
 8012a4a:	ec41 0b18 	vmov	d8, r0, r1
 8012a4e:	4639      	mov	r1, r7
 8012a50:	4630      	mov	r0, r6
 8012a52:	f7ee f881 	bl	8000b58 <__aeabi_d2iz>
 8012a56:	9011      	str	r0, [sp, #68]	; 0x44
 8012a58:	f7ed fd64 	bl	8000524 <__aeabi_i2d>
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	460b      	mov	r3, r1
 8012a60:	4630      	mov	r0, r6
 8012a62:	4639      	mov	r1, r7
 8012a64:	f7ed fc10 	bl	8000288 <__aeabi_dsub>
 8012a68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012a6a:	3330      	adds	r3, #48	; 0x30
 8012a6c:	f805 3b01 	strb.w	r3, [r5], #1
 8012a70:	9b02      	ldr	r3, [sp, #8]
 8012a72:	429d      	cmp	r5, r3
 8012a74:	4606      	mov	r6, r0
 8012a76:	460f      	mov	r7, r1
 8012a78:	f04f 0200 	mov.w	r2, #0
 8012a7c:	d134      	bne.n	8012ae8 <_dtoa_r+0x660>
 8012a7e:	4b19      	ldr	r3, [pc, #100]	; (8012ae4 <_dtoa_r+0x65c>)
 8012a80:	ec51 0b18 	vmov	r0, r1, d8
 8012a84:	f7ed fc02 	bl	800028c <__adddf3>
 8012a88:	4602      	mov	r2, r0
 8012a8a:	460b      	mov	r3, r1
 8012a8c:	4630      	mov	r0, r6
 8012a8e:	4639      	mov	r1, r7
 8012a90:	f7ee f842 	bl	8000b18 <__aeabi_dcmpgt>
 8012a94:	2800      	cmp	r0, #0
 8012a96:	d175      	bne.n	8012b84 <_dtoa_r+0x6fc>
 8012a98:	ec53 2b18 	vmov	r2, r3, d8
 8012a9c:	4911      	ldr	r1, [pc, #68]	; (8012ae4 <_dtoa_r+0x65c>)
 8012a9e:	2000      	movs	r0, #0
 8012aa0:	f7ed fbf2 	bl	8000288 <__aeabi_dsub>
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	4639      	mov	r1, r7
 8012aac:	f7ee f816 	bl	8000adc <__aeabi_dcmplt>
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	f43f af27 	beq.w	8012904 <_dtoa_r+0x47c>
 8012ab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012ab8:	1e6b      	subs	r3, r5, #1
 8012aba:	930c      	str	r3, [sp, #48]	; 0x30
 8012abc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ac0:	2b30      	cmp	r3, #48	; 0x30
 8012ac2:	d0f8      	beq.n	8012ab6 <_dtoa_r+0x62e>
 8012ac4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012ac8:	e04a      	b.n	8012b60 <_dtoa_r+0x6d8>
 8012aca:	bf00      	nop
 8012acc:	08015790 	.word	0x08015790
 8012ad0:	08015768 	.word	0x08015768
 8012ad4:	3ff00000 	.word	0x3ff00000
 8012ad8:	40240000 	.word	0x40240000
 8012adc:	401c0000 	.word	0x401c0000
 8012ae0:	40140000 	.word	0x40140000
 8012ae4:	3fe00000 	.word	0x3fe00000
 8012ae8:	4baf      	ldr	r3, [pc, #700]	; (8012da8 <_dtoa_r+0x920>)
 8012aea:	f7ed fd85 	bl	80005f8 <__aeabi_dmul>
 8012aee:	4606      	mov	r6, r0
 8012af0:	460f      	mov	r7, r1
 8012af2:	e7ac      	b.n	8012a4e <_dtoa_r+0x5c6>
 8012af4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012af8:	9d00      	ldr	r5, [sp, #0]
 8012afa:	4642      	mov	r2, r8
 8012afc:	464b      	mov	r3, r9
 8012afe:	4630      	mov	r0, r6
 8012b00:	4639      	mov	r1, r7
 8012b02:	f7ed fea3 	bl	800084c <__aeabi_ddiv>
 8012b06:	f7ee f827 	bl	8000b58 <__aeabi_d2iz>
 8012b0a:	9002      	str	r0, [sp, #8]
 8012b0c:	f7ed fd0a 	bl	8000524 <__aeabi_i2d>
 8012b10:	4642      	mov	r2, r8
 8012b12:	464b      	mov	r3, r9
 8012b14:	f7ed fd70 	bl	80005f8 <__aeabi_dmul>
 8012b18:	4602      	mov	r2, r0
 8012b1a:	460b      	mov	r3, r1
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	4639      	mov	r1, r7
 8012b20:	f7ed fbb2 	bl	8000288 <__aeabi_dsub>
 8012b24:	9e02      	ldr	r6, [sp, #8]
 8012b26:	9f01      	ldr	r7, [sp, #4]
 8012b28:	3630      	adds	r6, #48	; 0x30
 8012b2a:	f805 6b01 	strb.w	r6, [r5], #1
 8012b2e:	9e00      	ldr	r6, [sp, #0]
 8012b30:	1bae      	subs	r6, r5, r6
 8012b32:	42b7      	cmp	r7, r6
 8012b34:	4602      	mov	r2, r0
 8012b36:	460b      	mov	r3, r1
 8012b38:	d137      	bne.n	8012baa <_dtoa_r+0x722>
 8012b3a:	f7ed fba7 	bl	800028c <__adddf3>
 8012b3e:	4642      	mov	r2, r8
 8012b40:	464b      	mov	r3, r9
 8012b42:	4606      	mov	r6, r0
 8012b44:	460f      	mov	r7, r1
 8012b46:	f7ed ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 8012b4a:	b9c8      	cbnz	r0, 8012b80 <_dtoa_r+0x6f8>
 8012b4c:	4642      	mov	r2, r8
 8012b4e:	464b      	mov	r3, r9
 8012b50:	4630      	mov	r0, r6
 8012b52:	4639      	mov	r1, r7
 8012b54:	f7ed ffb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b58:	b110      	cbz	r0, 8012b60 <_dtoa_r+0x6d8>
 8012b5a:	9b02      	ldr	r3, [sp, #8]
 8012b5c:	07d9      	lsls	r1, r3, #31
 8012b5e:	d40f      	bmi.n	8012b80 <_dtoa_r+0x6f8>
 8012b60:	4620      	mov	r0, r4
 8012b62:	4659      	mov	r1, fp
 8012b64:	f000 fe4a 	bl	80137fc <_Bfree>
 8012b68:	2300      	movs	r3, #0
 8012b6a:	702b      	strb	r3, [r5, #0]
 8012b6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b6e:	f10a 0001 	add.w	r0, sl, #1
 8012b72:	6018      	str	r0, [r3, #0]
 8012b74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	f43f acd8 	beq.w	801252c <_dtoa_r+0xa4>
 8012b7c:	601d      	str	r5, [r3, #0]
 8012b7e:	e4d5      	b.n	801252c <_dtoa_r+0xa4>
 8012b80:	f8cd a01c 	str.w	sl, [sp, #28]
 8012b84:	462b      	mov	r3, r5
 8012b86:	461d      	mov	r5, r3
 8012b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b8c:	2a39      	cmp	r2, #57	; 0x39
 8012b8e:	d108      	bne.n	8012ba2 <_dtoa_r+0x71a>
 8012b90:	9a00      	ldr	r2, [sp, #0]
 8012b92:	429a      	cmp	r2, r3
 8012b94:	d1f7      	bne.n	8012b86 <_dtoa_r+0x6fe>
 8012b96:	9a07      	ldr	r2, [sp, #28]
 8012b98:	9900      	ldr	r1, [sp, #0]
 8012b9a:	3201      	adds	r2, #1
 8012b9c:	9207      	str	r2, [sp, #28]
 8012b9e:	2230      	movs	r2, #48	; 0x30
 8012ba0:	700a      	strb	r2, [r1, #0]
 8012ba2:	781a      	ldrb	r2, [r3, #0]
 8012ba4:	3201      	adds	r2, #1
 8012ba6:	701a      	strb	r2, [r3, #0]
 8012ba8:	e78c      	b.n	8012ac4 <_dtoa_r+0x63c>
 8012baa:	4b7f      	ldr	r3, [pc, #508]	; (8012da8 <_dtoa_r+0x920>)
 8012bac:	2200      	movs	r2, #0
 8012bae:	f7ed fd23 	bl	80005f8 <__aeabi_dmul>
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	4606      	mov	r6, r0
 8012bb8:	460f      	mov	r7, r1
 8012bba:	f7ed ff85 	bl	8000ac8 <__aeabi_dcmpeq>
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	d09b      	beq.n	8012afa <_dtoa_r+0x672>
 8012bc2:	e7cd      	b.n	8012b60 <_dtoa_r+0x6d8>
 8012bc4:	9a08      	ldr	r2, [sp, #32]
 8012bc6:	2a00      	cmp	r2, #0
 8012bc8:	f000 80c4 	beq.w	8012d54 <_dtoa_r+0x8cc>
 8012bcc:	9a05      	ldr	r2, [sp, #20]
 8012bce:	2a01      	cmp	r2, #1
 8012bd0:	f300 80a8 	bgt.w	8012d24 <_dtoa_r+0x89c>
 8012bd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012bd6:	2a00      	cmp	r2, #0
 8012bd8:	f000 80a0 	beq.w	8012d1c <_dtoa_r+0x894>
 8012bdc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012be0:	9e06      	ldr	r6, [sp, #24]
 8012be2:	4645      	mov	r5, r8
 8012be4:	9a04      	ldr	r2, [sp, #16]
 8012be6:	2101      	movs	r1, #1
 8012be8:	441a      	add	r2, r3
 8012bea:	4620      	mov	r0, r4
 8012bec:	4498      	add	r8, r3
 8012bee:	9204      	str	r2, [sp, #16]
 8012bf0:	f000 ff0a 	bl	8013a08 <__i2b>
 8012bf4:	4607      	mov	r7, r0
 8012bf6:	2d00      	cmp	r5, #0
 8012bf8:	dd0b      	ble.n	8012c12 <_dtoa_r+0x78a>
 8012bfa:	9b04      	ldr	r3, [sp, #16]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	dd08      	ble.n	8012c12 <_dtoa_r+0x78a>
 8012c00:	42ab      	cmp	r3, r5
 8012c02:	9a04      	ldr	r2, [sp, #16]
 8012c04:	bfa8      	it	ge
 8012c06:	462b      	movge	r3, r5
 8012c08:	eba8 0803 	sub.w	r8, r8, r3
 8012c0c:	1aed      	subs	r5, r5, r3
 8012c0e:	1ad3      	subs	r3, r2, r3
 8012c10:	9304      	str	r3, [sp, #16]
 8012c12:	9b06      	ldr	r3, [sp, #24]
 8012c14:	b1fb      	cbz	r3, 8012c56 <_dtoa_r+0x7ce>
 8012c16:	9b08      	ldr	r3, [sp, #32]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	f000 809f 	beq.w	8012d5c <_dtoa_r+0x8d4>
 8012c1e:	2e00      	cmp	r6, #0
 8012c20:	dd11      	ble.n	8012c46 <_dtoa_r+0x7be>
 8012c22:	4639      	mov	r1, r7
 8012c24:	4632      	mov	r2, r6
 8012c26:	4620      	mov	r0, r4
 8012c28:	f000 ffaa 	bl	8013b80 <__pow5mult>
 8012c2c:	465a      	mov	r2, fp
 8012c2e:	4601      	mov	r1, r0
 8012c30:	4607      	mov	r7, r0
 8012c32:	4620      	mov	r0, r4
 8012c34:	f000 fefe 	bl	8013a34 <__multiply>
 8012c38:	4659      	mov	r1, fp
 8012c3a:	9007      	str	r0, [sp, #28]
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	f000 fddd 	bl	80137fc <_Bfree>
 8012c42:	9b07      	ldr	r3, [sp, #28]
 8012c44:	469b      	mov	fp, r3
 8012c46:	9b06      	ldr	r3, [sp, #24]
 8012c48:	1b9a      	subs	r2, r3, r6
 8012c4a:	d004      	beq.n	8012c56 <_dtoa_r+0x7ce>
 8012c4c:	4659      	mov	r1, fp
 8012c4e:	4620      	mov	r0, r4
 8012c50:	f000 ff96 	bl	8013b80 <__pow5mult>
 8012c54:	4683      	mov	fp, r0
 8012c56:	2101      	movs	r1, #1
 8012c58:	4620      	mov	r0, r4
 8012c5a:	f000 fed5 	bl	8013a08 <__i2b>
 8012c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	4606      	mov	r6, r0
 8012c64:	dd7c      	ble.n	8012d60 <_dtoa_r+0x8d8>
 8012c66:	461a      	mov	r2, r3
 8012c68:	4601      	mov	r1, r0
 8012c6a:	4620      	mov	r0, r4
 8012c6c:	f000 ff88 	bl	8013b80 <__pow5mult>
 8012c70:	9b05      	ldr	r3, [sp, #20]
 8012c72:	2b01      	cmp	r3, #1
 8012c74:	4606      	mov	r6, r0
 8012c76:	dd76      	ble.n	8012d66 <_dtoa_r+0x8de>
 8012c78:	2300      	movs	r3, #0
 8012c7a:	9306      	str	r3, [sp, #24]
 8012c7c:	6933      	ldr	r3, [r6, #16]
 8012c7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012c82:	6918      	ldr	r0, [r3, #16]
 8012c84:	f000 fe70 	bl	8013968 <__hi0bits>
 8012c88:	f1c0 0020 	rsb	r0, r0, #32
 8012c8c:	9b04      	ldr	r3, [sp, #16]
 8012c8e:	4418      	add	r0, r3
 8012c90:	f010 001f 	ands.w	r0, r0, #31
 8012c94:	f000 8086 	beq.w	8012da4 <_dtoa_r+0x91c>
 8012c98:	f1c0 0320 	rsb	r3, r0, #32
 8012c9c:	2b04      	cmp	r3, #4
 8012c9e:	dd7f      	ble.n	8012da0 <_dtoa_r+0x918>
 8012ca0:	f1c0 001c 	rsb	r0, r0, #28
 8012ca4:	9b04      	ldr	r3, [sp, #16]
 8012ca6:	4403      	add	r3, r0
 8012ca8:	4480      	add	r8, r0
 8012caa:	4405      	add	r5, r0
 8012cac:	9304      	str	r3, [sp, #16]
 8012cae:	f1b8 0f00 	cmp.w	r8, #0
 8012cb2:	dd05      	ble.n	8012cc0 <_dtoa_r+0x838>
 8012cb4:	4659      	mov	r1, fp
 8012cb6:	4642      	mov	r2, r8
 8012cb8:	4620      	mov	r0, r4
 8012cba:	f000 ffbb 	bl	8013c34 <__lshift>
 8012cbe:	4683      	mov	fp, r0
 8012cc0:	9b04      	ldr	r3, [sp, #16]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	dd05      	ble.n	8012cd2 <_dtoa_r+0x84a>
 8012cc6:	4631      	mov	r1, r6
 8012cc8:	461a      	mov	r2, r3
 8012cca:	4620      	mov	r0, r4
 8012ccc:	f000 ffb2 	bl	8013c34 <__lshift>
 8012cd0:	4606      	mov	r6, r0
 8012cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d069      	beq.n	8012dac <_dtoa_r+0x924>
 8012cd8:	4631      	mov	r1, r6
 8012cda:	4658      	mov	r0, fp
 8012cdc:	f001 f816 	bl	8013d0c <__mcmp>
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	da63      	bge.n	8012dac <_dtoa_r+0x924>
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	4659      	mov	r1, fp
 8012ce8:	220a      	movs	r2, #10
 8012cea:	4620      	mov	r0, r4
 8012cec:	f000 fda8 	bl	8013840 <__multadd>
 8012cf0:	9b08      	ldr	r3, [sp, #32]
 8012cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012cf6:	4683      	mov	fp, r0
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	f000 818f 	beq.w	801301c <_dtoa_r+0xb94>
 8012cfe:	4639      	mov	r1, r7
 8012d00:	2300      	movs	r3, #0
 8012d02:	220a      	movs	r2, #10
 8012d04:	4620      	mov	r0, r4
 8012d06:	f000 fd9b 	bl	8013840 <__multadd>
 8012d0a:	f1b9 0f00 	cmp.w	r9, #0
 8012d0e:	4607      	mov	r7, r0
 8012d10:	f300 808e 	bgt.w	8012e30 <_dtoa_r+0x9a8>
 8012d14:	9b05      	ldr	r3, [sp, #20]
 8012d16:	2b02      	cmp	r3, #2
 8012d18:	dc50      	bgt.n	8012dbc <_dtoa_r+0x934>
 8012d1a:	e089      	b.n	8012e30 <_dtoa_r+0x9a8>
 8012d1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012d1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012d22:	e75d      	b.n	8012be0 <_dtoa_r+0x758>
 8012d24:	9b01      	ldr	r3, [sp, #4]
 8012d26:	1e5e      	subs	r6, r3, #1
 8012d28:	9b06      	ldr	r3, [sp, #24]
 8012d2a:	42b3      	cmp	r3, r6
 8012d2c:	bfbf      	itttt	lt
 8012d2e:	9b06      	ldrlt	r3, [sp, #24]
 8012d30:	9606      	strlt	r6, [sp, #24]
 8012d32:	1af2      	sublt	r2, r6, r3
 8012d34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8012d36:	bfb6      	itet	lt
 8012d38:	189b      	addlt	r3, r3, r2
 8012d3a:	1b9e      	subge	r6, r3, r6
 8012d3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8012d3e:	9b01      	ldr	r3, [sp, #4]
 8012d40:	bfb8      	it	lt
 8012d42:	2600      	movlt	r6, #0
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	bfb5      	itete	lt
 8012d48:	eba8 0503 	sublt.w	r5, r8, r3
 8012d4c:	9b01      	ldrge	r3, [sp, #4]
 8012d4e:	2300      	movlt	r3, #0
 8012d50:	4645      	movge	r5, r8
 8012d52:	e747      	b.n	8012be4 <_dtoa_r+0x75c>
 8012d54:	9e06      	ldr	r6, [sp, #24]
 8012d56:	9f08      	ldr	r7, [sp, #32]
 8012d58:	4645      	mov	r5, r8
 8012d5a:	e74c      	b.n	8012bf6 <_dtoa_r+0x76e>
 8012d5c:	9a06      	ldr	r2, [sp, #24]
 8012d5e:	e775      	b.n	8012c4c <_dtoa_r+0x7c4>
 8012d60:	9b05      	ldr	r3, [sp, #20]
 8012d62:	2b01      	cmp	r3, #1
 8012d64:	dc18      	bgt.n	8012d98 <_dtoa_r+0x910>
 8012d66:	9b02      	ldr	r3, [sp, #8]
 8012d68:	b9b3      	cbnz	r3, 8012d98 <_dtoa_r+0x910>
 8012d6a:	9b03      	ldr	r3, [sp, #12]
 8012d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d70:	b9a3      	cbnz	r3, 8012d9c <_dtoa_r+0x914>
 8012d72:	9b03      	ldr	r3, [sp, #12]
 8012d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d78:	0d1b      	lsrs	r3, r3, #20
 8012d7a:	051b      	lsls	r3, r3, #20
 8012d7c:	b12b      	cbz	r3, 8012d8a <_dtoa_r+0x902>
 8012d7e:	9b04      	ldr	r3, [sp, #16]
 8012d80:	3301      	adds	r3, #1
 8012d82:	9304      	str	r3, [sp, #16]
 8012d84:	f108 0801 	add.w	r8, r8, #1
 8012d88:	2301      	movs	r3, #1
 8012d8a:	9306      	str	r3, [sp, #24]
 8012d8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	f47f af74 	bne.w	8012c7c <_dtoa_r+0x7f4>
 8012d94:	2001      	movs	r0, #1
 8012d96:	e779      	b.n	8012c8c <_dtoa_r+0x804>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	e7f6      	b.n	8012d8a <_dtoa_r+0x902>
 8012d9c:	9b02      	ldr	r3, [sp, #8]
 8012d9e:	e7f4      	b.n	8012d8a <_dtoa_r+0x902>
 8012da0:	d085      	beq.n	8012cae <_dtoa_r+0x826>
 8012da2:	4618      	mov	r0, r3
 8012da4:	301c      	adds	r0, #28
 8012da6:	e77d      	b.n	8012ca4 <_dtoa_r+0x81c>
 8012da8:	40240000 	.word	0x40240000
 8012dac:	9b01      	ldr	r3, [sp, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	dc38      	bgt.n	8012e24 <_dtoa_r+0x99c>
 8012db2:	9b05      	ldr	r3, [sp, #20]
 8012db4:	2b02      	cmp	r3, #2
 8012db6:	dd35      	ble.n	8012e24 <_dtoa_r+0x99c>
 8012db8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012dbc:	f1b9 0f00 	cmp.w	r9, #0
 8012dc0:	d10d      	bne.n	8012dde <_dtoa_r+0x956>
 8012dc2:	4631      	mov	r1, r6
 8012dc4:	464b      	mov	r3, r9
 8012dc6:	2205      	movs	r2, #5
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f000 fd39 	bl	8013840 <__multadd>
 8012dce:	4601      	mov	r1, r0
 8012dd0:	4606      	mov	r6, r0
 8012dd2:	4658      	mov	r0, fp
 8012dd4:	f000 ff9a 	bl	8013d0c <__mcmp>
 8012dd8:	2800      	cmp	r0, #0
 8012dda:	f73f adbd 	bgt.w	8012958 <_dtoa_r+0x4d0>
 8012dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012de0:	9d00      	ldr	r5, [sp, #0]
 8012de2:	ea6f 0a03 	mvn.w	sl, r3
 8012de6:	f04f 0800 	mov.w	r8, #0
 8012dea:	4631      	mov	r1, r6
 8012dec:	4620      	mov	r0, r4
 8012dee:	f000 fd05 	bl	80137fc <_Bfree>
 8012df2:	2f00      	cmp	r7, #0
 8012df4:	f43f aeb4 	beq.w	8012b60 <_dtoa_r+0x6d8>
 8012df8:	f1b8 0f00 	cmp.w	r8, #0
 8012dfc:	d005      	beq.n	8012e0a <_dtoa_r+0x982>
 8012dfe:	45b8      	cmp	r8, r7
 8012e00:	d003      	beq.n	8012e0a <_dtoa_r+0x982>
 8012e02:	4641      	mov	r1, r8
 8012e04:	4620      	mov	r0, r4
 8012e06:	f000 fcf9 	bl	80137fc <_Bfree>
 8012e0a:	4639      	mov	r1, r7
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	f000 fcf5 	bl	80137fc <_Bfree>
 8012e12:	e6a5      	b.n	8012b60 <_dtoa_r+0x6d8>
 8012e14:	2600      	movs	r6, #0
 8012e16:	4637      	mov	r7, r6
 8012e18:	e7e1      	b.n	8012dde <_dtoa_r+0x956>
 8012e1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012e1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8012e20:	4637      	mov	r7, r6
 8012e22:	e599      	b.n	8012958 <_dtoa_r+0x4d0>
 8012e24:	9b08      	ldr	r3, [sp, #32]
 8012e26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	f000 80fd 	beq.w	801302a <_dtoa_r+0xba2>
 8012e30:	2d00      	cmp	r5, #0
 8012e32:	dd05      	ble.n	8012e40 <_dtoa_r+0x9b8>
 8012e34:	4639      	mov	r1, r7
 8012e36:	462a      	mov	r2, r5
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f000 fefb 	bl	8013c34 <__lshift>
 8012e3e:	4607      	mov	r7, r0
 8012e40:	9b06      	ldr	r3, [sp, #24]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d05c      	beq.n	8012f00 <_dtoa_r+0xa78>
 8012e46:	6879      	ldr	r1, [r7, #4]
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f000 fc97 	bl	801377c <_Balloc>
 8012e4e:	4605      	mov	r5, r0
 8012e50:	b928      	cbnz	r0, 8012e5e <_dtoa_r+0x9d6>
 8012e52:	4b80      	ldr	r3, [pc, #512]	; (8013054 <_dtoa_r+0xbcc>)
 8012e54:	4602      	mov	r2, r0
 8012e56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012e5a:	f7ff bb2e 	b.w	80124ba <_dtoa_r+0x32>
 8012e5e:	693a      	ldr	r2, [r7, #16]
 8012e60:	3202      	adds	r2, #2
 8012e62:	0092      	lsls	r2, r2, #2
 8012e64:	f107 010c 	add.w	r1, r7, #12
 8012e68:	300c      	adds	r0, #12
 8012e6a:	f7fd fce1 	bl	8010830 <memcpy>
 8012e6e:	2201      	movs	r2, #1
 8012e70:	4629      	mov	r1, r5
 8012e72:	4620      	mov	r0, r4
 8012e74:	f000 fede 	bl	8013c34 <__lshift>
 8012e78:	9b00      	ldr	r3, [sp, #0]
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	9301      	str	r3, [sp, #4]
 8012e7e:	9b00      	ldr	r3, [sp, #0]
 8012e80:	444b      	add	r3, r9
 8012e82:	9307      	str	r3, [sp, #28]
 8012e84:	9b02      	ldr	r3, [sp, #8]
 8012e86:	f003 0301 	and.w	r3, r3, #1
 8012e8a:	46b8      	mov	r8, r7
 8012e8c:	9306      	str	r3, [sp, #24]
 8012e8e:	4607      	mov	r7, r0
 8012e90:	9b01      	ldr	r3, [sp, #4]
 8012e92:	4631      	mov	r1, r6
 8012e94:	3b01      	subs	r3, #1
 8012e96:	4658      	mov	r0, fp
 8012e98:	9302      	str	r3, [sp, #8]
 8012e9a:	f7ff fa67 	bl	801236c <quorem>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	3330      	adds	r3, #48	; 0x30
 8012ea2:	9004      	str	r0, [sp, #16]
 8012ea4:	4641      	mov	r1, r8
 8012ea6:	4658      	mov	r0, fp
 8012ea8:	9308      	str	r3, [sp, #32]
 8012eaa:	f000 ff2f 	bl	8013d0c <__mcmp>
 8012eae:	463a      	mov	r2, r7
 8012eb0:	4681      	mov	r9, r0
 8012eb2:	4631      	mov	r1, r6
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f000 ff45 	bl	8013d44 <__mdiff>
 8012eba:	68c2      	ldr	r2, [r0, #12]
 8012ebc:	9b08      	ldr	r3, [sp, #32]
 8012ebe:	4605      	mov	r5, r0
 8012ec0:	bb02      	cbnz	r2, 8012f04 <_dtoa_r+0xa7c>
 8012ec2:	4601      	mov	r1, r0
 8012ec4:	4658      	mov	r0, fp
 8012ec6:	f000 ff21 	bl	8013d0c <__mcmp>
 8012eca:	9b08      	ldr	r3, [sp, #32]
 8012ecc:	4602      	mov	r2, r0
 8012ece:	4629      	mov	r1, r5
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8012ed6:	f000 fc91 	bl	80137fc <_Bfree>
 8012eda:	9b05      	ldr	r3, [sp, #20]
 8012edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ede:	9d01      	ldr	r5, [sp, #4]
 8012ee0:	ea43 0102 	orr.w	r1, r3, r2
 8012ee4:	9b06      	ldr	r3, [sp, #24]
 8012ee6:	430b      	orrs	r3, r1
 8012ee8:	9b08      	ldr	r3, [sp, #32]
 8012eea:	d10d      	bne.n	8012f08 <_dtoa_r+0xa80>
 8012eec:	2b39      	cmp	r3, #57	; 0x39
 8012eee:	d029      	beq.n	8012f44 <_dtoa_r+0xabc>
 8012ef0:	f1b9 0f00 	cmp.w	r9, #0
 8012ef4:	dd01      	ble.n	8012efa <_dtoa_r+0xa72>
 8012ef6:	9b04      	ldr	r3, [sp, #16]
 8012ef8:	3331      	adds	r3, #49	; 0x31
 8012efa:	9a02      	ldr	r2, [sp, #8]
 8012efc:	7013      	strb	r3, [r2, #0]
 8012efe:	e774      	b.n	8012dea <_dtoa_r+0x962>
 8012f00:	4638      	mov	r0, r7
 8012f02:	e7b9      	b.n	8012e78 <_dtoa_r+0x9f0>
 8012f04:	2201      	movs	r2, #1
 8012f06:	e7e2      	b.n	8012ece <_dtoa_r+0xa46>
 8012f08:	f1b9 0f00 	cmp.w	r9, #0
 8012f0c:	db06      	blt.n	8012f1c <_dtoa_r+0xa94>
 8012f0e:	9905      	ldr	r1, [sp, #20]
 8012f10:	ea41 0909 	orr.w	r9, r1, r9
 8012f14:	9906      	ldr	r1, [sp, #24]
 8012f16:	ea59 0101 	orrs.w	r1, r9, r1
 8012f1a:	d120      	bne.n	8012f5e <_dtoa_r+0xad6>
 8012f1c:	2a00      	cmp	r2, #0
 8012f1e:	ddec      	ble.n	8012efa <_dtoa_r+0xa72>
 8012f20:	4659      	mov	r1, fp
 8012f22:	2201      	movs	r2, #1
 8012f24:	4620      	mov	r0, r4
 8012f26:	9301      	str	r3, [sp, #4]
 8012f28:	f000 fe84 	bl	8013c34 <__lshift>
 8012f2c:	4631      	mov	r1, r6
 8012f2e:	4683      	mov	fp, r0
 8012f30:	f000 feec 	bl	8013d0c <__mcmp>
 8012f34:	2800      	cmp	r0, #0
 8012f36:	9b01      	ldr	r3, [sp, #4]
 8012f38:	dc02      	bgt.n	8012f40 <_dtoa_r+0xab8>
 8012f3a:	d1de      	bne.n	8012efa <_dtoa_r+0xa72>
 8012f3c:	07da      	lsls	r2, r3, #31
 8012f3e:	d5dc      	bpl.n	8012efa <_dtoa_r+0xa72>
 8012f40:	2b39      	cmp	r3, #57	; 0x39
 8012f42:	d1d8      	bne.n	8012ef6 <_dtoa_r+0xa6e>
 8012f44:	9a02      	ldr	r2, [sp, #8]
 8012f46:	2339      	movs	r3, #57	; 0x39
 8012f48:	7013      	strb	r3, [r2, #0]
 8012f4a:	462b      	mov	r3, r5
 8012f4c:	461d      	mov	r5, r3
 8012f4e:	3b01      	subs	r3, #1
 8012f50:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012f54:	2a39      	cmp	r2, #57	; 0x39
 8012f56:	d050      	beq.n	8012ffa <_dtoa_r+0xb72>
 8012f58:	3201      	adds	r2, #1
 8012f5a:	701a      	strb	r2, [r3, #0]
 8012f5c:	e745      	b.n	8012dea <_dtoa_r+0x962>
 8012f5e:	2a00      	cmp	r2, #0
 8012f60:	dd03      	ble.n	8012f6a <_dtoa_r+0xae2>
 8012f62:	2b39      	cmp	r3, #57	; 0x39
 8012f64:	d0ee      	beq.n	8012f44 <_dtoa_r+0xabc>
 8012f66:	3301      	adds	r3, #1
 8012f68:	e7c7      	b.n	8012efa <_dtoa_r+0xa72>
 8012f6a:	9a01      	ldr	r2, [sp, #4]
 8012f6c:	9907      	ldr	r1, [sp, #28]
 8012f6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012f72:	428a      	cmp	r2, r1
 8012f74:	d02a      	beq.n	8012fcc <_dtoa_r+0xb44>
 8012f76:	4659      	mov	r1, fp
 8012f78:	2300      	movs	r3, #0
 8012f7a:	220a      	movs	r2, #10
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	f000 fc5f 	bl	8013840 <__multadd>
 8012f82:	45b8      	cmp	r8, r7
 8012f84:	4683      	mov	fp, r0
 8012f86:	f04f 0300 	mov.w	r3, #0
 8012f8a:	f04f 020a 	mov.w	r2, #10
 8012f8e:	4641      	mov	r1, r8
 8012f90:	4620      	mov	r0, r4
 8012f92:	d107      	bne.n	8012fa4 <_dtoa_r+0xb1c>
 8012f94:	f000 fc54 	bl	8013840 <__multadd>
 8012f98:	4680      	mov	r8, r0
 8012f9a:	4607      	mov	r7, r0
 8012f9c:	9b01      	ldr	r3, [sp, #4]
 8012f9e:	3301      	adds	r3, #1
 8012fa0:	9301      	str	r3, [sp, #4]
 8012fa2:	e775      	b.n	8012e90 <_dtoa_r+0xa08>
 8012fa4:	f000 fc4c 	bl	8013840 <__multadd>
 8012fa8:	4639      	mov	r1, r7
 8012faa:	4680      	mov	r8, r0
 8012fac:	2300      	movs	r3, #0
 8012fae:	220a      	movs	r2, #10
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	f000 fc45 	bl	8013840 <__multadd>
 8012fb6:	4607      	mov	r7, r0
 8012fb8:	e7f0      	b.n	8012f9c <_dtoa_r+0xb14>
 8012fba:	f1b9 0f00 	cmp.w	r9, #0
 8012fbe:	9a00      	ldr	r2, [sp, #0]
 8012fc0:	bfcc      	ite	gt
 8012fc2:	464d      	movgt	r5, r9
 8012fc4:	2501      	movle	r5, #1
 8012fc6:	4415      	add	r5, r2
 8012fc8:	f04f 0800 	mov.w	r8, #0
 8012fcc:	4659      	mov	r1, fp
 8012fce:	2201      	movs	r2, #1
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	9301      	str	r3, [sp, #4]
 8012fd4:	f000 fe2e 	bl	8013c34 <__lshift>
 8012fd8:	4631      	mov	r1, r6
 8012fda:	4683      	mov	fp, r0
 8012fdc:	f000 fe96 	bl	8013d0c <__mcmp>
 8012fe0:	2800      	cmp	r0, #0
 8012fe2:	dcb2      	bgt.n	8012f4a <_dtoa_r+0xac2>
 8012fe4:	d102      	bne.n	8012fec <_dtoa_r+0xb64>
 8012fe6:	9b01      	ldr	r3, [sp, #4]
 8012fe8:	07db      	lsls	r3, r3, #31
 8012fea:	d4ae      	bmi.n	8012f4a <_dtoa_r+0xac2>
 8012fec:	462b      	mov	r3, r5
 8012fee:	461d      	mov	r5, r3
 8012ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ff4:	2a30      	cmp	r2, #48	; 0x30
 8012ff6:	d0fa      	beq.n	8012fee <_dtoa_r+0xb66>
 8012ff8:	e6f7      	b.n	8012dea <_dtoa_r+0x962>
 8012ffa:	9a00      	ldr	r2, [sp, #0]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d1a5      	bne.n	8012f4c <_dtoa_r+0xac4>
 8013000:	f10a 0a01 	add.w	sl, sl, #1
 8013004:	2331      	movs	r3, #49	; 0x31
 8013006:	e779      	b.n	8012efc <_dtoa_r+0xa74>
 8013008:	4b13      	ldr	r3, [pc, #76]	; (8013058 <_dtoa_r+0xbd0>)
 801300a:	f7ff baaf 	b.w	801256c <_dtoa_r+0xe4>
 801300e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013010:	2b00      	cmp	r3, #0
 8013012:	f47f aa86 	bne.w	8012522 <_dtoa_r+0x9a>
 8013016:	4b11      	ldr	r3, [pc, #68]	; (801305c <_dtoa_r+0xbd4>)
 8013018:	f7ff baa8 	b.w	801256c <_dtoa_r+0xe4>
 801301c:	f1b9 0f00 	cmp.w	r9, #0
 8013020:	dc03      	bgt.n	801302a <_dtoa_r+0xba2>
 8013022:	9b05      	ldr	r3, [sp, #20]
 8013024:	2b02      	cmp	r3, #2
 8013026:	f73f aec9 	bgt.w	8012dbc <_dtoa_r+0x934>
 801302a:	9d00      	ldr	r5, [sp, #0]
 801302c:	4631      	mov	r1, r6
 801302e:	4658      	mov	r0, fp
 8013030:	f7ff f99c 	bl	801236c <quorem>
 8013034:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013038:	f805 3b01 	strb.w	r3, [r5], #1
 801303c:	9a00      	ldr	r2, [sp, #0]
 801303e:	1aaa      	subs	r2, r5, r2
 8013040:	4591      	cmp	r9, r2
 8013042:	ddba      	ble.n	8012fba <_dtoa_r+0xb32>
 8013044:	4659      	mov	r1, fp
 8013046:	2300      	movs	r3, #0
 8013048:	220a      	movs	r2, #10
 801304a:	4620      	mov	r0, r4
 801304c:	f000 fbf8 	bl	8013840 <__multadd>
 8013050:	4683      	mov	fp, r0
 8013052:	e7eb      	b.n	801302c <_dtoa_r+0xba4>
 8013054:	08015674 	.word	0x08015674
 8013058:	08015470 	.word	0x08015470
 801305c:	080155f1 	.word	0x080155f1

08013060 <rshift>:
 8013060:	6903      	ldr	r3, [r0, #16]
 8013062:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013066:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801306a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801306e:	f100 0414 	add.w	r4, r0, #20
 8013072:	dd45      	ble.n	8013100 <rshift+0xa0>
 8013074:	f011 011f 	ands.w	r1, r1, #31
 8013078:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801307c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013080:	d10c      	bne.n	801309c <rshift+0x3c>
 8013082:	f100 0710 	add.w	r7, r0, #16
 8013086:	4629      	mov	r1, r5
 8013088:	42b1      	cmp	r1, r6
 801308a:	d334      	bcc.n	80130f6 <rshift+0x96>
 801308c:	1a9b      	subs	r3, r3, r2
 801308e:	009b      	lsls	r3, r3, #2
 8013090:	1eea      	subs	r2, r5, #3
 8013092:	4296      	cmp	r6, r2
 8013094:	bf38      	it	cc
 8013096:	2300      	movcc	r3, #0
 8013098:	4423      	add	r3, r4
 801309a:	e015      	b.n	80130c8 <rshift+0x68>
 801309c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80130a0:	f1c1 0820 	rsb	r8, r1, #32
 80130a4:	40cf      	lsrs	r7, r1
 80130a6:	f105 0e04 	add.w	lr, r5, #4
 80130aa:	46a1      	mov	r9, r4
 80130ac:	4576      	cmp	r6, lr
 80130ae:	46f4      	mov	ip, lr
 80130b0:	d815      	bhi.n	80130de <rshift+0x7e>
 80130b2:	1a9b      	subs	r3, r3, r2
 80130b4:	009a      	lsls	r2, r3, #2
 80130b6:	3a04      	subs	r2, #4
 80130b8:	3501      	adds	r5, #1
 80130ba:	42ae      	cmp	r6, r5
 80130bc:	bf38      	it	cc
 80130be:	2200      	movcc	r2, #0
 80130c0:	18a3      	adds	r3, r4, r2
 80130c2:	50a7      	str	r7, [r4, r2]
 80130c4:	b107      	cbz	r7, 80130c8 <rshift+0x68>
 80130c6:	3304      	adds	r3, #4
 80130c8:	1b1a      	subs	r2, r3, r4
 80130ca:	42a3      	cmp	r3, r4
 80130cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80130d0:	bf08      	it	eq
 80130d2:	2300      	moveq	r3, #0
 80130d4:	6102      	str	r2, [r0, #16]
 80130d6:	bf08      	it	eq
 80130d8:	6143      	streq	r3, [r0, #20]
 80130da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130de:	f8dc c000 	ldr.w	ip, [ip]
 80130e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80130e6:	ea4c 0707 	orr.w	r7, ip, r7
 80130ea:	f849 7b04 	str.w	r7, [r9], #4
 80130ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80130f2:	40cf      	lsrs	r7, r1
 80130f4:	e7da      	b.n	80130ac <rshift+0x4c>
 80130f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80130fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80130fe:	e7c3      	b.n	8013088 <rshift+0x28>
 8013100:	4623      	mov	r3, r4
 8013102:	e7e1      	b.n	80130c8 <rshift+0x68>

08013104 <__hexdig_fun>:
 8013104:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013108:	2b09      	cmp	r3, #9
 801310a:	d802      	bhi.n	8013112 <__hexdig_fun+0xe>
 801310c:	3820      	subs	r0, #32
 801310e:	b2c0      	uxtb	r0, r0
 8013110:	4770      	bx	lr
 8013112:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013116:	2b05      	cmp	r3, #5
 8013118:	d801      	bhi.n	801311e <__hexdig_fun+0x1a>
 801311a:	3847      	subs	r0, #71	; 0x47
 801311c:	e7f7      	b.n	801310e <__hexdig_fun+0xa>
 801311e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013122:	2b05      	cmp	r3, #5
 8013124:	d801      	bhi.n	801312a <__hexdig_fun+0x26>
 8013126:	3827      	subs	r0, #39	; 0x27
 8013128:	e7f1      	b.n	801310e <__hexdig_fun+0xa>
 801312a:	2000      	movs	r0, #0
 801312c:	4770      	bx	lr
	...

08013130 <__gethex>:
 8013130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013134:	ed2d 8b02 	vpush	{d8}
 8013138:	b089      	sub	sp, #36	; 0x24
 801313a:	ee08 0a10 	vmov	s16, r0
 801313e:	9304      	str	r3, [sp, #16]
 8013140:	4bbc      	ldr	r3, [pc, #752]	; (8013434 <__gethex+0x304>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	9301      	str	r3, [sp, #4]
 8013146:	4618      	mov	r0, r3
 8013148:	468b      	mov	fp, r1
 801314a:	4690      	mov	r8, r2
 801314c:	f7ed f840 	bl	80001d0 <strlen>
 8013150:	9b01      	ldr	r3, [sp, #4]
 8013152:	f8db 2000 	ldr.w	r2, [fp]
 8013156:	4403      	add	r3, r0
 8013158:	4682      	mov	sl, r0
 801315a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801315e:	9305      	str	r3, [sp, #20]
 8013160:	1c93      	adds	r3, r2, #2
 8013162:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013166:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801316a:	32fe      	adds	r2, #254	; 0xfe
 801316c:	18d1      	adds	r1, r2, r3
 801316e:	461f      	mov	r7, r3
 8013170:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013174:	9100      	str	r1, [sp, #0]
 8013176:	2830      	cmp	r0, #48	; 0x30
 8013178:	d0f8      	beq.n	801316c <__gethex+0x3c>
 801317a:	f7ff ffc3 	bl	8013104 <__hexdig_fun>
 801317e:	4604      	mov	r4, r0
 8013180:	2800      	cmp	r0, #0
 8013182:	d13a      	bne.n	80131fa <__gethex+0xca>
 8013184:	9901      	ldr	r1, [sp, #4]
 8013186:	4652      	mov	r2, sl
 8013188:	4638      	mov	r0, r7
 801318a:	f001 f9e1 	bl	8014550 <strncmp>
 801318e:	4605      	mov	r5, r0
 8013190:	2800      	cmp	r0, #0
 8013192:	d168      	bne.n	8013266 <__gethex+0x136>
 8013194:	f817 000a 	ldrb.w	r0, [r7, sl]
 8013198:	eb07 060a 	add.w	r6, r7, sl
 801319c:	f7ff ffb2 	bl	8013104 <__hexdig_fun>
 80131a0:	2800      	cmp	r0, #0
 80131a2:	d062      	beq.n	801326a <__gethex+0x13a>
 80131a4:	4633      	mov	r3, r6
 80131a6:	7818      	ldrb	r0, [r3, #0]
 80131a8:	2830      	cmp	r0, #48	; 0x30
 80131aa:	461f      	mov	r7, r3
 80131ac:	f103 0301 	add.w	r3, r3, #1
 80131b0:	d0f9      	beq.n	80131a6 <__gethex+0x76>
 80131b2:	f7ff ffa7 	bl	8013104 <__hexdig_fun>
 80131b6:	2301      	movs	r3, #1
 80131b8:	fab0 f480 	clz	r4, r0
 80131bc:	0964      	lsrs	r4, r4, #5
 80131be:	4635      	mov	r5, r6
 80131c0:	9300      	str	r3, [sp, #0]
 80131c2:	463a      	mov	r2, r7
 80131c4:	4616      	mov	r6, r2
 80131c6:	3201      	adds	r2, #1
 80131c8:	7830      	ldrb	r0, [r6, #0]
 80131ca:	f7ff ff9b 	bl	8013104 <__hexdig_fun>
 80131ce:	2800      	cmp	r0, #0
 80131d0:	d1f8      	bne.n	80131c4 <__gethex+0x94>
 80131d2:	9901      	ldr	r1, [sp, #4]
 80131d4:	4652      	mov	r2, sl
 80131d6:	4630      	mov	r0, r6
 80131d8:	f001 f9ba 	bl	8014550 <strncmp>
 80131dc:	b980      	cbnz	r0, 8013200 <__gethex+0xd0>
 80131de:	b94d      	cbnz	r5, 80131f4 <__gethex+0xc4>
 80131e0:	eb06 050a 	add.w	r5, r6, sl
 80131e4:	462a      	mov	r2, r5
 80131e6:	4616      	mov	r6, r2
 80131e8:	3201      	adds	r2, #1
 80131ea:	7830      	ldrb	r0, [r6, #0]
 80131ec:	f7ff ff8a 	bl	8013104 <__hexdig_fun>
 80131f0:	2800      	cmp	r0, #0
 80131f2:	d1f8      	bne.n	80131e6 <__gethex+0xb6>
 80131f4:	1bad      	subs	r5, r5, r6
 80131f6:	00ad      	lsls	r5, r5, #2
 80131f8:	e004      	b.n	8013204 <__gethex+0xd4>
 80131fa:	2400      	movs	r4, #0
 80131fc:	4625      	mov	r5, r4
 80131fe:	e7e0      	b.n	80131c2 <__gethex+0x92>
 8013200:	2d00      	cmp	r5, #0
 8013202:	d1f7      	bne.n	80131f4 <__gethex+0xc4>
 8013204:	7833      	ldrb	r3, [r6, #0]
 8013206:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801320a:	2b50      	cmp	r3, #80	; 0x50
 801320c:	d13b      	bne.n	8013286 <__gethex+0x156>
 801320e:	7873      	ldrb	r3, [r6, #1]
 8013210:	2b2b      	cmp	r3, #43	; 0x2b
 8013212:	d02c      	beq.n	801326e <__gethex+0x13e>
 8013214:	2b2d      	cmp	r3, #45	; 0x2d
 8013216:	d02e      	beq.n	8013276 <__gethex+0x146>
 8013218:	1c71      	adds	r1, r6, #1
 801321a:	f04f 0900 	mov.w	r9, #0
 801321e:	7808      	ldrb	r0, [r1, #0]
 8013220:	f7ff ff70 	bl	8013104 <__hexdig_fun>
 8013224:	1e43      	subs	r3, r0, #1
 8013226:	b2db      	uxtb	r3, r3
 8013228:	2b18      	cmp	r3, #24
 801322a:	d82c      	bhi.n	8013286 <__gethex+0x156>
 801322c:	f1a0 0210 	sub.w	r2, r0, #16
 8013230:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013234:	f7ff ff66 	bl	8013104 <__hexdig_fun>
 8013238:	1e43      	subs	r3, r0, #1
 801323a:	b2db      	uxtb	r3, r3
 801323c:	2b18      	cmp	r3, #24
 801323e:	d91d      	bls.n	801327c <__gethex+0x14c>
 8013240:	f1b9 0f00 	cmp.w	r9, #0
 8013244:	d000      	beq.n	8013248 <__gethex+0x118>
 8013246:	4252      	negs	r2, r2
 8013248:	4415      	add	r5, r2
 801324a:	f8cb 1000 	str.w	r1, [fp]
 801324e:	b1e4      	cbz	r4, 801328a <__gethex+0x15a>
 8013250:	9b00      	ldr	r3, [sp, #0]
 8013252:	2b00      	cmp	r3, #0
 8013254:	bf14      	ite	ne
 8013256:	2700      	movne	r7, #0
 8013258:	2706      	moveq	r7, #6
 801325a:	4638      	mov	r0, r7
 801325c:	b009      	add	sp, #36	; 0x24
 801325e:	ecbd 8b02 	vpop	{d8}
 8013262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013266:	463e      	mov	r6, r7
 8013268:	4625      	mov	r5, r4
 801326a:	2401      	movs	r4, #1
 801326c:	e7ca      	b.n	8013204 <__gethex+0xd4>
 801326e:	f04f 0900 	mov.w	r9, #0
 8013272:	1cb1      	adds	r1, r6, #2
 8013274:	e7d3      	b.n	801321e <__gethex+0xee>
 8013276:	f04f 0901 	mov.w	r9, #1
 801327a:	e7fa      	b.n	8013272 <__gethex+0x142>
 801327c:	230a      	movs	r3, #10
 801327e:	fb03 0202 	mla	r2, r3, r2, r0
 8013282:	3a10      	subs	r2, #16
 8013284:	e7d4      	b.n	8013230 <__gethex+0x100>
 8013286:	4631      	mov	r1, r6
 8013288:	e7df      	b.n	801324a <__gethex+0x11a>
 801328a:	1bf3      	subs	r3, r6, r7
 801328c:	3b01      	subs	r3, #1
 801328e:	4621      	mov	r1, r4
 8013290:	2b07      	cmp	r3, #7
 8013292:	dc0b      	bgt.n	80132ac <__gethex+0x17c>
 8013294:	ee18 0a10 	vmov	r0, s16
 8013298:	f000 fa70 	bl	801377c <_Balloc>
 801329c:	4604      	mov	r4, r0
 801329e:	b940      	cbnz	r0, 80132b2 <__gethex+0x182>
 80132a0:	4b65      	ldr	r3, [pc, #404]	; (8013438 <__gethex+0x308>)
 80132a2:	4602      	mov	r2, r0
 80132a4:	21de      	movs	r1, #222	; 0xde
 80132a6:	4865      	ldr	r0, [pc, #404]	; (801343c <__gethex+0x30c>)
 80132a8:	f001 f972 	bl	8014590 <__assert_func>
 80132ac:	3101      	adds	r1, #1
 80132ae:	105b      	asrs	r3, r3, #1
 80132b0:	e7ee      	b.n	8013290 <__gethex+0x160>
 80132b2:	f100 0914 	add.w	r9, r0, #20
 80132b6:	f04f 0b00 	mov.w	fp, #0
 80132ba:	f1ca 0301 	rsb	r3, sl, #1
 80132be:	f8cd 9008 	str.w	r9, [sp, #8]
 80132c2:	f8cd b000 	str.w	fp, [sp]
 80132c6:	9306      	str	r3, [sp, #24]
 80132c8:	42b7      	cmp	r7, r6
 80132ca:	d340      	bcc.n	801334e <__gethex+0x21e>
 80132cc:	9802      	ldr	r0, [sp, #8]
 80132ce:	9b00      	ldr	r3, [sp, #0]
 80132d0:	f840 3b04 	str.w	r3, [r0], #4
 80132d4:	eba0 0009 	sub.w	r0, r0, r9
 80132d8:	1080      	asrs	r0, r0, #2
 80132da:	0146      	lsls	r6, r0, #5
 80132dc:	6120      	str	r0, [r4, #16]
 80132de:	4618      	mov	r0, r3
 80132e0:	f000 fb42 	bl	8013968 <__hi0bits>
 80132e4:	1a30      	subs	r0, r6, r0
 80132e6:	f8d8 6000 	ldr.w	r6, [r8]
 80132ea:	42b0      	cmp	r0, r6
 80132ec:	dd63      	ble.n	80133b6 <__gethex+0x286>
 80132ee:	1b87      	subs	r7, r0, r6
 80132f0:	4639      	mov	r1, r7
 80132f2:	4620      	mov	r0, r4
 80132f4:	f000 fedc 	bl	80140b0 <__any_on>
 80132f8:	4682      	mov	sl, r0
 80132fa:	b1a8      	cbz	r0, 8013328 <__gethex+0x1f8>
 80132fc:	1e7b      	subs	r3, r7, #1
 80132fe:	1159      	asrs	r1, r3, #5
 8013300:	f003 021f 	and.w	r2, r3, #31
 8013304:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013308:	f04f 0a01 	mov.w	sl, #1
 801330c:	fa0a f202 	lsl.w	r2, sl, r2
 8013310:	420a      	tst	r2, r1
 8013312:	d009      	beq.n	8013328 <__gethex+0x1f8>
 8013314:	4553      	cmp	r3, sl
 8013316:	dd05      	ble.n	8013324 <__gethex+0x1f4>
 8013318:	1eb9      	subs	r1, r7, #2
 801331a:	4620      	mov	r0, r4
 801331c:	f000 fec8 	bl	80140b0 <__any_on>
 8013320:	2800      	cmp	r0, #0
 8013322:	d145      	bne.n	80133b0 <__gethex+0x280>
 8013324:	f04f 0a02 	mov.w	sl, #2
 8013328:	4639      	mov	r1, r7
 801332a:	4620      	mov	r0, r4
 801332c:	f7ff fe98 	bl	8013060 <rshift>
 8013330:	443d      	add	r5, r7
 8013332:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013336:	42ab      	cmp	r3, r5
 8013338:	da4c      	bge.n	80133d4 <__gethex+0x2a4>
 801333a:	ee18 0a10 	vmov	r0, s16
 801333e:	4621      	mov	r1, r4
 8013340:	f000 fa5c 	bl	80137fc <_Bfree>
 8013344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013346:	2300      	movs	r3, #0
 8013348:	6013      	str	r3, [r2, #0]
 801334a:	27a3      	movs	r7, #163	; 0xa3
 801334c:	e785      	b.n	801325a <__gethex+0x12a>
 801334e:	1e73      	subs	r3, r6, #1
 8013350:	9a05      	ldr	r2, [sp, #20]
 8013352:	9303      	str	r3, [sp, #12]
 8013354:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013358:	4293      	cmp	r3, r2
 801335a:	d019      	beq.n	8013390 <__gethex+0x260>
 801335c:	f1bb 0f20 	cmp.w	fp, #32
 8013360:	d107      	bne.n	8013372 <__gethex+0x242>
 8013362:	9b02      	ldr	r3, [sp, #8]
 8013364:	9a00      	ldr	r2, [sp, #0]
 8013366:	f843 2b04 	str.w	r2, [r3], #4
 801336a:	9302      	str	r3, [sp, #8]
 801336c:	2300      	movs	r3, #0
 801336e:	9300      	str	r3, [sp, #0]
 8013370:	469b      	mov	fp, r3
 8013372:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013376:	f7ff fec5 	bl	8013104 <__hexdig_fun>
 801337a:	9b00      	ldr	r3, [sp, #0]
 801337c:	f000 000f 	and.w	r0, r0, #15
 8013380:	fa00 f00b 	lsl.w	r0, r0, fp
 8013384:	4303      	orrs	r3, r0
 8013386:	9300      	str	r3, [sp, #0]
 8013388:	f10b 0b04 	add.w	fp, fp, #4
 801338c:	9b03      	ldr	r3, [sp, #12]
 801338e:	e00d      	b.n	80133ac <__gethex+0x27c>
 8013390:	9b03      	ldr	r3, [sp, #12]
 8013392:	9a06      	ldr	r2, [sp, #24]
 8013394:	4413      	add	r3, r2
 8013396:	42bb      	cmp	r3, r7
 8013398:	d3e0      	bcc.n	801335c <__gethex+0x22c>
 801339a:	4618      	mov	r0, r3
 801339c:	9901      	ldr	r1, [sp, #4]
 801339e:	9307      	str	r3, [sp, #28]
 80133a0:	4652      	mov	r2, sl
 80133a2:	f001 f8d5 	bl	8014550 <strncmp>
 80133a6:	9b07      	ldr	r3, [sp, #28]
 80133a8:	2800      	cmp	r0, #0
 80133aa:	d1d7      	bne.n	801335c <__gethex+0x22c>
 80133ac:	461e      	mov	r6, r3
 80133ae:	e78b      	b.n	80132c8 <__gethex+0x198>
 80133b0:	f04f 0a03 	mov.w	sl, #3
 80133b4:	e7b8      	b.n	8013328 <__gethex+0x1f8>
 80133b6:	da0a      	bge.n	80133ce <__gethex+0x29e>
 80133b8:	1a37      	subs	r7, r6, r0
 80133ba:	4621      	mov	r1, r4
 80133bc:	ee18 0a10 	vmov	r0, s16
 80133c0:	463a      	mov	r2, r7
 80133c2:	f000 fc37 	bl	8013c34 <__lshift>
 80133c6:	1bed      	subs	r5, r5, r7
 80133c8:	4604      	mov	r4, r0
 80133ca:	f100 0914 	add.w	r9, r0, #20
 80133ce:	f04f 0a00 	mov.w	sl, #0
 80133d2:	e7ae      	b.n	8013332 <__gethex+0x202>
 80133d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80133d8:	42a8      	cmp	r0, r5
 80133da:	dd72      	ble.n	80134c2 <__gethex+0x392>
 80133dc:	1b45      	subs	r5, r0, r5
 80133de:	42ae      	cmp	r6, r5
 80133e0:	dc36      	bgt.n	8013450 <__gethex+0x320>
 80133e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80133e6:	2b02      	cmp	r3, #2
 80133e8:	d02a      	beq.n	8013440 <__gethex+0x310>
 80133ea:	2b03      	cmp	r3, #3
 80133ec:	d02c      	beq.n	8013448 <__gethex+0x318>
 80133ee:	2b01      	cmp	r3, #1
 80133f0:	d115      	bne.n	801341e <__gethex+0x2ee>
 80133f2:	42ae      	cmp	r6, r5
 80133f4:	d113      	bne.n	801341e <__gethex+0x2ee>
 80133f6:	2e01      	cmp	r6, #1
 80133f8:	d10b      	bne.n	8013412 <__gethex+0x2e2>
 80133fa:	9a04      	ldr	r2, [sp, #16]
 80133fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013400:	6013      	str	r3, [r2, #0]
 8013402:	2301      	movs	r3, #1
 8013404:	6123      	str	r3, [r4, #16]
 8013406:	f8c9 3000 	str.w	r3, [r9]
 801340a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801340c:	2762      	movs	r7, #98	; 0x62
 801340e:	601c      	str	r4, [r3, #0]
 8013410:	e723      	b.n	801325a <__gethex+0x12a>
 8013412:	1e71      	subs	r1, r6, #1
 8013414:	4620      	mov	r0, r4
 8013416:	f000 fe4b 	bl	80140b0 <__any_on>
 801341a:	2800      	cmp	r0, #0
 801341c:	d1ed      	bne.n	80133fa <__gethex+0x2ca>
 801341e:	ee18 0a10 	vmov	r0, s16
 8013422:	4621      	mov	r1, r4
 8013424:	f000 f9ea 	bl	80137fc <_Bfree>
 8013428:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801342a:	2300      	movs	r3, #0
 801342c:	6013      	str	r3, [r2, #0]
 801342e:	2750      	movs	r7, #80	; 0x50
 8013430:	e713      	b.n	801325a <__gethex+0x12a>
 8013432:	bf00      	nop
 8013434:	080156f0 	.word	0x080156f0
 8013438:	08015674 	.word	0x08015674
 801343c:	08015685 	.word	0x08015685
 8013440:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013442:	2b00      	cmp	r3, #0
 8013444:	d1eb      	bne.n	801341e <__gethex+0x2ee>
 8013446:	e7d8      	b.n	80133fa <__gethex+0x2ca>
 8013448:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801344a:	2b00      	cmp	r3, #0
 801344c:	d1d5      	bne.n	80133fa <__gethex+0x2ca>
 801344e:	e7e6      	b.n	801341e <__gethex+0x2ee>
 8013450:	1e6f      	subs	r7, r5, #1
 8013452:	f1ba 0f00 	cmp.w	sl, #0
 8013456:	d131      	bne.n	80134bc <__gethex+0x38c>
 8013458:	b127      	cbz	r7, 8013464 <__gethex+0x334>
 801345a:	4639      	mov	r1, r7
 801345c:	4620      	mov	r0, r4
 801345e:	f000 fe27 	bl	80140b0 <__any_on>
 8013462:	4682      	mov	sl, r0
 8013464:	117b      	asrs	r3, r7, #5
 8013466:	2101      	movs	r1, #1
 8013468:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801346c:	f007 071f 	and.w	r7, r7, #31
 8013470:	fa01 f707 	lsl.w	r7, r1, r7
 8013474:	421f      	tst	r7, r3
 8013476:	4629      	mov	r1, r5
 8013478:	4620      	mov	r0, r4
 801347a:	bf18      	it	ne
 801347c:	f04a 0a02 	orrne.w	sl, sl, #2
 8013480:	1b76      	subs	r6, r6, r5
 8013482:	f7ff fded 	bl	8013060 <rshift>
 8013486:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801348a:	2702      	movs	r7, #2
 801348c:	f1ba 0f00 	cmp.w	sl, #0
 8013490:	d048      	beq.n	8013524 <__gethex+0x3f4>
 8013492:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013496:	2b02      	cmp	r3, #2
 8013498:	d015      	beq.n	80134c6 <__gethex+0x396>
 801349a:	2b03      	cmp	r3, #3
 801349c:	d017      	beq.n	80134ce <__gethex+0x39e>
 801349e:	2b01      	cmp	r3, #1
 80134a0:	d109      	bne.n	80134b6 <__gethex+0x386>
 80134a2:	f01a 0f02 	tst.w	sl, #2
 80134a6:	d006      	beq.n	80134b6 <__gethex+0x386>
 80134a8:	f8d9 0000 	ldr.w	r0, [r9]
 80134ac:	ea4a 0a00 	orr.w	sl, sl, r0
 80134b0:	f01a 0f01 	tst.w	sl, #1
 80134b4:	d10e      	bne.n	80134d4 <__gethex+0x3a4>
 80134b6:	f047 0710 	orr.w	r7, r7, #16
 80134ba:	e033      	b.n	8013524 <__gethex+0x3f4>
 80134bc:	f04f 0a01 	mov.w	sl, #1
 80134c0:	e7d0      	b.n	8013464 <__gethex+0x334>
 80134c2:	2701      	movs	r7, #1
 80134c4:	e7e2      	b.n	801348c <__gethex+0x35c>
 80134c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134c8:	f1c3 0301 	rsb	r3, r3, #1
 80134cc:	9315      	str	r3, [sp, #84]	; 0x54
 80134ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d0f0      	beq.n	80134b6 <__gethex+0x386>
 80134d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80134d8:	f104 0314 	add.w	r3, r4, #20
 80134dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80134e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80134e4:	f04f 0c00 	mov.w	ip, #0
 80134e8:	4618      	mov	r0, r3
 80134ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80134ee:	f1b2 3fff 	cmp.w	r2, #4294967295
 80134f2:	d01c      	beq.n	801352e <__gethex+0x3fe>
 80134f4:	3201      	adds	r2, #1
 80134f6:	6002      	str	r2, [r0, #0]
 80134f8:	2f02      	cmp	r7, #2
 80134fa:	f104 0314 	add.w	r3, r4, #20
 80134fe:	d13f      	bne.n	8013580 <__gethex+0x450>
 8013500:	f8d8 2000 	ldr.w	r2, [r8]
 8013504:	3a01      	subs	r2, #1
 8013506:	42b2      	cmp	r2, r6
 8013508:	d10a      	bne.n	8013520 <__gethex+0x3f0>
 801350a:	1171      	asrs	r1, r6, #5
 801350c:	2201      	movs	r2, #1
 801350e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013512:	f006 061f 	and.w	r6, r6, #31
 8013516:	fa02 f606 	lsl.w	r6, r2, r6
 801351a:	421e      	tst	r6, r3
 801351c:	bf18      	it	ne
 801351e:	4617      	movne	r7, r2
 8013520:	f047 0720 	orr.w	r7, r7, #32
 8013524:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013526:	601c      	str	r4, [r3, #0]
 8013528:	9b04      	ldr	r3, [sp, #16]
 801352a:	601d      	str	r5, [r3, #0]
 801352c:	e695      	b.n	801325a <__gethex+0x12a>
 801352e:	4299      	cmp	r1, r3
 8013530:	f843 cc04 	str.w	ip, [r3, #-4]
 8013534:	d8d8      	bhi.n	80134e8 <__gethex+0x3b8>
 8013536:	68a3      	ldr	r3, [r4, #8]
 8013538:	459b      	cmp	fp, r3
 801353a:	db19      	blt.n	8013570 <__gethex+0x440>
 801353c:	6861      	ldr	r1, [r4, #4]
 801353e:	ee18 0a10 	vmov	r0, s16
 8013542:	3101      	adds	r1, #1
 8013544:	f000 f91a 	bl	801377c <_Balloc>
 8013548:	4681      	mov	r9, r0
 801354a:	b918      	cbnz	r0, 8013554 <__gethex+0x424>
 801354c:	4b1a      	ldr	r3, [pc, #104]	; (80135b8 <__gethex+0x488>)
 801354e:	4602      	mov	r2, r0
 8013550:	2184      	movs	r1, #132	; 0x84
 8013552:	e6a8      	b.n	80132a6 <__gethex+0x176>
 8013554:	6922      	ldr	r2, [r4, #16]
 8013556:	3202      	adds	r2, #2
 8013558:	f104 010c 	add.w	r1, r4, #12
 801355c:	0092      	lsls	r2, r2, #2
 801355e:	300c      	adds	r0, #12
 8013560:	f7fd f966 	bl	8010830 <memcpy>
 8013564:	4621      	mov	r1, r4
 8013566:	ee18 0a10 	vmov	r0, s16
 801356a:	f000 f947 	bl	80137fc <_Bfree>
 801356e:	464c      	mov	r4, r9
 8013570:	6923      	ldr	r3, [r4, #16]
 8013572:	1c5a      	adds	r2, r3, #1
 8013574:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013578:	6122      	str	r2, [r4, #16]
 801357a:	2201      	movs	r2, #1
 801357c:	615a      	str	r2, [r3, #20]
 801357e:	e7bb      	b.n	80134f8 <__gethex+0x3c8>
 8013580:	6922      	ldr	r2, [r4, #16]
 8013582:	455a      	cmp	r2, fp
 8013584:	dd0b      	ble.n	801359e <__gethex+0x46e>
 8013586:	2101      	movs	r1, #1
 8013588:	4620      	mov	r0, r4
 801358a:	f7ff fd69 	bl	8013060 <rshift>
 801358e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013592:	3501      	adds	r5, #1
 8013594:	42ab      	cmp	r3, r5
 8013596:	f6ff aed0 	blt.w	801333a <__gethex+0x20a>
 801359a:	2701      	movs	r7, #1
 801359c:	e7c0      	b.n	8013520 <__gethex+0x3f0>
 801359e:	f016 061f 	ands.w	r6, r6, #31
 80135a2:	d0fa      	beq.n	801359a <__gethex+0x46a>
 80135a4:	449a      	add	sl, r3
 80135a6:	f1c6 0620 	rsb	r6, r6, #32
 80135aa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80135ae:	f000 f9db 	bl	8013968 <__hi0bits>
 80135b2:	42b0      	cmp	r0, r6
 80135b4:	dbe7      	blt.n	8013586 <__gethex+0x456>
 80135b6:	e7f0      	b.n	801359a <__gethex+0x46a>
 80135b8:	08015674 	.word	0x08015674

080135bc <L_shift>:
 80135bc:	f1c2 0208 	rsb	r2, r2, #8
 80135c0:	0092      	lsls	r2, r2, #2
 80135c2:	b570      	push	{r4, r5, r6, lr}
 80135c4:	f1c2 0620 	rsb	r6, r2, #32
 80135c8:	6843      	ldr	r3, [r0, #4]
 80135ca:	6804      	ldr	r4, [r0, #0]
 80135cc:	fa03 f506 	lsl.w	r5, r3, r6
 80135d0:	432c      	orrs	r4, r5
 80135d2:	40d3      	lsrs	r3, r2
 80135d4:	6004      	str	r4, [r0, #0]
 80135d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80135da:	4288      	cmp	r0, r1
 80135dc:	d3f4      	bcc.n	80135c8 <L_shift+0xc>
 80135de:	bd70      	pop	{r4, r5, r6, pc}

080135e0 <__match>:
 80135e0:	b530      	push	{r4, r5, lr}
 80135e2:	6803      	ldr	r3, [r0, #0]
 80135e4:	3301      	adds	r3, #1
 80135e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80135ea:	b914      	cbnz	r4, 80135f2 <__match+0x12>
 80135ec:	6003      	str	r3, [r0, #0]
 80135ee:	2001      	movs	r0, #1
 80135f0:	bd30      	pop	{r4, r5, pc}
 80135f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80135fa:	2d19      	cmp	r5, #25
 80135fc:	bf98      	it	ls
 80135fe:	3220      	addls	r2, #32
 8013600:	42a2      	cmp	r2, r4
 8013602:	d0f0      	beq.n	80135e6 <__match+0x6>
 8013604:	2000      	movs	r0, #0
 8013606:	e7f3      	b.n	80135f0 <__match+0x10>

08013608 <__hexnan>:
 8013608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801360c:	680b      	ldr	r3, [r1, #0]
 801360e:	6801      	ldr	r1, [r0, #0]
 8013610:	115e      	asrs	r6, r3, #5
 8013612:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013616:	f013 031f 	ands.w	r3, r3, #31
 801361a:	b087      	sub	sp, #28
 801361c:	bf18      	it	ne
 801361e:	3604      	addne	r6, #4
 8013620:	2500      	movs	r5, #0
 8013622:	1f37      	subs	r7, r6, #4
 8013624:	4682      	mov	sl, r0
 8013626:	4690      	mov	r8, r2
 8013628:	9301      	str	r3, [sp, #4]
 801362a:	f846 5c04 	str.w	r5, [r6, #-4]
 801362e:	46b9      	mov	r9, r7
 8013630:	463c      	mov	r4, r7
 8013632:	9502      	str	r5, [sp, #8]
 8013634:	46ab      	mov	fp, r5
 8013636:	784a      	ldrb	r2, [r1, #1]
 8013638:	1c4b      	adds	r3, r1, #1
 801363a:	9303      	str	r3, [sp, #12]
 801363c:	b342      	cbz	r2, 8013690 <__hexnan+0x88>
 801363e:	4610      	mov	r0, r2
 8013640:	9105      	str	r1, [sp, #20]
 8013642:	9204      	str	r2, [sp, #16]
 8013644:	f7ff fd5e 	bl	8013104 <__hexdig_fun>
 8013648:	2800      	cmp	r0, #0
 801364a:	d14f      	bne.n	80136ec <__hexnan+0xe4>
 801364c:	9a04      	ldr	r2, [sp, #16]
 801364e:	9905      	ldr	r1, [sp, #20]
 8013650:	2a20      	cmp	r2, #32
 8013652:	d818      	bhi.n	8013686 <__hexnan+0x7e>
 8013654:	9b02      	ldr	r3, [sp, #8]
 8013656:	459b      	cmp	fp, r3
 8013658:	dd13      	ble.n	8013682 <__hexnan+0x7a>
 801365a:	454c      	cmp	r4, r9
 801365c:	d206      	bcs.n	801366c <__hexnan+0x64>
 801365e:	2d07      	cmp	r5, #7
 8013660:	dc04      	bgt.n	801366c <__hexnan+0x64>
 8013662:	462a      	mov	r2, r5
 8013664:	4649      	mov	r1, r9
 8013666:	4620      	mov	r0, r4
 8013668:	f7ff ffa8 	bl	80135bc <L_shift>
 801366c:	4544      	cmp	r4, r8
 801366e:	d950      	bls.n	8013712 <__hexnan+0x10a>
 8013670:	2300      	movs	r3, #0
 8013672:	f1a4 0904 	sub.w	r9, r4, #4
 8013676:	f844 3c04 	str.w	r3, [r4, #-4]
 801367a:	f8cd b008 	str.w	fp, [sp, #8]
 801367e:	464c      	mov	r4, r9
 8013680:	461d      	mov	r5, r3
 8013682:	9903      	ldr	r1, [sp, #12]
 8013684:	e7d7      	b.n	8013636 <__hexnan+0x2e>
 8013686:	2a29      	cmp	r2, #41	; 0x29
 8013688:	d156      	bne.n	8013738 <__hexnan+0x130>
 801368a:	3102      	adds	r1, #2
 801368c:	f8ca 1000 	str.w	r1, [sl]
 8013690:	f1bb 0f00 	cmp.w	fp, #0
 8013694:	d050      	beq.n	8013738 <__hexnan+0x130>
 8013696:	454c      	cmp	r4, r9
 8013698:	d206      	bcs.n	80136a8 <__hexnan+0xa0>
 801369a:	2d07      	cmp	r5, #7
 801369c:	dc04      	bgt.n	80136a8 <__hexnan+0xa0>
 801369e:	462a      	mov	r2, r5
 80136a0:	4649      	mov	r1, r9
 80136a2:	4620      	mov	r0, r4
 80136a4:	f7ff ff8a 	bl	80135bc <L_shift>
 80136a8:	4544      	cmp	r4, r8
 80136aa:	d934      	bls.n	8013716 <__hexnan+0x10e>
 80136ac:	f1a8 0204 	sub.w	r2, r8, #4
 80136b0:	4623      	mov	r3, r4
 80136b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80136b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80136ba:	429f      	cmp	r7, r3
 80136bc:	d2f9      	bcs.n	80136b2 <__hexnan+0xaa>
 80136be:	1b3b      	subs	r3, r7, r4
 80136c0:	f023 0303 	bic.w	r3, r3, #3
 80136c4:	3304      	adds	r3, #4
 80136c6:	3401      	adds	r4, #1
 80136c8:	3e03      	subs	r6, #3
 80136ca:	42b4      	cmp	r4, r6
 80136cc:	bf88      	it	hi
 80136ce:	2304      	movhi	r3, #4
 80136d0:	4443      	add	r3, r8
 80136d2:	2200      	movs	r2, #0
 80136d4:	f843 2b04 	str.w	r2, [r3], #4
 80136d8:	429f      	cmp	r7, r3
 80136da:	d2fb      	bcs.n	80136d4 <__hexnan+0xcc>
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	b91b      	cbnz	r3, 80136e8 <__hexnan+0xe0>
 80136e0:	4547      	cmp	r7, r8
 80136e2:	d127      	bne.n	8013734 <__hexnan+0x12c>
 80136e4:	2301      	movs	r3, #1
 80136e6:	603b      	str	r3, [r7, #0]
 80136e8:	2005      	movs	r0, #5
 80136ea:	e026      	b.n	801373a <__hexnan+0x132>
 80136ec:	3501      	adds	r5, #1
 80136ee:	2d08      	cmp	r5, #8
 80136f0:	f10b 0b01 	add.w	fp, fp, #1
 80136f4:	dd06      	ble.n	8013704 <__hexnan+0xfc>
 80136f6:	4544      	cmp	r4, r8
 80136f8:	d9c3      	bls.n	8013682 <__hexnan+0x7a>
 80136fa:	2300      	movs	r3, #0
 80136fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8013700:	2501      	movs	r5, #1
 8013702:	3c04      	subs	r4, #4
 8013704:	6822      	ldr	r2, [r4, #0]
 8013706:	f000 000f 	and.w	r0, r0, #15
 801370a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801370e:	6022      	str	r2, [r4, #0]
 8013710:	e7b7      	b.n	8013682 <__hexnan+0x7a>
 8013712:	2508      	movs	r5, #8
 8013714:	e7b5      	b.n	8013682 <__hexnan+0x7a>
 8013716:	9b01      	ldr	r3, [sp, #4]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d0df      	beq.n	80136dc <__hexnan+0xd4>
 801371c:	f04f 32ff 	mov.w	r2, #4294967295
 8013720:	f1c3 0320 	rsb	r3, r3, #32
 8013724:	fa22 f303 	lsr.w	r3, r2, r3
 8013728:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801372c:	401a      	ands	r2, r3
 801372e:	f846 2c04 	str.w	r2, [r6, #-4]
 8013732:	e7d3      	b.n	80136dc <__hexnan+0xd4>
 8013734:	3f04      	subs	r7, #4
 8013736:	e7d1      	b.n	80136dc <__hexnan+0xd4>
 8013738:	2004      	movs	r0, #4
 801373a:	b007      	add	sp, #28
 801373c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013740 <_localeconv_r>:
 8013740:	4800      	ldr	r0, [pc, #0]	; (8013744 <_localeconv_r+0x4>)
 8013742:	4770      	bx	lr
 8013744:	200002f0 	.word	0x200002f0

08013748 <malloc>:
 8013748:	4b02      	ldr	r3, [pc, #8]	; (8013754 <malloc+0xc>)
 801374a:	4601      	mov	r1, r0
 801374c:	6818      	ldr	r0, [r3, #0]
 801374e:	f000 bd2f 	b.w	80141b0 <_malloc_r>
 8013752:	bf00      	nop
 8013754:	20000198 	.word	0x20000198

08013758 <__ascii_mbtowc>:
 8013758:	b082      	sub	sp, #8
 801375a:	b901      	cbnz	r1, 801375e <__ascii_mbtowc+0x6>
 801375c:	a901      	add	r1, sp, #4
 801375e:	b142      	cbz	r2, 8013772 <__ascii_mbtowc+0x1a>
 8013760:	b14b      	cbz	r3, 8013776 <__ascii_mbtowc+0x1e>
 8013762:	7813      	ldrb	r3, [r2, #0]
 8013764:	600b      	str	r3, [r1, #0]
 8013766:	7812      	ldrb	r2, [r2, #0]
 8013768:	1e10      	subs	r0, r2, #0
 801376a:	bf18      	it	ne
 801376c:	2001      	movne	r0, #1
 801376e:	b002      	add	sp, #8
 8013770:	4770      	bx	lr
 8013772:	4610      	mov	r0, r2
 8013774:	e7fb      	b.n	801376e <__ascii_mbtowc+0x16>
 8013776:	f06f 0001 	mvn.w	r0, #1
 801377a:	e7f8      	b.n	801376e <__ascii_mbtowc+0x16>

0801377c <_Balloc>:
 801377c:	b570      	push	{r4, r5, r6, lr}
 801377e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013780:	4604      	mov	r4, r0
 8013782:	460d      	mov	r5, r1
 8013784:	b976      	cbnz	r6, 80137a4 <_Balloc+0x28>
 8013786:	2010      	movs	r0, #16
 8013788:	f7ff ffde 	bl	8013748 <malloc>
 801378c:	4602      	mov	r2, r0
 801378e:	6260      	str	r0, [r4, #36]	; 0x24
 8013790:	b920      	cbnz	r0, 801379c <_Balloc+0x20>
 8013792:	4b18      	ldr	r3, [pc, #96]	; (80137f4 <_Balloc+0x78>)
 8013794:	4818      	ldr	r0, [pc, #96]	; (80137f8 <_Balloc+0x7c>)
 8013796:	2166      	movs	r1, #102	; 0x66
 8013798:	f000 fefa 	bl	8014590 <__assert_func>
 801379c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137a0:	6006      	str	r6, [r0, #0]
 80137a2:	60c6      	str	r6, [r0, #12]
 80137a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80137a6:	68f3      	ldr	r3, [r6, #12]
 80137a8:	b183      	cbz	r3, 80137cc <_Balloc+0x50>
 80137aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137ac:	68db      	ldr	r3, [r3, #12]
 80137ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80137b2:	b9b8      	cbnz	r0, 80137e4 <_Balloc+0x68>
 80137b4:	2101      	movs	r1, #1
 80137b6:	fa01 f605 	lsl.w	r6, r1, r5
 80137ba:	1d72      	adds	r2, r6, #5
 80137bc:	0092      	lsls	r2, r2, #2
 80137be:	4620      	mov	r0, r4
 80137c0:	f000 fc97 	bl	80140f2 <_calloc_r>
 80137c4:	b160      	cbz	r0, 80137e0 <_Balloc+0x64>
 80137c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80137ca:	e00e      	b.n	80137ea <_Balloc+0x6e>
 80137cc:	2221      	movs	r2, #33	; 0x21
 80137ce:	2104      	movs	r1, #4
 80137d0:	4620      	mov	r0, r4
 80137d2:	f000 fc8e 	bl	80140f2 <_calloc_r>
 80137d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137d8:	60f0      	str	r0, [r6, #12]
 80137da:	68db      	ldr	r3, [r3, #12]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d1e4      	bne.n	80137aa <_Balloc+0x2e>
 80137e0:	2000      	movs	r0, #0
 80137e2:	bd70      	pop	{r4, r5, r6, pc}
 80137e4:	6802      	ldr	r2, [r0, #0]
 80137e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80137ea:	2300      	movs	r3, #0
 80137ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80137f0:	e7f7      	b.n	80137e2 <_Balloc+0x66>
 80137f2:	bf00      	nop
 80137f4:	080155fe 	.word	0x080155fe
 80137f8:	08015704 	.word	0x08015704

080137fc <_Bfree>:
 80137fc:	b570      	push	{r4, r5, r6, lr}
 80137fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013800:	4605      	mov	r5, r0
 8013802:	460c      	mov	r4, r1
 8013804:	b976      	cbnz	r6, 8013824 <_Bfree+0x28>
 8013806:	2010      	movs	r0, #16
 8013808:	f7ff ff9e 	bl	8013748 <malloc>
 801380c:	4602      	mov	r2, r0
 801380e:	6268      	str	r0, [r5, #36]	; 0x24
 8013810:	b920      	cbnz	r0, 801381c <_Bfree+0x20>
 8013812:	4b09      	ldr	r3, [pc, #36]	; (8013838 <_Bfree+0x3c>)
 8013814:	4809      	ldr	r0, [pc, #36]	; (801383c <_Bfree+0x40>)
 8013816:	218a      	movs	r1, #138	; 0x8a
 8013818:	f000 feba 	bl	8014590 <__assert_func>
 801381c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013820:	6006      	str	r6, [r0, #0]
 8013822:	60c6      	str	r6, [r0, #12]
 8013824:	b13c      	cbz	r4, 8013836 <_Bfree+0x3a>
 8013826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013828:	6862      	ldr	r2, [r4, #4]
 801382a:	68db      	ldr	r3, [r3, #12]
 801382c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013830:	6021      	str	r1, [r4, #0]
 8013832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013836:	bd70      	pop	{r4, r5, r6, pc}
 8013838:	080155fe 	.word	0x080155fe
 801383c:	08015704 	.word	0x08015704

08013840 <__multadd>:
 8013840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013844:	690e      	ldr	r6, [r1, #16]
 8013846:	4607      	mov	r7, r0
 8013848:	4698      	mov	r8, r3
 801384a:	460c      	mov	r4, r1
 801384c:	f101 0014 	add.w	r0, r1, #20
 8013850:	2300      	movs	r3, #0
 8013852:	6805      	ldr	r5, [r0, #0]
 8013854:	b2a9      	uxth	r1, r5
 8013856:	fb02 8101 	mla	r1, r2, r1, r8
 801385a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801385e:	0c2d      	lsrs	r5, r5, #16
 8013860:	fb02 c505 	mla	r5, r2, r5, ip
 8013864:	b289      	uxth	r1, r1
 8013866:	3301      	adds	r3, #1
 8013868:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801386c:	429e      	cmp	r6, r3
 801386e:	f840 1b04 	str.w	r1, [r0], #4
 8013872:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013876:	dcec      	bgt.n	8013852 <__multadd+0x12>
 8013878:	f1b8 0f00 	cmp.w	r8, #0
 801387c:	d022      	beq.n	80138c4 <__multadd+0x84>
 801387e:	68a3      	ldr	r3, [r4, #8]
 8013880:	42b3      	cmp	r3, r6
 8013882:	dc19      	bgt.n	80138b8 <__multadd+0x78>
 8013884:	6861      	ldr	r1, [r4, #4]
 8013886:	4638      	mov	r0, r7
 8013888:	3101      	adds	r1, #1
 801388a:	f7ff ff77 	bl	801377c <_Balloc>
 801388e:	4605      	mov	r5, r0
 8013890:	b928      	cbnz	r0, 801389e <__multadd+0x5e>
 8013892:	4602      	mov	r2, r0
 8013894:	4b0d      	ldr	r3, [pc, #52]	; (80138cc <__multadd+0x8c>)
 8013896:	480e      	ldr	r0, [pc, #56]	; (80138d0 <__multadd+0x90>)
 8013898:	21b5      	movs	r1, #181	; 0xb5
 801389a:	f000 fe79 	bl	8014590 <__assert_func>
 801389e:	6922      	ldr	r2, [r4, #16]
 80138a0:	3202      	adds	r2, #2
 80138a2:	f104 010c 	add.w	r1, r4, #12
 80138a6:	0092      	lsls	r2, r2, #2
 80138a8:	300c      	adds	r0, #12
 80138aa:	f7fc ffc1 	bl	8010830 <memcpy>
 80138ae:	4621      	mov	r1, r4
 80138b0:	4638      	mov	r0, r7
 80138b2:	f7ff ffa3 	bl	80137fc <_Bfree>
 80138b6:	462c      	mov	r4, r5
 80138b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80138bc:	3601      	adds	r6, #1
 80138be:	f8c3 8014 	str.w	r8, [r3, #20]
 80138c2:	6126      	str	r6, [r4, #16]
 80138c4:	4620      	mov	r0, r4
 80138c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ca:	bf00      	nop
 80138cc:	08015674 	.word	0x08015674
 80138d0:	08015704 	.word	0x08015704

080138d4 <__s2b>:
 80138d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138d8:	460c      	mov	r4, r1
 80138da:	4615      	mov	r5, r2
 80138dc:	461f      	mov	r7, r3
 80138de:	2209      	movs	r2, #9
 80138e0:	3308      	adds	r3, #8
 80138e2:	4606      	mov	r6, r0
 80138e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80138e8:	2100      	movs	r1, #0
 80138ea:	2201      	movs	r2, #1
 80138ec:	429a      	cmp	r2, r3
 80138ee:	db09      	blt.n	8013904 <__s2b+0x30>
 80138f0:	4630      	mov	r0, r6
 80138f2:	f7ff ff43 	bl	801377c <_Balloc>
 80138f6:	b940      	cbnz	r0, 801390a <__s2b+0x36>
 80138f8:	4602      	mov	r2, r0
 80138fa:	4b19      	ldr	r3, [pc, #100]	; (8013960 <__s2b+0x8c>)
 80138fc:	4819      	ldr	r0, [pc, #100]	; (8013964 <__s2b+0x90>)
 80138fe:	21ce      	movs	r1, #206	; 0xce
 8013900:	f000 fe46 	bl	8014590 <__assert_func>
 8013904:	0052      	lsls	r2, r2, #1
 8013906:	3101      	adds	r1, #1
 8013908:	e7f0      	b.n	80138ec <__s2b+0x18>
 801390a:	9b08      	ldr	r3, [sp, #32]
 801390c:	6143      	str	r3, [r0, #20]
 801390e:	2d09      	cmp	r5, #9
 8013910:	f04f 0301 	mov.w	r3, #1
 8013914:	6103      	str	r3, [r0, #16]
 8013916:	dd16      	ble.n	8013946 <__s2b+0x72>
 8013918:	f104 0909 	add.w	r9, r4, #9
 801391c:	46c8      	mov	r8, r9
 801391e:	442c      	add	r4, r5
 8013920:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013924:	4601      	mov	r1, r0
 8013926:	3b30      	subs	r3, #48	; 0x30
 8013928:	220a      	movs	r2, #10
 801392a:	4630      	mov	r0, r6
 801392c:	f7ff ff88 	bl	8013840 <__multadd>
 8013930:	45a0      	cmp	r8, r4
 8013932:	d1f5      	bne.n	8013920 <__s2b+0x4c>
 8013934:	f1a5 0408 	sub.w	r4, r5, #8
 8013938:	444c      	add	r4, r9
 801393a:	1b2d      	subs	r5, r5, r4
 801393c:	1963      	adds	r3, r4, r5
 801393e:	42bb      	cmp	r3, r7
 8013940:	db04      	blt.n	801394c <__s2b+0x78>
 8013942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013946:	340a      	adds	r4, #10
 8013948:	2509      	movs	r5, #9
 801394a:	e7f6      	b.n	801393a <__s2b+0x66>
 801394c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013950:	4601      	mov	r1, r0
 8013952:	3b30      	subs	r3, #48	; 0x30
 8013954:	220a      	movs	r2, #10
 8013956:	4630      	mov	r0, r6
 8013958:	f7ff ff72 	bl	8013840 <__multadd>
 801395c:	e7ee      	b.n	801393c <__s2b+0x68>
 801395e:	bf00      	nop
 8013960:	08015674 	.word	0x08015674
 8013964:	08015704 	.word	0x08015704

08013968 <__hi0bits>:
 8013968:	0c03      	lsrs	r3, r0, #16
 801396a:	041b      	lsls	r3, r3, #16
 801396c:	b9d3      	cbnz	r3, 80139a4 <__hi0bits+0x3c>
 801396e:	0400      	lsls	r0, r0, #16
 8013970:	2310      	movs	r3, #16
 8013972:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013976:	bf04      	itt	eq
 8013978:	0200      	lsleq	r0, r0, #8
 801397a:	3308      	addeq	r3, #8
 801397c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013980:	bf04      	itt	eq
 8013982:	0100      	lsleq	r0, r0, #4
 8013984:	3304      	addeq	r3, #4
 8013986:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801398a:	bf04      	itt	eq
 801398c:	0080      	lsleq	r0, r0, #2
 801398e:	3302      	addeq	r3, #2
 8013990:	2800      	cmp	r0, #0
 8013992:	db05      	blt.n	80139a0 <__hi0bits+0x38>
 8013994:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013998:	f103 0301 	add.w	r3, r3, #1
 801399c:	bf08      	it	eq
 801399e:	2320      	moveq	r3, #32
 80139a0:	4618      	mov	r0, r3
 80139a2:	4770      	bx	lr
 80139a4:	2300      	movs	r3, #0
 80139a6:	e7e4      	b.n	8013972 <__hi0bits+0xa>

080139a8 <__lo0bits>:
 80139a8:	6803      	ldr	r3, [r0, #0]
 80139aa:	f013 0207 	ands.w	r2, r3, #7
 80139ae:	4601      	mov	r1, r0
 80139b0:	d00b      	beq.n	80139ca <__lo0bits+0x22>
 80139b2:	07da      	lsls	r2, r3, #31
 80139b4:	d424      	bmi.n	8013a00 <__lo0bits+0x58>
 80139b6:	0798      	lsls	r0, r3, #30
 80139b8:	bf49      	itett	mi
 80139ba:	085b      	lsrmi	r3, r3, #1
 80139bc:	089b      	lsrpl	r3, r3, #2
 80139be:	2001      	movmi	r0, #1
 80139c0:	600b      	strmi	r3, [r1, #0]
 80139c2:	bf5c      	itt	pl
 80139c4:	600b      	strpl	r3, [r1, #0]
 80139c6:	2002      	movpl	r0, #2
 80139c8:	4770      	bx	lr
 80139ca:	b298      	uxth	r0, r3
 80139cc:	b9b0      	cbnz	r0, 80139fc <__lo0bits+0x54>
 80139ce:	0c1b      	lsrs	r3, r3, #16
 80139d0:	2010      	movs	r0, #16
 80139d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80139d6:	bf04      	itt	eq
 80139d8:	0a1b      	lsreq	r3, r3, #8
 80139da:	3008      	addeq	r0, #8
 80139dc:	071a      	lsls	r2, r3, #28
 80139de:	bf04      	itt	eq
 80139e0:	091b      	lsreq	r3, r3, #4
 80139e2:	3004      	addeq	r0, #4
 80139e4:	079a      	lsls	r2, r3, #30
 80139e6:	bf04      	itt	eq
 80139e8:	089b      	lsreq	r3, r3, #2
 80139ea:	3002      	addeq	r0, #2
 80139ec:	07da      	lsls	r2, r3, #31
 80139ee:	d403      	bmi.n	80139f8 <__lo0bits+0x50>
 80139f0:	085b      	lsrs	r3, r3, #1
 80139f2:	f100 0001 	add.w	r0, r0, #1
 80139f6:	d005      	beq.n	8013a04 <__lo0bits+0x5c>
 80139f8:	600b      	str	r3, [r1, #0]
 80139fa:	4770      	bx	lr
 80139fc:	4610      	mov	r0, r2
 80139fe:	e7e8      	b.n	80139d2 <__lo0bits+0x2a>
 8013a00:	2000      	movs	r0, #0
 8013a02:	4770      	bx	lr
 8013a04:	2020      	movs	r0, #32
 8013a06:	4770      	bx	lr

08013a08 <__i2b>:
 8013a08:	b510      	push	{r4, lr}
 8013a0a:	460c      	mov	r4, r1
 8013a0c:	2101      	movs	r1, #1
 8013a0e:	f7ff feb5 	bl	801377c <_Balloc>
 8013a12:	4602      	mov	r2, r0
 8013a14:	b928      	cbnz	r0, 8013a22 <__i2b+0x1a>
 8013a16:	4b05      	ldr	r3, [pc, #20]	; (8013a2c <__i2b+0x24>)
 8013a18:	4805      	ldr	r0, [pc, #20]	; (8013a30 <__i2b+0x28>)
 8013a1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013a1e:	f000 fdb7 	bl	8014590 <__assert_func>
 8013a22:	2301      	movs	r3, #1
 8013a24:	6144      	str	r4, [r0, #20]
 8013a26:	6103      	str	r3, [r0, #16]
 8013a28:	bd10      	pop	{r4, pc}
 8013a2a:	bf00      	nop
 8013a2c:	08015674 	.word	0x08015674
 8013a30:	08015704 	.word	0x08015704

08013a34 <__multiply>:
 8013a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a38:	4614      	mov	r4, r2
 8013a3a:	690a      	ldr	r2, [r1, #16]
 8013a3c:	6923      	ldr	r3, [r4, #16]
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	bfb8      	it	lt
 8013a42:	460b      	movlt	r3, r1
 8013a44:	460d      	mov	r5, r1
 8013a46:	bfbc      	itt	lt
 8013a48:	4625      	movlt	r5, r4
 8013a4a:	461c      	movlt	r4, r3
 8013a4c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013a50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013a54:	68ab      	ldr	r3, [r5, #8]
 8013a56:	6869      	ldr	r1, [r5, #4]
 8013a58:	eb0a 0709 	add.w	r7, sl, r9
 8013a5c:	42bb      	cmp	r3, r7
 8013a5e:	b085      	sub	sp, #20
 8013a60:	bfb8      	it	lt
 8013a62:	3101      	addlt	r1, #1
 8013a64:	f7ff fe8a 	bl	801377c <_Balloc>
 8013a68:	b930      	cbnz	r0, 8013a78 <__multiply+0x44>
 8013a6a:	4602      	mov	r2, r0
 8013a6c:	4b42      	ldr	r3, [pc, #264]	; (8013b78 <__multiply+0x144>)
 8013a6e:	4843      	ldr	r0, [pc, #268]	; (8013b7c <__multiply+0x148>)
 8013a70:	f240 115d 	movw	r1, #349	; 0x15d
 8013a74:	f000 fd8c 	bl	8014590 <__assert_func>
 8013a78:	f100 0614 	add.w	r6, r0, #20
 8013a7c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013a80:	4633      	mov	r3, r6
 8013a82:	2200      	movs	r2, #0
 8013a84:	4543      	cmp	r3, r8
 8013a86:	d31e      	bcc.n	8013ac6 <__multiply+0x92>
 8013a88:	f105 0c14 	add.w	ip, r5, #20
 8013a8c:	f104 0314 	add.w	r3, r4, #20
 8013a90:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013a94:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013a98:	9202      	str	r2, [sp, #8]
 8013a9a:	ebac 0205 	sub.w	r2, ip, r5
 8013a9e:	3a15      	subs	r2, #21
 8013aa0:	f022 0203 	bic.w	r2, r2, #3
 8013aa4:	3204      	adds	r2, #4
 8013aa6:	f105 0115 	add.w	r1, r5, #21
 8013aaa:	458c      	cmp	ip, r1
 8013aac:	bf38      	it	cc
 8013aae:	2204      	movcc	r2, #4
 8013ab0:	9201      	str	r2, [sp, #4]
 8013ab2:	9a02      	ldr	r2, [sp, #8]
 8013ab4:	9303      	str	r3, [sp, #12]
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d808      	bhi.n	8013acc <__multiply+0x98>
 8013aba:	2f00      	cmp	r7, #0
 8013abc:	dc55      	bgt.n	8013b6a <__multiply+0x136>
 8013abe:	6107      	str	r7, [r0, #16]
 8013ac0:	b005      	add	sp, #20
 8013ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ac6:	f843 2b04 	str.w	r2, [r3], #4
 8013aca:	e7db      	b.n	8013a84 <__multiply+0x50>
 8013acc:	f8b3 a000 	ldrh.w	sl, [r3]
 8013ad0:	f1ba 0f00 	cmp.w	sl, #0
 8013ad4:	d020      	beq.n	8013b18 <__multiply+0xe4>
 8013ad6:	f105 0e14 	add.w	lr, r5, #20
 8013ada:	46b1      	mov	r9, r6
 8013adc:	2200      	movs	r2, #0
 8013ade:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013ae2:	f8d9 b000 	ldr.w	fp, [r9]
 8013ae6:	b2a1      	uxth	r1, r4
 8013ae8:	fa1f fb8b 	uxth.w	fp, fp
 8013aec:	fb0a b101 	mla	r1, sl, r1, fp
 8013af0:	4411      	add	r1, r2
 8013af2:	f8d9 2000 	ldr.w	r2, [r9]
 8013af6:	0c24      	lsrs	r4, r4, #16
 8013af8:	0c12      	lsrs	r2, r2, #16
 8013afa:	fb0a 2404 	mla	r4, sl, r4, r2
 8013afe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013b02:	b289      	uxth	r1, r1
 8013b04:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013b08:	45f4      	cmp	ip, lr
 8013b0a:	f849 1b04 	str.w	r1, [r9], #4
 8013b0e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013b12:	d8e4      	bhi.n	8013ade <__multiply+0xaa>
 8013b14:	9901      	ldr	r1, [sp, #4]
 8013b16:	5072      	str	r2, [r6, r1]
 8013b18:	9a03      	ldr	r2, [sp, #12]
 8013b1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013b1e:	3304      	adds	r3, #4
 8013b20:	f1b9 0f00 	cmp.w	r9, #0
 8013b24:	d01f      	beq.n	8013b66 <__multiply+0x132>
 8013b26:	6834      	ldr	r4, [r6, #0]
 8013b28:	f105 0114 	add.w	r1, r5, #20
 8013b2c:	46b6      	mov	lr, r6
 8013b2e:	f04f 0a00 	mov.w	sl, #0
 8013b32:	880a      	ldrh	r2, [r1, #0]
 8013b34:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013b38:	fb09 b202 	mla	r2, r9, r2, fp
 8013b3c:	4492      	add	sl, r2
 8013b3e:	b2a4      	uxth	r4, r4
 8013b40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013b44:	f84e 4b04 	str.w	r4, [lr], #4
 8013b48:	f851 4b04 	ldr.w	r4, [r1], #4
 8013b4c:	f8be 2000 	ldrh.w	r2, [lr]
 8013b50:	0c24      	lsrs	r4, r4, #16
 8013b52:	fb09 2404 	mla	r4, r9, r4, r2
 8013b56:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013b5a:	458c      	cmp	ip, r1
 8013b5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013b60:	d8e7      	bhi.n	8013b32 <__multiply+0xfe>
 8013b62:	9a01      	ldr	r2, [sp, #4]
 8013b64:	50b4      	str	r4, [r6, r2]
 8013b66:	3604      	adds	r6, #4
 8013b68:	e7a3      	b.n	8013ab2 <__multiply+0x7e>
 8013b6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d1a5      	bne.n	8013abe <__multiply+0x8a>
 8013b72:	3f01      	subs	r7, #1
 8013b74:	e7a1      	b.n	8013aba <__multiply+0x86>
 8013b76:	bf00      	nop
 8013b78:	08015674 	.word	0x08015674
 8013b7c:	08015704 	.word	0x08015704

08013b80 <__pow5mult>:
 8013b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b84:	4615      	mov	r5, r2
 8013b86:	f012 0203 	ands.w	r2, r2, #3
 8013b8a:	4606      	mov	r6, r0
 8013b8c:	460f      	mov	r7, r1
 8013b8e:	d007      	beq.n	8013ba0 <__pow5mult+0x20>
 8013b90:	4c25      	ldr	r4, [pc, #148]	; (8013c28 <__pow5mult+0xa8>)
 8013b92:	3a01      	subs	r2, #1
 8013b94:	2300      	movs	r3, #0
 8013b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013b9a:	f7ff fe51 	bl	8013840 <__multadd>
 8013b9e:	4607      	mov	r7, r0
 8013ba0:	10ad      	asrs	r5, r5, #2
 8013ba2:	d03d      	beq.n	8013c20 <__pow5mult+0xa0>
 8013ba4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013ba6:	b97c      	cbnz	r4, 8013bc8 <__pow5mult+0x48>
 8013ba8:	2010      	movs	r0, #16
 8013baa:	f7ff fdcd 	bl	8013748 <malloc>
 8013bae:	4602      	mov	r2, r0
 8013bb0:	6270      	str	r0, [r6, #36]	; 0x24
 8013bb2:	b928      	cbnz	r0, 8013bc0 <__pow5mult+0x40>
 8013bb4:	4b1d      	ldr	r3, [pc, #116]	; (8013c2c <__pow5mult+0xac>)
 8013bb6:	481e      	ldr	r0, [pc, #120]	; (8013c30 <__pow5mult+0xb0>)
 8013bb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013bbc:	f000 fce8 	bl	8014590 <__assert_func>
 8013bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013bc4:	6004      	str	r4, [r0, #0]
 8013bc6:	60c4      	str	r4, [r0, #12]
 8013bc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013bd0:	b94c      	cbnz	r4, 8013be6 <__pow5mult+0x66>
 8013bd2:	f240 2171 	movw	r1, #625	; 0x271
 8013bd6:	4630      	mov	r0, r6
 8013bd8:	f7ff ff16 	bl	8013a08 <__i2b>
 8013bdc:	2300      	movs	r3, #0
 8013bde:	f8c8 0008 	str.w	r0, [r8, #8]
 8013be2:	4604      	mov	r4, r0
 8013be4:	6003      	str	r3, [r0, #0]
 8013be6:	f04f 0900 	mov.w	r9, #0
 8013bea:	07eb      	lsls	r3, r5, #31
 8013bec:	d50a      	bpl.n	8013c04 <__pow5mult+0x84>
 8013bee:	4639      	mov	r1, r7
 8013bf0:	4622      	mov	r2, r4
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f7ff ff1e 	bl	8013a34 <__multiply>
 8013bf8:	4639      	mov	r1, r7
 8013bfa:	4680      	mov	r8, r0
 8013bfc:	4630      	mov	r0, r6
 8013bfe:	f7ff fdfd 	bl	80137fc <_Bfree>
 8013c02:	4647      	mov	r7, r8
 8013c04:	106d      	asrs	r5, r5, #1
 8013c06:	d00b      	beq.n	8013c20 <__pow5mult+0xa0>
 8013c08:	6820      	ldr	r0, [r4, #0]
 8013c0a:	b938      	cbnz	r0, 8013c1c <__pow5mult+0x9c>
 8013c0c:	4622      	mov	r2, r4
 8013c0e:	4621      	mov	r1, r4
 8013c10:	4630      	mov	r0, r6
 8013c12:	f7ff ff0f 	bl	8013a34 <__multiply>
 8013c16:	6020      	str	r0, [r4, #0]
 8013c18:	f8c0 9000 	str.w	r9, [r0]
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	e7e4      	b.n	8013bea <__pow5mult+0x6a>
 8013c20:	4638      	mov	r0, r7
 8013c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c26:	bf00      	nop
 8013c28:	08015858 	.word	0x08015858
 8013c2c:	080155fe 	.word	0x080155fe
 8013c30:	08015704 	.word	0x08015704

08013c34 <__lshift>:
 8013c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c38:	460c      	mov	r4, r1
 8013c3a:	6849      	ldr	r1, [r1, #4]
 8013c3c:	6923      	ldr	r3, [r4, #16]
 8013c3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013c42:	68a3      	ldr	r3, [r4, #8]
 8013c44:	4607      	mov	r7, r0
 8013c46:	4691      	mov	r9, r2
 8013c48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013c4c:	f108 0601 	add.w	r6, r8, #1
 8013c50:	42b3      	cmp	r3, r6
 8013c52:	db0b      	blt.n	8013c6c <__lshift+0x38>
 8013c54:	4638      	mov	r0, r7
 8013c56:	f7ff fd91 	bl	801377c <_Balloc>
 8013c5a:	4605      	mov	r5, r0
 8013c5c:	b948      	cbnz	r0, 8013c72 <__lshift+0x3e>
 8013c5e:	4602      	mov	r2, r0
 8013c60:	4b28      	ldr	r3, [pc, #160]	; (8013d04 <__lshift+0xd0>)
 8013c62:	4829      	ldr	r0, [pc, #164]	; (8013d08 <__lshift+0xd4>)
 8013c64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013c68:	f000 fc92 	bl	8014590 <__assert_func>
 8013c6c:	3101      	adds	r1, #1
 8013c6e:	005b      	lsls	r3, r3, #1
 8013c70:	e7ee      	b.n	8013c50 <__lshift+0x1c>
 8013c72:	2300      	movs	r3, #0
 8013c74:	f100 0114 	add.w	r1, r0, #20
 8013c78:	f100 0210 	add.w	r2, r0, #16
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	4553      	cmp	r3, sl
 8013c80:	db33      	blt.n	8013cea <__lshift+0xb6>
 8013c82:	6920      	ldr	r0, [r4, #16]
 8013c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013c88:	f104 0314 	add.w	r3, r4, #20
 8013c8c:	f019 091f 	ands.w	r9, r9, #31
 8013c90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013c94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013c98:	d02b      	beq.n	8013cf2 <__lshift+0xbe>
 8013c9a:	f1c9 0e20 	rsb	lr, r9, #32
 8013c9e:	468a      	mov	sl, r1
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	6818      	ldr	r0, [r3, #0]
 8013ca4:	fa00 f009 	lsl.w	r0, r0, r9
 8013ca8:	4302      	orrs	r2, r0
 8013caa:	f84a 2b04 	str.w	r2, [sl], #4
 8013cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cb2:	459c      	cmp	ip, r3
 8013cb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8013cb8:	d8f3      	bhi.n	8013ca2 <__lshift+0x6e>
 8013cba:	ebac 0304 	sub.w	r3, ip, r4
 8013cbe:	3b15      	subs	r3, #21
 8013cc0:	f023 0303 	bic.w	r3, r3, #3
 8013cc4:	3304      	adds	r3, #4
 8013cc6:	f104 0015 	add.w	r0, r4, #21
 8013cca:	4584      	cmp	ip, r0
 8013ccc:	bf38      	it	cc
 8013cce:	2304      	movcc	r3, #4
 8013cd0:	50ca      	str	r2, [r1, r3]
 8013cd2:	b10a      	cbz	r2, 8013cd8 <__lshift+0xa4>
 8013cd4:	f108 0602 	add.w	r6, r8, #2
 8013cd8:	3e01      	subs	r6, #1
 8013cda:	4638      	mov	r0, r7
 8013cdc:	612e      	str	r6, [r5, #16]
 8013cde:	4621      	mov	r1, r4
 8013ce0:	f7ff fd8c 	bl	80137fc <_Bfree>
 8013ce4:	4628      	mov	r0, r5
 8013ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cea:	f842 0f04 	str.w	r0, [r2, #4]!
 8013cee:	3301      	adds	r3, #1
 8013cf0:	e7c5      	b.n	8013c7e <__lshift+0x4a>
 8013cf2:	3904      	subs	r1, #4
 8013cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cf8:	f841 2f04 	str.w	r2, [r1, #4]!
 8013cfc:	459c      	cmp	ip, r3
 8013cfe:	d8f9      	bhi.n	8013cf4 <__lshift+0xc0>
 8013d00:	e7ea      	b.n	8013cd8 <__lshift+0xa4>
 8013d02:	bf00      	nop
 8013d04:	08015674 	.word	0x08015674
 8013d08:	08015704 	.word	0x08015704

08013d0c <__mcmp>:
 8013d0c:	b530      	push	{r4, r5, lr}
 8013d0e:	6902      	ldr	r2, [r0, #16]
 8013d10:	690c      	ldr	r4, [r1, #16]
 8013d12:	1b12      	subs	r2, r2, r4
 8013d14:	d10e      	bne.n	8013d34 <__mcmp+0x28>
 8013d16:	f100 0314 	add.w	r3, r0, #20
 8013d1a:	3114      	adds	r1, #20
 8013d1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013d20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013d24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013d28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013d2c:	42a5      	cmp	r5, r4
 8013d2e:	d003      	beq.n	8013d38 <__mcmp+0x2c>
 8013d30:	d305      	bcc.n	8013d3e <__mcmp+0x32>
 8013d32:	2201      	movs	r2, #1
 8013d34:	4610      	mov	r0, r2
 8013d36:	bd30      	pop	{r4, r5, pc}
 8013d38:	4283      	cmp	r3, r0
 8013d3a:	d3f3      	bcc.n	8013d24 <__mcmp+0x18>
 8013d3c:	e7fa      	b.n	8013d34 <__mcmp+0x28>
 8013d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8013d42:	e7f7      	b.n	8013d34 <__mcmp+0x28>

08013d44 <__mdiff>:
 8013d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d48:	460c      	mov	r4, r1
 8013d4a:	4606      	mov	r6, r0
 8013d4c:	4611      	mov	r1, r2
 8013d4e:	4620      	mov	r0, r4
 8013d50:	4617      	mov	r7, r2
 8013d52:	f7ff ffdb 	bl	8013d0c <__mcmp>
 8013d56:	1e05      	subs	r5, r0, #0
 8013d58:	d110      	bne.n	8013d7c <__mdiff+0x38>
 8013d5a:	4629      	mov	r1, r5
 8013d5c:	4630      	mov	r0, r6
 8013d5e:	f7ff fd0d 	bl	801377c <_Balloc>
 8013d62:	b930      	cbnz	r0, 8013d72 <__mdiff+0x2e>
 8013d64:	4b39      	ldr	r3, [pc, #228]	; (8013e4c <__mdiff+0x108>)
 8013d66:	4602      	mov	r2, r0
 8013d68:	f240 2132 	movw	r1, #562	; 0x232
 8013d6c:	4838      	ldr	r0, [pc, #224]	; (8013e50 <__mdiff+0x10c>)
 8013d6e:	f000 fc0f 	bl	8014590 <__assert_func>
 8013d72:	2301      	movs	r3, #1
 8013d74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013d78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d7c:	bfa4      	itt	ge
 8013d7e:	463b      	movge	r3, r7
 8013d80:	4627      	movge	r7, r4
 8013d82:	4630      	mov	r0, r6
 8013d84:	6879      	ldr	r1, [r7, #4]
 8013d86:	bfa6      	itte	ge
 8013d88:	461c      	movge	r4, r3
 8013d8a:	2500      	movge	r5, #0
 8013d8c:	2501      	movlt	r5, #1
 8013d8e:	f7ff fcf5 	bl	801377c <_Balloc>
 8013d92:	b920      	cbnz	r0, 8013d9e <__mdiff+0x5a>
 8013d94:	4b2d      	ldr	r3, [pc, #180]	; (8013e4c <__mdiff+0x108>)
 8013d96:	4602      	mov	r2, r0
 8013d98:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013d9c:	e7e6      	b.n	8013d6c <__mdiff+0x28>
 8013d9e:	693e      	ldr	r6, [r7, #16]
 8013da0:	60c5      	str	r5, [r0, #12]
 8013da2:	6925      	ldr	r5, [r4, #16]
 8013da4:	f107 0114 	add.w	r1, r7, #20
 8013da8:	f104 0914 	add.w	r9, r4, #20
 8013dac:	f100 0e14 	add.w	lr, r0, #20
 8013db0:	f107 0210 	add.w	r2, r7, #16
 8013db4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013db8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013dbc:	46f2      	mov	sl, lr
 8013dbe:	2700      	movs	r7, #0
 8013dc0:	f859 3b04 	ldr.w	r3, [r9], #4
 8013dc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013dc8:	fa1f f883 	uxth.w	r8, r3
 8013dcc:	fa17 f78b 	uxtah	r7, r7, fp
 8013dd0:	0c1b      	lsrs	r3, r3, #16
 8013dd2:	eba7 0808 	sub.w	r8, r7, r8
 8013dd6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013dda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013dde:	fa1f f888 	uxth.w	r8, r8
 8013de2:	141f      	asrs	r7, r3, #16
 8013de4:	454d      	cmp	r5, r9
 8013de6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013dea:	f84a 3b04 	str.w	r3, [sl], #4
 8013dee:	d8e7      	bhi.n	8013dc0 <__mdiff+0x7c>
 8013df0:	1b2b      	subs	r3, r5, r4
 8013df2:	3b15      	subs	r3, #21
 8013df4:	f023 0303 	bic.w	r3, r3, #3
 8013df8:	3304      	adds	r3, #4
 8013dfa:	3415      	adds	r4, #21
 8013dfc:	42a5      	cmp	r5, r4
 8013dfe:	bf38      	it	cc
 8013e00:	2304      	movcc	r3, #4
 8013e02:	4419      	add	r1, r3
 8013e04:	4473      	add	r3, lr
 8013e06:	469e      	mov	lr, r3
 8013e08:	460d      	mov	r5, r1
 8013e0a:	4565      	cmp	r5, ip
 8013e0c:	d30e      	bcc.n	8013e2c <__mdiff+0xe8>
 8013e0e:	f10c 0203 	add.w	r2, ip, #3
 8013e12:	1a52      	subs	r2, r2, r1
 8013e14:	f022 0203 	bic.w	r2, r2, #3
 8013e18:	3903      	subs	r1, #3
 8013e1a:	458c      	cmp	ip, r1
 8013e1c:	bf38      	it	cc
 8013e1e:	2200      	movcc	r2, #0
 8013e20:	441a      	add	r2, r3
 8013e22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013e26:	b17b      	cbz	r3, 8013e48 <__mdiff+0x104>
 8013e28:	6106      	str	r6, [r0, #16]
 8013e2a:	e7a5      	b.n	8013d78 <__mdiff+0x34>
 8013e2c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013e30:	fa17 f488 	uxtah	r4, r7, r8
 8013e34:	1422      	asrs	r2, r4, #16
 8013e36:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013e3a:	b2a4      	uxth	r4, r4
 8013e3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013e40:	f84e 4b04 	str.w	r4, [lr], #4
 8013e44:	1417      	asrs	r7, r2, #16
 8013e46:	e7e0      	b.n	8013e0a <__mdiff+0xc6>
 8013e48:	3e01      	subs	r6, #1
 8013e4a:	e7ea      	b.n	8013e22 <__mdiff+0xde>
 8013e4c:	08015674 	.word	0x08015674
 8013e50:	08015704 	.word	0x08015704

08013e54 <__ulp>:
 8013e54:	b082      	sub	sp, #8
 8013e56:	ed8d 0b00 	vstr	d0, [sp]
 8013e5a:	9b01      	ldr	r3, [sp, #4]
 8013e5c:	4912      	ldr	r1, [pc, #72]	; (8013ea8 <__ulp+0x54>)
 8013e5e:	4019      	ands	r1, r3
 8013e60:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013e64:	2900      	cmp	r1, #0
 8013e66:	dd05      	ble.n	8013e74 <__ulp+0x20>
 8013e68:	2200      	movs	r2, #0
 8013e6a:	460b      	mov	r3, r1
 8013e6c:	ec43 2b10 	vmov	d0, r2, r3
 8013e70:	b002      	add	sp, #8
 8013e72:	4770      	bx	lr
 8013e74:	4249      	negs	r1, r1
 8013e76:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8013e7a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8013e7e:	f04f 0200 	mov.w	r2, #0
 8013e82:	f04f 0300 	mov.w	r3, #0
 8013e86:	da04      	bge.n	8013e92 <__ulp+0x3e>
 8013e88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013e8c:	fa41 f300 	asr.w	r3, r1, r0
 8013e90:	e7ec      	b.n	8013e6c <__ulp+0x18>
 8013e92:	f1a0 0114 	sub.w	r1, r0, #20
 8013e96:	291e      	cmp	r1, #30
 8013e98:	bfda      	itte	le
 8013e9a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013e9e:	fa20 f101 	lsrle.w	r1, r0, r1
 8013ea2:	2101      	movgt	r1, #1
 8013ea4:	460a      	mov	r2, r1
 8013ea6:	e7e1      	b.n	8013e6c <__ulp+0x18>
 8013ea8:	7ff00000 	.word	0x7ff00000

08013eac <__b2d>:
 8013eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013eae:	6905      	ldr	r5, [r0, #16]
 8013eb0:	f100 0714 	add.w	r7, r0, #20
 8013eb4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013eb8:	1f2e      	subs	r6, r5, #4
 8013eba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013ebe:	4620      	mov	r0, r4
 8013ec0:	f7ff fd52 	bl	8013968 <__hi0bits>
 8013ec4:	f1c0 0320 	rsb	r3, r0, #32
 8013ec8:	280a      	cmp	r0, #10
 8013eca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013f48 <__b2d+0x9c>
 8013ece:	600b      	str	r3, [r1, #0]
 8013ed0:	dc14      	bgt.n	8013efc <__b2d+0x50>
 8013ed2:	f1c0 0e0b 	rsb	lr, r0, #11
 8013ed6:	fa24 f10e 	lsr.w	r1, r4, lr
 8013eda:	42b7      	cmp	r7, r6
 8013edc:	ea41 030c 	orr.w	r3, r1, ip
 8013ee0:	bf34      	ite	cc
 8013ee2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013ee6:	2100      	movcs	r1, #0
 8013ee8:	3015      	adds	r0, #21
 8013eea:	fa04 f000 	lsl.w	r0, r4, r0
 8013eee:	fa21 f10e 	lsr.w	r1, r1, lr
 8013ef2:	ea40 0201 	orr.w	r2, r0, r1
 8013ef6:	ec43 2b10 	vmov	d0, r2, r3
 8013efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013efc:	42b7      	cmp	r7, r6
 8013efe:	bf3a      	itte	cc
 8013f00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013f04:	f1a5 0608 	subcc.w	r6, r5, #8
 8013f08:	2100      	movcs	r1, #0
 8013f0a:	380b      	subs	r0, #11
 8013f0c:	d017      	beq.n	8013f3e <__b2d+0x92>
 8013f0e:	f1c0 0c20 	rsb	ip, r0, #32
 8013f12:	fa04 f500 	lsl.w	r5, r4, r0
 8013f16:	42be      	cmp	r6, r7
 8013f18:	fa21 f40c 	lsr.w	r4, r1, ip
 8013f1c:	ea45 0504 	orr.w	r5, r5, r4
 8013f20:	bf8c      	ite	hi
 8013f22:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013f26:	2400      	movls	r4, #0
 8013f28:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013f2c:	fa01 f000 	lsl.w	r0, r1, r0
 8013f30:	fa24 f40c 	lsr.w	r4, r4, ip
 8013f34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013f38:	ea40 0204 	orr.w	r2, r0, r4
 8013f3c:	e7db      	b.n	8013ef6 <__b2d+0x4a>
 8013f3e:	ea44 030c 	orr.w	r3, r4, ip
 8013f42:	460a      	mov	r2, r1
 8013f44:	e7d7      	b.n	8013ef6 <__b2d+0x4a>
 8013f46:	bf00      	nop
 8013f48:	3ff00000 	.word	0x3ff00000

08013f4c <__d2b>:
 8013f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f50:	4689      	mov	r9, r1
 8013f52:	2101      	movs	r1, #1
 8013f54:	ec57 6b10 	vmov	r6, r7, d0
 8013f58:	4690      	mov	r8, r2
 8013f5a:	f7ff fc0f 	bl	801377c <_Balloc>
 8013f5e:	4604      	mov	r4, r0
 8013f60:	b930      	cbnz	r0, 8013f70 <__d2b+0x24>
 8013f62:	4602      	mov	r2, r0
 8013f64:	4b25      	ldr	r3, [pc, #148]	; (8013ffc <__d2b+0xb0>)
 8013f66:	4826      	ldr	r0, [pc, #152]	; (8014000 <__d2b+0xb4>)
 8013f68:	f240 310a 	movw	r1, #778	; 0x30a
 8013f6c:	f000 fb10 	bl	8014590 <__assert_func>
 8013f70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013f74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013f78:	bb35      	cbnz	r5, 8013fc8 <__d2b+0x7c>
 8013f7a:	2e00      	cmp	r6, #0
 8013f7c:	9301      	str	r3, [sp, #4]
 8013f7e:	d028      	beq.n	8013fd2 <__d2b+0x86>
 8013f80:	4668      	mov	r0, sp
 8013f82:	9600      	str	r6, [sp, #0]
 8013f84:	f7ff fd10 	bl	80139a8 <__lo0bits>
 8013f88:	9900      	ldr	r1, [sp, #0]
 8013f8a:	b300      	cbz	r0, 8013fce <__d2b+0x82>
 8013f8c:	9a01      	ldr	r2, [sp, #4]
 8013f8e:	f1c0 0320 	rsb	r3, r0, #32
 8013f92:	fa02 f303 	lsl.w	r3, r2, r3
 8013f96:	430b      	orrs	r3, r1
 8013f98:	40c2      	lsrs	r2, r0
 8013f9a:	6163      	str	r3, [r4, #20]
 8013f9c:	9201      	str	r2, [sp, #4]
 8013f9e:	9b01      	ldr	r3, [sp, #4]
 8013fa0:	61a3      	str	r3, [r4, #24]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	bf14      	ite	ne
 8013fa6:	2202      	movne	r2, #2
 8013fa8:	2201      	moveq	r2, #1
 8013faa:	6122      	str	r2, [r4, #16]
 8013fac:	b1d5      	cbz	r5, 8013fe4 <__d2b+0x98>
 8013fae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013fb2:	4405      	add	r5, r0
 8013fb4:	f8c9 5000 	str.w	r5, [r9]
 8013fb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013fbc:	f8c8 0000 	str.w	r0, [r8]
 8013fc0:	4620      	mov	r0, r4
 8013fc2:	b003      	add	sp, #12
 8013fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013fcc:	e7d5      	b.n	8013f7a <__d2b+0x2e>
 8013fce:	6161      	str	r1, [r4, #20]
 8013fd0:	e7e5      	b.n	8013f9e <__d2b+0x52>
 8013fd2:	a801      	add	r0, sp, #4
 8013fd4:	f7ff fce8 	bl	80139a8 <__lo0bits>
 8013fd8:	9b01      	ldr	r3, [sp, #4]
 8013fda:	6163      	str	r3, [r4, #20]
 8013fdc:	2201      	movs	r2, #1
 8013fde:	6122      	str	r2, [r4, #16]
 8013fe0:	3020      	adds	r0, #32
 8013fe2:	e7e3      	b.n	8013fac <__d2b+0x60>
 8013fe4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013fe8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013fec:	f8c9 0000 	str.w	r0, [r9]
 8013ff0:	6918      	ldr	r0, [r3, #16]
 8013ff2:	f7ff fcb9 	bl	8013968 <__hi0bits>
 8013ff6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013ffa:	e7df      	b.n	8013fbc <__d2b+0x70>
 8013ffc:	08015674 	.word	0x08015674
 8014000:	08015704 	.word	0x08015704

08014004 <__ratio>:
 8014004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014008:	4688      	mov	r8, r1
 801400a:	4669      	mov	r1, sp
 801400c:	4681      	mov	r9, r0
 801400e:	f7ff ff4d 	bl	8013eac <__b2d>
 8014012:	a901      	add	r1, sp, #4
 8014014:	4640      	mov	r0, r8
 8014016:	ec55 4b10 	vmov	r4, r5, d0
 801401a:	f7ff ff47 	bl	8013eac <__b2d>
 801401e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014022:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014026:	eba3 0c02 	sub.w	ip, r3, r2
 801402a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801402e:	1a9b      	subs	r3, r3, r2
 8014030:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014034:	ec51 0b10 	vmov	r0, r1, d0
 8014038:	2b00      	cmp	r3, #0
 801403a:	bfd6      	itet	le
 801403c:	460a      	movle	r2, r1
 801403e:	462a      	movgt	r2, r5
 8014040:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014044:	468b      	mov	fp, r1
 8014046:	462f      	mov	r7, r5
 8014048:	bfd4      	ite	le
 801404a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801404e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014052:	4620      	mov	r0, r4
 8014054:	ee10 2a10 	vmov	r2, s0
 8014058:	465b      	mov	r3, fp
 801405a:	4639      	mov	r1, r7
 801405c:	f7ec fbf6 	bl	800084c <__aeabi_ddiv>
 8014060:	ec41 0b10 	vmov	d0, r0, r1
 8014064:	b003      	add	sp, #12
 8014066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801406a <__copybits>:
 801406a:	3901      	subs	r1, #1
 801406c:	b570      	push	{r4, r5, r6, lr}
 801406e:	1149      	asrs	r1, r1, #5
 8014070:	6914      	ldr	r4, [r2, #16]
 8014072:	3101      	adds	r1, #1
 8014074:	f102 0314 	add.w	r3, r2, #20
 8014078:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801407c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014080:	1f05      	subs	r5, r0, #4
 8014082:	42a3      	cmp	r3, r4
 8014084:	d30c      	bcc.n	80140a0 <__copybits+0x36>
 8014086:	1aa3      	subs	r3, r4, r2
 8014088:	3b11      	subs	r3, #17
 801408a:	f023 0303 	bic.w	r3, r3, #3
 801408e:	3211      	adds	r2, #17
 8014090:	42a2      	cmp	r2, r4
 8014092:	bf88      	it	hi
 8014094:	2300      	movhi	r3, #0
 8014096:	4418      	add	r0, r3
 8014098:	2300      	movs	r3, #0
 801409a:	4288      	cmp	r0, r1
 801409c:	d305      	bcc.n	80140aa <__copybits+0x40>
 801409e:	bd70      	pop	{r4, r5, r6, pc}
 80140a0:	f853 6b04 	ldr.w	r6, [r3], #4
 80140a4:	f845 6f04 	str.w	r6, [r5, #4]!
 80140a8:	e7eb      	b.n	8014082 <__copybits+0x18>
 80140aa:	f840 3b04 	str.w	r3, [r0], #4
 80140ae:	e7f4      	b.n	801409a <__copybits+0x30>

080140b0 <__any_on>:
 80140b0:	f100 0214 	add.w	r2, r0, #20
 80140b4:	6900      	ldr	r0, [r0, #16]
 80140b6:	114b      	asrs	r3, r1, #5
 80140b8:	4298      	cmp	r0, r3
 80140ba:	b510      	push	{r4, lr}
 80140bc:	db11      	blt.n	80140e2 <__any_on+0x32>
 80140be:	dd0a      	ble.n	80140d6 <__any_on+0x26>
 80140c0:	f011 011f 	ands.w	r1, r1, #31
 80140c4:	d007      	beq.n	80140d6 <__any_on+0x26>
 80140c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80140ca:	fa24 f001 	lsr.w	r0, r4, r1
 80140ce:	fa00 f101 	lsl.w	r1, r0, r1
 80140d2:	428c      	cmp	r4, r1
 80140d4:	d10b      	bne.n	80140ee <__any_on+0x3e>
 80140d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80140da:	4293      	cmp	r3, r2
 80140dc:	d803      	bhi.n	80140e6 <__any_on+0x36>
 80140de:	2000      	movs	r0, #0
 80140e0:	bd10      	pop	{r4, pc}
 80140e2:	4603      	mov	r3, r0
 80140e4:	e7f7      	b.n	80140d6 <__any_on+0x26>
 80140e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80140ea:	2900      	cmp	r1, #0
 80140ec:	d0f5      	beq.n	80140da <__any_on+0x2a>
 80140ee:	2001      	movs	r0, #1
 80140f0:	e7f6      	b.n	80140e0 <__any_on+0x30>

080140f2 <_calloc_r>:
 80140f2:	b513      	push	{r0, r1, r4, lr}
 80140f4:	434a      	muls	r2, r1
 80140f6:	4611      	mov	r1, r2
 80140f8:	9201      	str	r2, [sp, #4]
 80140fa:	f000 f859 	bl	80141b0 <_malloc_r>
 80140fe:	4604      	mov	r4, r0
 8014100:	b118      	cbz	r0, 801410a <_calloc_r+0x18>
 8014102:	9a01      	ldr	r2, [sp, #4]
 8014104:	2100      	movs	r1, #0
 8014106:	f7fc fba1 	bl	801084c <memset>
 801410a:	4620      	mov	r0, r4
 801410c:	b002      	add	sp, #8
 801410e:	bd10      	pop	{r4, pc}

08014110 <_free_r>:
 8014110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014112:	2900      	cmp	r1, #0
 8014114:	d048      	beq.n	80141a8 <_free_r+0x98>
 8014116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801411a:	9001      	str	r0, [sp, #4]
 801411c:	2b00      	cmp	r3, #0
 801411e:	f1a1 0404 	sub.w	r4, r1, #4
 8014122:	bfb8      	it	lt
 8014124:	18e4      	addlt	r4, r4, r3
 8014126:	f000 fa7d 	bl	8014624 <__malloc_lock>
 801412a:	4a20      	ldr	r2, [pc, #128]	; (80141ac <_free_r+0x9c>)
 801412c:	9801      	ldr	r0, [sp, #4]
 801412e:	6813      	ldr	r3, [r2, #0]
 8014130:	4615      	mov	r5, r2
 8014132:	b933      	cbnz	r3, 8014142 <_free_r+0x32>
 8014134:	6063      	str	r3, [r4, #4]
 8014136:	6014      	str	r4, [r2, #0]
 8014138:	b003      	add	sp, #12
 801413a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801413e:	f000 ba77 	b.w	8014630 <__malloc_unlock>
 8014142:	42a3      	cmp	r3, r4
 8014144:	d90b      	bls.n	801415e <_free_r+0x4e>
 8014146:	6821      	ldr	r1, [r4, #0]
 8014148:	1862      	adds	r2, r4, r1
 801414a:	4293      	cmp	r3, r2
 801414c:	bf04      	itt	eq
 801414e:	681a      	ldreq	r2, [r3, #0]
 8014150:	685b      	ldreq	r3, [r3, #4]
 8014152:	6063      	str	r3, [r4, #4]
 8014154:	bf04      	itt	eq
 8014156:	1852      	addeq	r2, r2, r1
 8014158:	6022      	streq	r2, [r4, #0]
 801415a:	602c      	str	r4, [r5, #0]
 801415c:	e7ec      	b.n	8014138 <_free_r+0x28>
 801415e:	461a      	mov	r2, r3
 8014160:	685b      	ldr	r3, [r3, #4]
 8014162:	b10b      	cbz	r3, 8014168 <_free_r+0x58>
 8014164:	42a3      	cmp	r3, r4
 8014166:	d9fa      	bls.n	801415e <_free_r+0x4e>
 8014168:	6811      	ldr	r1, [r2, #0]
 801416a:	1855      	adds	r5, r2, r1
 801416c:	42a5      	cmp	r5, r4
 801416e:	d10b      	bne.n	8014188 <_free_r+0x78>
 8014170:	6824      	ldr	r4, [r4, #0]
 8014172:	4421      	add	r1, r4
 8014174:	1854      	adds	r4, r2, r1
 8014176:	42a3      	cmp	r3, r4
 8014178:	6011      	str	r1, [r2, #0]
 801417a:	d1dd      	bne.n	8014138 <_free_r+0x28>
 801417c:	681c      	ldr	r4, [r3, #0]
 801417e:	685b      	ldr	r3, [r3, #4]
 8014180:	6053      	str	r3, [r2, #4]
 8014182:	4421      	add	r1, r4
 8014184:	6011      	str	r1, [r2, #0]
 8014186:	e7d7      	b.n	8014138 <_free_r+0x28>
 8014188:	d902      	bls.n	8014190 <_free_r+0x80>
 801418a:	230c      	movs	r3, #12
 801418c:	6003      	str	r3, [r0, #0]
 801418e:	e7d3      	b.n	8014138 <_free_r+0x28>
 8014190:	6825      	ldr	r5, [r4, #0]
 8014192:	1961      	adds	r1, r4, r5
 8014194:	428b      	cmp	r3, r1
 8014196:	bf04      	itt	eq
 8014198:	6819      	ldreq	r1, [r3, #0]
 801419a:	685b      	ldreq	r3, [r3, #4]
 801419c:	6063      	str	r3, [r4, #4]
 801419e:	bf04      	itt	eq
 80141a0:	1949      	addeq	r1, r1, r5
 80141a2:	6021      	streq	r1, [r4, #0]
 80141a4:	6054      	str	r4, [r2, #4]
 80141a6:	e7c7      	b.n	8014138 <_free_r+0x28>
 80141a8:	b003      	add	sp, #12
 80141aa:	bd30      	pop	{r4, r5, pc}
 80141ac:	20008be0 	.word	0x20008be0

080141b0 <_malloc_r>:
 80141b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141b2:	1ccd      	adds	r5, r1, #3
 80141b4:	f025 0503 	bic.w	r5, r5, #3
 80141b8:	3508      	adds	r5, #8
 80141ba:	2d0c      	cmp	r5, #12
 80141bc:	bf38      	it	cc
 80141be:	250c      	movcc	r5, #12
 80141c0:	2d00      	cmp	r5, #0
 80141c2:	4606      	mov	r6, r0
 80141c4:	db01      	blt.n	80141ca <_malloc_r+0x1a>
 80141c6:	42a9      	cmp	r1, r5
 80141c8:	d903      	bls.n	80141d2 <_malloc_r+0x22>
 80141ca:	230c      	movs	r3, #12
 80141cc:	6033      	str	r3, [r6, #0]
 80141ce:	2000      	movs	r0, #0
 80141d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141d2:	f000 fa27 	bl	8014624 <__malloc_lock>
 80141d6:	4921      	ldr	r1, [pc, #132]	; (801425c <_malloc_r+0xac>)
 80141d8:	680a      	ldr	r2, [r1, #0]
 80141da:	4614      	mov	r4, r2
 80141dc:	b99c      	cbnz	r4, 8014206 <_malloc_r+0x56>
 80141de:	4f20      	ldr	r7, [pc, #128]	; (8014260 <_malloc_r+0xb0>)
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	b923      	cbnz	r3, 80141ee <_malloc_r+0x3e>
 80141e4:	4621      	mov	r1, r4
 80141e6:	4630      	mov	r0, r6
 80141e8:	f000 f9a2 	bl	8014530 <_sbrk_r>
 80141ec:	6038      	str	r0, [r7, #0]
 80141ee:	4629      	mov	r1, r5
 80141f0:	4630      	mov	r0, r6
 80141f2:	f000 f99d 	bl	8014530 <_sbrk_r>
 80141f6:	1c43      	adds	r3, r0, #1
 80141f8:	d123      	bne.n	8014242 <_malloc_r+0x92>
 80141fa:	230c      	movs	r3, #12
 80141fc:	6033      	str	r3, [r6, #0]
 80141fe:	4630      	mov	r0, r6
 8014200:	f000 fa16 	bl	8014630 <__malloc_unlock>
 8014204:	e7e3      	b.n	80141ce <_malloc_r+0x1e>
 8014206:	6823      	ldr	r3, [r4, #0]
 8014208:	1b5b      	subs	r3, r3, r5
 801420a:	d417      	bmi.n	801423c <_malloc_r+0x8c>
 801420c:	2b0b      	cmp	r3, #11
 801420e:	d903      	bls.n	8014218 <_malloc_r+0x68>
 8014210:	6023      	str	r3, [r4, #0]
 8014212:	441c      	add	r4, r3
 8014214:	6025      	str	r5, [r4, #0]
 8014216:	e004      	b.n	8014222 <_malloc_r+0x72>
 8014218:	6863      	ldr	r3, [r4, #4]
 801421a:	42a2      	cmp	r2, r4
 801421c:	bf0c      	ite	eq
 801421e:	600b      	streq	r3, [r1, #0]
 8014220:	6053      	strne	r3, [r2, #4]
 8014222:	4630      	mov	r0, r6
 8014224:	f000 fa04 	bl	8014630 <__malloc_unlock>
 8014228:	f104 000b 	add.w	r0, r4, #11
 801422c:	1d23      	adds	r3, r4, #4
 801422e:	f020 0007 	bic.w	r0, r0, #7
 8014232:	1ac2      	subs	r2, r0, r3
 8014234:	d0cc      	beq.n	80141d0 <_malloc_r+0x20>
 8014236:	1a1b      	subs	r3, r3, r0
 8014238:	50a3      	str	r3, [r4, r2]
 801423a:	e7c9      	b.n	80141d0 <_malloc_r+0x20>
 801423c:	4622      	mov	r2, r4
 801423e:	6864      	ldr	r4, [r4, #4]
 8014240:	e7cc      	b.n	80141dc <_malloc_r+0x2c>
 8014242:	1cc4      	adds	r4, r0, #3
 8014244:	f024 0403 	bic.w	r4, r4, #3
 8014248:	42a0      	cmp	r0, r4
 801424a:	d0e3      	beq.n	8014214 <_malloc_r+0x64>
 801424c:	1a21      	subs	r1, r4, r0
 801424e:	4630      	mov	r0, r6
 8014250:	f000 f96e 	bl	8014530 <_sbrk_r>
 8014254:	3001      	adds	r0, #1
 8014256:	d1dd      	bne.n	8014214 <_malloc_r+0x64>
 8014258:	e7cf      	b.n	80141fa <_malloc_r+0x4a>
 801425a:	bf00      	nop
 801425c:	20008be0 	.word	0x20008be0
 8014260:	20008be4 	.word	0x20008be4

08014264 <__ssputs_r>:
 8014264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014268:	688e      	ldr	r6, [r1, #8]
 801426a:	429e      	cmp	r6, r3
 801426c:	4682      	mov	sl, r0
 801426e:	460c      	mov	r4, r1
 8014270:	4690      	mov	r8, r2
 8014272:	461f      	mov	r7, r3
 8014274:	d838      	bhi.n	80142e8 <__ssputs_r+0x84>
 8014276:	898a      	ldrh	r2, [r1, #12]
 8014278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801427c:	d032      	beq.n	80142e4 <__ssputs_r+0x80>
 801427e:	6825      	ldr	r5, [r4, #0]
 8014280:	6909      	ldr	r1, [r1, #16]
 8014282:	eba5 0901 	sub.w	r9, r5, r1
 8014286:	6965      	ldr	r5, [r4, #20]
 8014288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801428c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014290:	3301      	adds	r3, #1
 8014292:	444b      	add	r3, r9
 8014294:	106d      	asrs	r5, r5, #1
 8014296:	429d      	cmp	r5, r3
 8014298:	bf38      	it	cc
 801429a:	461d      	movcc	r5, r3
 801429c:	0553      	lsls	r3, r2, #21
 801429e:	d531      	bpl.n	8014304 <__ssputs_r+0xa0>
 80142a0:	4629      	mov	r1, r5
 80142a2:	f7ff ff85 	bl	80141b0 <_malloc_r>
 80142a6:	4606      	mov	r6, r0
 80142a8:	b950      	cbnz	r0, 80142c0 <__ssputs_r+0x5c>
 80142aa:	230c      	movs	r3, #12
 80142ac:	f8ca 3000 	str.w	r3, [sl]
 80142b0:	89a3      	ldrh	r3, [r4, #12]
 80142b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142b6:	81a3      	strh	r3, [r4, #12]
 80142b8:	f04f 30ff 	mov.w	r0, #4294967295
 80142bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142c0:	6921      	ldr	r1, [r4, #16]
 80142c2:	464a      	mov	r2, r9
 80142c4:	f7fc fab4 	bl	8010830 <memcpy>
 80142c8:	89a3      	ldrh	r3, [r4, #12]
 80142ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80142ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142d2:	81a3      	strh	r3, [r4, #12]
 80142d4:	6126      	str	r6, [r4, #16]
 80142d6:	6165      	str	r5, [r4, #20]
 80142d8:	444e      	add	r6, r9
 80142da:	eba5 0509 	sub.w	r5, r5, r9
 80142de:	6026      	str	r6, [r4, #0]
 80142e0:	60a5      	str	r5, [r4, #8]
 80142e2:	463e      	mov	r6, r7
 80142e4:	42be      	cmp	r6, r7
 80142e6:	d900      	bls.n	80142ea <__ssputs_r+0x86>
 80142e8:	463e      	mov	r6, r7
 80142ea:	4632      	mov	r2, r6
 80142ec:	6820      	ldr	r0, [r4, #0]
 80142ee:	4641      	mov	r1, r8
 80142f0:	f000 f97e 	bl	80145f0 <memmove>
 80142f4:	68a3      	ldr	r3, [r4, #8]
 80142f6:	6822      	ldr	r2, [r4, #0]
 80142f8:	1b9b      	subs	r3, r3, r6
 80142fa:	4432      	add	r2, r6
 80142fc:	60a3      	str	r3, [r4, #8]
 80142fe:	6022      	str	r2, [r4, #0]
 8014300:	2000      	movs	r0, #0
 8014302:	e7db      	b.n	80142bc <__ssputs_r+0x58>
 8014304:	462a      	mov	r2, r5
 8014306:	f000 f999 	bl	801463c <_realloc_r>
 801430a:	4606      	mov	r6, r0
 801430c:	2800      	cmp	r0, #0
 801430e:	d1e1      	bne.n	80142d4 <__ssputs_r+0x70>
 8014310:	6921      	ldr	r1, [r4, #16]
 8014312:	4650      	mov	r0, sl
 8014314:	f7ff fefc 	bl	8014110 <_free_r>
 8014318:	e7c7      	b.n	80142aa <__ssputs_r+0x46>
	...

0801431c <_svfiprintf_r>:
 801431c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014320:	4698      	mov	r8, r3
 8014322:	898b      	ldrh	r3, [r1, #12]
 8014324:	061b      	lsls	r3, r3, #24
 8014326:	b09d      	sub	sp, #116	; 0x74
 8014328:	4607      	mov	r7, r0
 801432a:	460d      	mov	r5, r1
 801432c:	4614      	mov	r4, r2
 801432e:	d50e      	bpl.n	801434e <_svfiprintf_r+0x32>
 8014330:	690b      	ldr	r3, [r1, #16]
 8014332:	b963      	cbnz	r3, 801434e <_svfiprintf_r+0x32>
 8014334:	2140      	movs	r1, #64	; 0x40
 8014336:	f7ff ff3b 	bl	80141b0 <_malloc_r>
 801433a:	6028      	str	r0, [r5, #0]
 801433c:	6128      	str	r0, [r5, #16]
 801433e:	b920      	cbnz	r0, 801434a <_svfiprintf_r+0x2e>
 8014340:	230c      	movs	r3, #12
 8014342:	603b      	str	r3, [r7, #0]
 8014344:	f04f 30ff 	mov.w	r0, #4294967295
 8014348:	e0d1      	b.n	80144ee <_svfiprintf_r+0x1d2>
 801434a:	2340      	movs	r3, #64	; 0x40
 801434c:	616b      	str	r3, [r5, #20]
 801434e:	2300      	movs	r3, #0
 8014350:	9309      	str	r3, [sp, #36]	; 0x24
 8014352:	2320      	movs	r3, #32
 8014354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014358:	f8cd 800c 	str.w	r8, [sp, #12]
 801435c:	2330      	movs	r3, #48	; 0x30
 801435e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014508 <_svfiprintf_r+0x1ec>
 8014362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014366:	f04f 0901 	mov.w	r9, #1
 801436a:	4623      	mov	r3, r4
 801436c:	469a      	mov	sl, r3
 801436e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014372:	b10a      	cbz	r2, 8014378 <_svfiprintf_r+0x5c>
 8014374:	2a25      	cmp	r2, #37	; 0x25
 8014376:	d1f9      	bne.n	801436c <_svfiprintf_r+0x50>
 8014378:	ebba 0b04 	subs.w	fp, sl, r4
 801437c:	d00b      	beq.n	8014396 <_svfiprintf_r+0x7a>
 801437e:	465b      	mov	r3, fp
 8014380:	4622      	mov	r2, r4
 8014382:	4629      	mov	r1, r5
 8014384:	4638      	mov	r0, r7
 8014386:	f7ff ff6d 	bl	8014264 <__ssputs_r>
 801438a:	3001      	adds	r0, #1
 801438c:	f000 80aa 	beq.w	80144e4 <_svfiprintf_r+0x1c8>
 8014390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014392:	445a      	add	r2, fp
 8014394:	9209      	str	r2, [sp, #36]	; 0x24
 8014396:	f89a 3000 	ldrb.w	r3, [sl]
 801439a:	2b00      	cmp	r3, #0
 801439c:	f000 80a2 	beq.w	80144e4 <_svfiprintf_r+0x1c8>
 80143a0:	2300      	movs	r3, #0
 80143a2:	f04f 32ff 	mov.w	r2, #4294967295
 80143a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143aa:	f10a 0a01 	add.w	sl, sl, #1
 80143ae:	9304      	str	r3, [sp, #16]
 80143b0:	9307      	str	r3, [sp, #28]
 80143b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80143b6:	931a      	str	r3, [sp, #104]	; 0x68
 80143b8:	4654      	mov	r4, sl
 80143ba:	2205      	movs	r2, #5
 80143bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143c0:	4851      	ldr	r0, [pc, #324]	; (8014508 <_svfiprintf_r+0x1ec>)
 80143c2:	f7eb ff0d 	bl	80001e0 <memchr>
 80143c6:	9a04      	ldr	r2, [sp, #16]
 80143c8:	b9d8      	cbnz	r0, 8014402 <_svfiprintf_r+0xe6>
 80143ca:	06d0      	lsls	r0, r2, #27
 80143cc:	bf44      	itt	mi
 80143ce:	2320      	movmi	r3, #32
 80143d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143d4:	0711      	lsls	r1, r2, #28
 80143d6:	bf44      	itt	mi
 80143d8:	232b      	movmi	r3, #43	; 0x2b
 80143da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143de:	f89a 3000 	ldrb.w	r3, [sl]
 80143e2:	2b2a      	cmp	r3, #42	; 0x2a
 80143e4:	d015      	beq.n	8014412 <_svfiprintf_r+0xf6>
 80143e6:	9a07      	ldr	r2, [sp, #28]
 80143e8:	4654      	mov	r4, sl
 80143ea:	2000      	movs	r0, #0
 80143ec:	f04f 0c0a 	mov.w	ip, #10
 80143f0:	4621      	mov	r1, r4
 80143f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143f6:	3b30      	subs	r3, #48	; 0x30
 80143f8:	2b09      	cmp	r3, #9
 80143fa:	d94e      	bls.n	801449a <_svfiprintf_r+0x17e>
 80143fc:	b1b0      	cbz	r0, 801442c <_svfiprintf_r+0x110>
 80143fe:	9207      	str	r2, [sp, #28]
 8014400:	e014      	b.n	801442c <_svfiprintf_r+0x110>
 8014402:	eba0 0308 	sub.w	r3, r0, r8
 8014406:	fa09 f303 	lsl.w	r3, r9, r3
 801440a:	4313      	orrs	r3, r2
 801440c:	9304      	str	r3, [sp, #16]
 801440e:	46a2      	mov	sl, r4
 8014410:	e7d2      	b.n	80143b8 <_svfiprintf_r+0x9c>
 8014412:	9b03      	ldr	r3, [sp, #12]
 8014414:	1d19      	adds	r1, r3, #4
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	9103      	str	r1, [sp, #12]
 801441a:	2b00      	cmp	r3, #0
 801441c:	bfbb      	ittet	lt
 801441e:	425b      	neglt	r3, r3
 8014420:	f042 0202 	orrlt.w	r2, r2, #2
 8014424:	9307      	strge	r3, [sp, #28]
 8014426:	9307      	strlt	r3, [sp, #28]
 8014428:	bfb8      	it	lt
 801442a:	9204      	strlt	r2, [sp, #16]
 801442c:	7823      	ldrb	r3, [r4, #0]
 801442e:	2b2e      	cmp	r3, #46	; 0x2e
 8014430:	d10c      	bne.n	801444c <_svfiprintf_r+0x130>
 8014432:	7863      	ldrb	r3, [r4, #1]
 8014434:	2b2a      	cmp	r3, #42	; 0x2a
 8014436:	d135      	bne.n	80144a4 <_svfiprintf_r+0x188>
 8014438:	9b03      	ldr	r3, [sp, #12]
 801443a:	1d1a      	adds	r2, r3, #4
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	9203      	str	r2, [sp, #12]
 8014440:	2b00      	cmp	r3, #0
 8014442:	bfb8      	it	lt
 8014444:	f04f 33ff 	movlt.w	r3, #4294967295
 8014448:	3402      	adds	r4, #2
 801444a:	9305      	str	r3, [sp, #20]
 801444c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014518 <_svfiprintf_r+0x1fc>
 8014450:	7821      	ldrb	r1, [r4, #0]
 8014452:	2203      	movs	r2, #3
 8014454:	4650      	mov	r0, sl
 8014456:	f7eb fec3 	bl	80001e0 <memchr>
 801445a:	b140      	cbz	r0, 801446e <_svfiprintf_r+0x152>
 801445c:	2340      	movs	r3, #64	; 0x40
 801445e:	eba0 000a 	sub.w	r0, r0, sl
 8014462:	fa03 f000 	lsl.w	r0, r3, r0
 8014466:	9b04      	ldr	r3, [sp, #16]
 8014468:	4303      	orrs	r3, r0
 801446a:	3401      	adds	r4, #1
 801446c:	9304      	str	r3, [sp, #16]
 801446e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014472:	4826      	ldr	r0, [pc, #152]	; (801450c <_svfiprintf_r+0x1f0>)
 8014474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014478:	2206      	movs	r2, #6
 801447a:	f7eb feb1 	bl	80001e0 <memchr>
 801447e:	2800      	cmp	r0, #0
 8014480:	d038      	beq.n	80144f4 <_svfiprintf_r+0x1d8>
 8014482:	4b23      	ldr	r3, [pc, #140]	; (8014510 <_svfiprintf_r+0x1f4>)
 8014484:	bb1b      	cbnz	r3, 80144ce <_svfiprintf_r+0x1b2>
 8014486:	9b03      	ldr	r3, [sp, #12]
 8014488:	3307      	adds	r3, #7
 801448a:	f023 0307 	bic.w	r3, r3, #7
 801448e:	3308      	adds	r3, #8
 8014490:	9303      	str	r3, [sp, #12]
 8014492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014494:	4433      	add	r3, r6
 8014496:	9309      	str	r3, [sp, #36]	; 0x24
 8014498:	e767      	b.n	801436a <_svfiprintf_r+0x4e>
 801449a:	fb0c 3202 	mla	r2, ip, r2, r3
 801449e:	460c      	mov	r4, r1
 80144a0:	2001      	movs	r0, #1
 80144a2:	e7a5      	b.n	80143f0 <_svfiprintf_r+0xd4>
 80144a4:	2300      	movs	r3, #0
 80144a6:	3401      	adds	r4, #1
 80144a8:	9305      	str	r3, [sp, #20]
 80144aa:	4619      	mov	r1, r3
 80144ac:	f04f 0c0a 	mov.w	ip, #10
 80144b0:	4620      	mov	r0, r4
 80144b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144b6:	3a30      	subs	r2, #48	; 0x30
 80144b8:	2a09      	cmp	r2, #9
 80144ba:	d903      	bls.n	80144c4 <_svfiprintf_r+0x1a8>
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d0c5      	beq.n	801444c <_svfiprintf_r+0x130>
 80144c0:	9105      	str	r1, [sp, #20]
 80144c2:	e7c3      	b.n	801444c <_svfiprintf_r+0x130>
 80144c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80144c8:	4604      	mov	r4, r0
 80144ca:	2301      	movs	r3, #1
 80144cc:	e7f0      	b.n	80144b0 <_svfiprintf_r+0x194>
 80144ce:	ab03      	add	r3, sp, #12
 80144d0:	9300      	str	r3, [sp, #0]
 80144d2:	462a      	mov	r2, r5
 80144d4:	4b0f      	ldr	r3, [pc, #60]	; (8014514 <_svfiprintf_r+0x1f8>)
 80144d6:	a904      	add	r1, sp, #16
 80144d8:	4638      	mov	r0, r7
 80144da:	f7fc fa5f 	bl	801099c <_printf_float>
 80144de:	1c42      	adds	r2, r0, #1
 80144e0:	4606      	mov	r6, r0
 80144e2:	d1d6      	bne.n	8014492 <_svfiprintf_r+0x176>
 80144e4:	89ab      	ldrh	r3, [r5, #12]
 80144e6:	065b      	lsls	r3, r3, #25
 80144e8:	f53f af2c 	bmi.w	8014344 <_svfiprintf_r+0x28>
 80144ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144ee:	b01d      	add	sp, #116	; 0x74
 80144f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144f4:	ab03      	add	r3, sp, #12
 80144f6:	9300      	str	r3, [sp, #0]
 80144f8:	462a      	mov	r2, r5
 80144fa:	4b06      	ldr	r3, [pc, #24]	; (8014514 <_svfiprintf_r+0x1f8>)
 80144fc:	a904      	add	r1, sp, #16
 80144fe:	4638      	mov	r0, r7
 8014500:	f7fc fcf0 	bl	8010ee4 <_printf_i>
 8014504:	e7eb      	b.n	80144de <_svfiprintf_r+0x1c2>
 8014506:	bf00      	nop
 8014508:	08015864 	.word	0x08015864
 801450c:	0801586e 	.word	0x0801586e
 8014510:	0801099d 	.word	0x0801099d
 8014514:	08014265 	.word	0x08014265
 8014518:	0801586a 	.word	0x0801586a
 801451c:	00000000 	.word	0x00000000

08014520 <nan>:
 8014520:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014528 <nan+0x8>
 8014524:	4770      	bx	lr
 8014526:	bf00      	nop
 8014528:	00000000 	.word	0x00000000
 801452c:	7ff80000 	.word	0x7ff80000

08014530 <_sbrk_r>:
 8014530:	b538      	push	{r3, r4, r5, lr}
 8014532:	4d06      	ldr	r5, [pc, #24]	; (801454c <_sbrk_r+0x1c>)
 8014534:	2300      	movs	r3, #0
 8014536:	4604      	mov	r4, r0
 8014538:	4608      	mov	r0, r1
 801453a:	602b      	str	r3, [r5, #0]
 801453c:	f7ef ff62 	bl	8004404 <_sbrk>
 8014540:	1c43      	adds	r3, r0, #1
 8014542:	d102      	bne.n	801454a <_sbrk_r+0x1a>
 8014544:	682b      	ldr	r3, [r5, #0]
 8014546:	b103      	cbz	r3, 801454a <_sbrk_r+0x1a>
 8014548:	6023      	str	r3, [r4, #0]
 801454a:	bd38      	pop	{r3, r4, r5, pc}
 801454c:	2000aa6c 	.word	0x2000aa6c

08014550 <strncmp>:
 8014550:	b510      	push	{r4, lr}
 8014552:	b16a      	cbz	r2, 8014570 <strncmp+0x20>
 8014554:	3901      	subs	r1, #1
 8014556:	1884      	adds	r4, r0, r2
 8014558:	f810 3b01 	ldrb.w	r3, [r0], #1
 801455c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014560:	4293      	cmp	r3, r2
 8014562:	d103      	bne.n	801456c <strncmp+0x1c>
 8014564:	42a0      	cmp	r0, r4
 8014566:	d001      	beq.n	801456c <strncmp+0x1c>
 8014568:	2b00      	cmp	r3, #0
 801456a:	d1f5      	bne.n	8014558 <strncmp+0x8>
 801456c:	1a98      	subs	r0, r3, r2
 801456e:	bd10      	pop	{r4, pc}
 8014570:	4610      	mov	r0, r2
 8014572:	e7fc      	b.n	801456e <strncmp+0x1e>

08014574 <__ascii_wctomb>:
 8014574:	b149      	cbz	r1, 801458a <__ascii_wctomb+0x16>
 8014576:	2aff      	cmp	r2, #255	; 0xff
 8014578:	bf85      	ittet	hi
 801457a:	238a      	movhi	r3, #138	; 0x8a
 801457c:	6003      	strhi	r3, [r0, #0]
 801457e:	700a      	strbls	r2, [r1, #0]
 8014580:	f04f 30ff 	movhi.w	r0, #4294967295
 8014584:	bf98      	it	ls
 8014586:	2001      	movls	r0, #1
 8014588:	4770      	bx	lr
 801458a:	4608      	mov	r0, r1
 801458c:	4770      	bx	lr
	...

08014590 <__assert_func>:
 8014590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014592:	4614      	mov	r4, r2
 8014594:	461a      	mov	r2, r3
 8014596:	4b09      	ldr	r3, [pc, #36]	; (80145bc <__assert_func+0x2c>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	4605      	mov	r5, r0
 801459c:	68d8      	ldr	r0, [r3, #12]
 801459e:	b14c      	cbz	r4, 80145b4 <__assert_func+0x24>
 80145a0:	4b07      	ldr	r3, [pc, #28]	; (80145c0 <__assert_func+0x30>)
 80145a2:	9100      	str	r1, [sp, #0]
 80145a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80145a8:	4906      	ldr	r1, [pc, #24]	; (80145c4 <__assert_func+0x34>)
 80145aa:	462b      	mov	r3, r5
 80145ac:	f000 f80e 	bl	80145cc <fiprintf>
 80145b0:	f000 fa84 	bl	8014abc <abort>
 80145b4:	4b04      	ldr	r3, [pc, #16]	; (80145c8 <__assert_func+0x38>)
 80145b6:	461c      	mov	r4, r3
 80145b8:	e7f3      	b.n	80145a2 <__assert_func+0x12>
 80145ba:	bf00      	nop
 80145bc:	20000198 	.word	0x20000198
 80145c0:	08015875 	.word	0x08015875
 80145c4:	08015882 	.word	0x08015882
 80145c8:	080158b0 	.word	0x080158b0

080145cc <fiprintf>:
 80145cc:	b40e      	push	{r1, r2, r3}
 80145ce:	b503      	push	{r0, r1, lr}
 80145d0:	4601      	mov	r1, r0
 80145d2:	ab03      	add	r3, sp, #12
 80145d4:	4805      	ldr	r0, [pc, #20]	; (80145ec <fiprintf+0x20>)
 80145d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80145da:	6800      	ldr	r0, [r0, #0]
 80145dc:	9301      	str	r3, [sp, #4]
 80145de:	f000 f87d 	bl	80146dc <_vfiprintf_r>
 80145e2:	b002      	add	sp, #8
 80145e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80145e8:	b003      	add	sp, #12
 80145ea:	4770      	bx	lr
 80145ec:	20000198 	.word	0x20000198

080145f0 <memmove>:
 80145f0:	4288      	cmp	r0, r1
 80145f2:	b510      	push	{r4, lr}
 80145f4:	eb01 0402 	add.w	r4, r1, r2
 80145f8:	d902      	bls.n	8014600 <memmove+0x10>
 80145fa:	4284      	cmp	r4, r0
 80145fc:	4623      	mov	r3, r4
 80145fe:	d807      	bhi.n	8014610 <memmove+0x20>
 8014600:	1e43      	subs	r3, r0, #1
 8014602:	42a1      	cmp	r1, r4
 8014604:	d008      	beq.n	8014618 <memmove+0x28>
 8014606:	f811 2b01 	ldrb.w	r2, [r1], #1
 801460a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801460e:	e7f8      	b.n	8014602 <memmove+0x12>
 8014610:	4402      	add	r2, r0
 8014612:	4601      	mov	r1, r0
 8014614:	428a      	cmp	r2, r1
 8014616:	d100      	bne.n	801461a <memmove+0x2a>
 8014618:	bd10      	pop	{r4, pc}
 801461a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801461e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014622:	e7f7      	b.n	8014614 <memmove+0x24>

08014624 <__malloc_lock>:
 8014624:	4801      	ldr	r0, [pc, #4]	; (801462c <__malloc_lock+0x8>)
 8014626:	f000 bc09 	b.w	8014e3c <__retarget_lock_acquire_recursive>
 801462a:	bf00      	nop
 801462c:	2000aa74 	.word	0x2000aa74

08014630 <__malloc_unlock>:
 8014630:	4801      	ldr	r0, [pc, #4]	; (8014638 <__malloc_unlock+0x8>)
 8014632:	f000 bc04 	b.w	8014e3e <__retarget_lock_release_recursive>
 8014636:	bf00      	nop
 8014638:	2000aa74 	.word	0x2000aa74

0801463c <_realloc_r>:
 801463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801463e:	4607      	mov	r7, r0
 8014640:	4614      	mov	r4, r2
 8014642:	460e      	mov	r6, r1
 8014644:	b921      	cbnz	r1, 8014650 <_realloc_r+0x14>
 8014646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801464a:	4611      	mov	r1, r2
 801464c:	f7ff bdb0 	b.w	80141b0 <_malloc_r>
 8014650:	b922      	cbnz	r2, 801465c <_realloc_r+0x20>
 8014652:	f7ff fd5d 	bl	8014110 <_free_r>
 8014656:	4625      	mov	r5, r4
 8014658:	4628      	mov	r0, r5
 801465a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801465c:	f000 fc54 	bl	8014f08 <_malloc_usable_size_r>
 8014660:	42a0      	cmp	r0, r4
 8014662:	d20f      	bcs.n	8014684 <_realloc_r+0x48>
 8014664:	4621      	mov	r1, r4
 8014666:	4638      	mov	r0, r7
 8014668:	f7ff fda2 	bl	80141b0 <_malloc_r>
 801466c:	4605      	mov	r5, r0
 801466e:	2800      	cmp	r0, #0
 8014670:	d0f2      	beq.n	8014658 <_realloc_r+0x1c>
 8014672:	4631      	mov	r1, r6
 8014674:	4622      	mov	r2, r4
 8014676:	f7fc f8db 	bl	8010830 <memcpy>
 801467a:	4631      	mov	r1, r6
 801467c:	4638      	mov	r0, r7
 801467e:	f7ff fd47 	bl	8014110 <_free_r>
 8014682:	e7e9      	b.n	8014658 <_realloc_r+0x1c>
 8014684:	4635      	mov	r5, r6
 8014686:	e7e7      	b.n	8014658 <_realloc_r+0x1c>

08014688 <__sfputc_r>:
 8014688:	6893      	ldr	r3, [r2, #8]
 801468a:	3b01      	subs	r3, #1
 801468c:	2b00      	cmp	r3, #0
 801468e:	b410      	push	{r4}
 8014690:	6093      	str	r3, [r2, #8]
 8014692:	da08      	bge.n	80146a6 <__sfputc_r+0x1e>
 8014694:	6994      	ldr	r4, [r2, #24]
 8014696:	42a3      	cmp	r3, r4
 8014698:	db01      	blt.n	801469e <__sfputc_r+0x16>
 801469a:	290a      	cmp	r1, #10
 801469c:	d103      	bne.n	80146a6 <__sfputc_r+0x1e>
 801469e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146a2:	f000 b94b 	b.w	801493c <__swbuf_r>
 80146a6:	6813      	ldr	r3, [r2, #0]
 80146a8:	1c58      	adds	r0, r3, #1
 80146aa:	6010      	str	r0, [r2, #0]
 80146ac:	7019      	strb	r1, [r3, #0]
 80146ae:	4608      	mov	r0, r1
 80146b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146b4:	4770      	bx	lr

080146b6 <__sfputs_r>:
 80146b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146b8:	4606      	mov	r6, r0
 80146ba:	460f      	mov	r7, r1
 80146bc:	4614      	mov	r4, r2
 80146be:	18d5      	adds	r5, r2, r3
 80146c0:	42ac      	cmp	r4, r5
 80146c2:	d101      	bne.n	80146c8 <__sfputs_r+0x12>
 80146c4:	2000      	movs	r0, #0
 80146c6:	e007      	b.n	80146d8 <__sfputs_r+0x22>
 80146c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146cc:	463a      	mov	r2, r7
 80146ce:	4630      	mov	r0, r6
 80146d0:	f7ff ffda 	bl	8014688 <__sfputc_r>
 80146d4:	1c43      	adds	r3, r0, #1
 80146d6:	d1f3      	bne.n	80146c0 <__sfputs_r+0xa>
 80146d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080146dc <_vfiprintf_r>:
 80146dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e0:	460d      	mov	r5, r1
 80146e2:	b09d      	sub	sp, #116	; 0x74
 80146e4:	4614      	mov	r4, r2
 80146e6:	4698      	mov	r8, r3
 80146e8:	4606      	mov	r6, r0
 80146ea:	b118      	cbz	r0, 80146f4 <_vfiprintf_r+0x18>
 80146ec:	6983      	ldr	r3, [r0, #24]
 80146ee:	b90b      	cbnz	r3, 80146f4 <_vfiprintf_r+0x18>
 80146f0:	f000 fb06 	bl	8014d00 <__sinit>
 80146f4:	4b89      	ldr	r3, [pc, #548]	; (801491c <_vfiprintf_r+0x240>)
 80146f6:	429d      	cmp	r5, r3
 80146f8:	d11b      	bne.n	8014732 <_vfiprintf_r+0x56>
 80146fa:	6875      	ldr	r5, [r6, #4]
 80146fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146fe:	07d9      	lsls	r1, r3, #31
 8014700:	d405      	bmi.n	801470e <_vfiprintf_r+0x32>
 8014702:	89ab      	ldrh	r3, [r5, #12]
 8014704:	059a      	lsls	r2, r3, #22
 8014706:	d402      	bmi.n	801470e <_vfiprintf_r+0x32>
 8014708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801470a:	f000 fb97 	bl	8014e3c <__retarget_lock_acquire_recursive>
 801470e:	89ab      	ldrh	r3, [r5, #12]
 8014710:	071b      	lsls	r3, r3, #28
 8014712:	d501      	bpl.n	8014718 <_vfiprintf_r+0x3c>
 8014714:	692b      	ldr	r3, [r5, #16]
 8014716:	b9eb      	cbnz	r3, 8014754 <_vfiprintf_r+0x78>
 8014718:	4629      	mov	r1, r5
 801471a:	4630      	mov	r0, r6
 801471c:	f000 f960 	bl	80149e0 <__swsetup_r>
 8014720:	b1c0      	cbz	r0, 8014754 <_vfiprintf_r+0x78>
 8014722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014724:	07dc      	lsls	r4, r3, #31
 8014726:	d50e      	bpl.n	8014746 <_vfiprintf_r+0x6a>
 8014728:	f04f 30ff 	mov.w	r0, #4294967295
 801472c:	b01d      	add	sp, #116	; 0x74
 801472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014732:	4b7b      	ldr	r3, [pc, #492]	; (8014920 <_vfiprintf_r+0x244>)
 8014734:	429d      	cmp	r5, r3
 8014736:	d101      	bne.n	801473c <_vfiprintf_r+0x60>
 8014738:	68b5      	ldr	r5, [r6, #8]
 801473a:	e7df      	b.n	80146fc <_vfiprintf_r+0x20>
 801473c:	4b79      	ldr	r3, [pc, #484]	; (8014924 <_vfiprintf_r+0x248>)
 801473e:	429d      	cmp	r5, r3
 8014740:	bf08      	it	eq
 8014742:	68f5      	ldreq	r5, [r6, #12]
 8014744:	e7da      	b.n	80146fc <_vfiprintf_r+0x20>
 8014746:	89ab      	ldrh	r3, [r5, #12]
 8014748:	0598      	lsls	r0, r3, #22
 801474a:	d4ed      	bmi.n	8014728 <_vfiprintf_r+0x4c>
 801474c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801474e:	f000 fb76 	bl	8014e3e <__retarget_lock_release_recursive>
 8014752:	e7e9      	b.n	8014728 <_vfiprintf_r+0x4c>
 8014754:	2300      	movs	r3, #0
 8014756:	9309      	str	r3, [sp, #36]	; 0x24
 8014758:	2320      	movs	r3, #32
 801475a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801475e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014762:	2330      	movs	r3, #48	; 0x30
 8014764:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014928 <_vfiprintf_r+0x24c>
 8014768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801476c:	f04f 0901 	mov.w	r9, #1
 8014770:	4623      	mov	r3, r4
 8014772:	469a      	mov	sl, r3
 8014774:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014778:	b10a      	cbz	r2, 801477e <_vfiprintf_r+0xa2>
 801477a:	2a25      	cmp	r2, #37	; 0x25
 801477c:	d1f9      	bne.n	8014772 <_vfiprintf_r+0x96>
 801477e:	ebba 0b04 	subs.w	fp, sl, r4
 8014782:	d00b      	beq.n	801479c <_vfiprintf_r+0xc0>
 8014784:	465b      	mov	r3, fp
 8014786:	4622      	mov	r2, r4
 8014788:	4629      	mov	r1, r5
 801478a:	4630      	mov	r0, r6
 801478c:	f7ff ff93 	bl	80146b6 <__sfputs_r>
 8014790:	3001      	adds	r0, #1
 8014792:	f000 80aa 	beq.w	80148ea <_vfiprintf_r+0x20e>
 8014796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014798:	445a      	add	r2, fp
 801479a:	9209      	str	r2, [sp, #36]	; 0x24
 801479c:	f89a 3000 	ldrb.w	r3, [sl]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	f000 80a2 	beq.w	80148ea <_vfiprintf_r+0x20e>
 80147a6:	2300      	movs	r3, #0
 80147a8:	f04f 32ff 	mov.w	r2, #4294967295
 80147ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147b0:	f10a 0a01 	add.w	sl, sl, #1
 80147b4:	9304      	str	r3, [sp, #16]
 80147b6:	9307      	str	r3, [sp, #28]
 80147b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80147bc:	931a      	str	r3, [sp, #104]	; 0x68
 80147be:	4654      	mov	r4, sl
 80147c0:	2205      	movs	r2, #5
 80147c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147c6:	4858      	ldr	r0, [pc, #352]	; (8014928 <_vfiprintf_r+0x24c>)
 80147c8:	f7eb fd0a 	bl	80001e0 <memchr>
 80147cc:	9a04      	ldr	r2, [sp, #16]
 80147ce:	b9d8      	cbnz	r0, 8014808 <_vfiprintf_r+0x12c>
 80147d0:	06d1      	lsls	r1, r2, #27
 80147d2:	bf44      	itt	mi
 80147d4:	2320      	movmi	r3, #32
 80147d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147da:	0713      	lsls	r3, r2, #28
 80147dc:	bf44      	itt	mi
 80147de:	232b      	movmi	r3, #43	; 0x2b
 80147e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147e4:	f89a 3000 	ldrb.w	r3, [sl]
 80147e8:	2b2a      	cmp	r3, #42	; 0x2a
 80147ea:	d015      	beq.n	8014818 <_vfiprintf_r+0x13c>
 80147ec:	9a07      	ldr	r2, [sp, #28]
 80147ee:	4654      	mov	r4, sl
 80147f0:	2000      	movs	r0, #0
 80147f2:	f04f 0c0a 	mov.w	ip, #10
 80147f6:	4621      	mov	r1, r4
 80147f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80147fc:	3b30      	subs	r3, #48	; 0x30
 80147fe:	2b09      	cmp	r3, #9
 8014800:	d94e      	bls.n	80148a0 <_vfiprintf_r+0x1c4>
 8014802:	b1b0      	cbz	r0, 8014832 <_vfiprintf_r+0x156>
 8014804:	9207      	str	r2, [sp, #28]
 8014806:	e014      	b.n	8014832 <_vfiprintf_r+0x156>
 8014808:	eba0 0308 	sub.w	r3, r0, r8
 801480c:	fa09 f303 	lsl.w	r3, r9, r3
 8014810:	4313      	orrs	r3, r2
 8014812:	9304      	str	r3, [sp, #16]
 8014814:	46a2      	mov	sl, r4
 8014816:	e7d2      	b.n	80147be <_vfiprintf_r+0xe2>
 8014818:	9b03      	ldr	r3, [sp, #12]
 801481a:	1d19      	adds	r1, r3, #4
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	9103      	str	r1, [sp, #12]
 8014820:	2b00      	cmp	r3, #0
 8014822:	bfbb      	ittet	lt
 8014824:	425b      	neglt	r3, r3
 8014826:	f042 0202 	orrlt.w	r2, r2, #2
 801482a:	9307      	strge	r3, [sp, #28]
 801482c:	9307      	strlt	r3, [sp, #28]
 801482e:	bfb8      	it	lt
 8014830:	9204      	strlt	r2, [sp, #16]
 8014832:	7823      	ldrb	r3, [r4, #0]
 8014834:	2b2e      	cmp	r3, #46	; 0x2e
 8014836:	d10c      	bne.n	8014852 <_vfiprintf_r+0x176>
 8014838:	7863      	ldrb	r3, [r4, #1]
 801483a:	2b2a      	cmp	r3, #42	; 0x2a
 801483c:	d135      	bne.n	80148aa <_vfiprintf_r+0x1ce>
 801483e:	9b03      	ldr	r3, [sp, #12]
 8014840:	1d1a      	adds	r2, r3, #4
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	9203      	str	r2, [sp, #12]
 8014846:	2b00      	cmp	r3, #0
 8014848:	bfb8      	it	lt
 801484a:	f04f 33ff 	movlt.w	r3, #4294967295
 801484e:	3402      	adds	r4, #2
 8014850:	9305      	str	r3, [sp, #20]
 8014852:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014938 <_vfiprintf_r+0x25c>
 8014856:	7821      	ldrb	r1, [r4, #0]
 8014858:	2203      	movs	r2, #3
 801485a:	4650      	mov	r0, sl
 801485c:	f7eb fcc0 	bl	80001e0 <memchr>
 8014860:	b140      	cbz	r0, 8014874 <_vfiprintf_r+0x198>
 8014862:	2340      	movs	r3, #64	; 0x40
 8014864:	eba0 000a 	sub.w	r0, r0, sl
 8014868:	fa03 f000 	lsl.w	r0, r3, r0
 801486c:	9b04      	ldr	r3, [sp, #16]
 801486e:	4303      	orrs	r3, r0
 8014870:	3401      	adds	r4, #1
 8014872:	9304      	str	r3, [sp, #16]
 8014874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014878:	482c      	ldr	r0, [pc, #176]	; (801492c <_vfiprintf_r+0x250>)
 801487a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801487e:	2206      	movs	r2, #6
 8014880:	f7eb fcae 	bl	80001e0 <memchr>
 8014884:	2800      	cmp	r0, #0
 8014886:	d03f      	beq.n	8014908 <_vfiprintf_r+0x22c>
 8014888:	4b29      	ldr	r3, [pc, #164]	; (8014930 <_vfiprintf_r+0x254>)
 801488a:	bb1b      	cbnz	r3, 80148d4 <_vfiprintf_r+0x1f8>
 801488c:	9b03      	ldr	r3, [sp, #12]
 801488e:	3307      	adds	r3, #7
 8014890:	f023 0307 	bic.w	r3, r3, #7
 8014894:	3308      	adds	r3, #8
 8014896:	9303      	str	r3, [sp, #12]
 8014898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801489a:	443b      	add	r3, r7
 801489c:	9309      	str	r3, [sp, #36]	; 0x24
 801489e:	e767      	b.n	8014770 <_vfiprintf_r+0x94>
 80148a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80148a4:	460c      	mov	r4, r1
 80148a6:	2001      	movs	r0, #1
 80148a8:	e7a5      	b.n	80147f6 <_vfiprintf_r+0x11a>
 80148aa:	2300      	movs	r3, #0
 80148ac:	3401      	adds	r4, #1
 80148ae:	9305      	str	r3, [sp, #20]
 80148b0:	4619      	mov	r1, r3
 80148b2:	f04f 0c0a 	mov.w	ip, #10
 80148b6:	4620      	mov	r0, r4
 80148b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148bc:	3a30      	subs	r2, #48	; 0x30
 80148be:	2a09      	cmp	r2, #9
 80148c0:	d903      	bls.n	80148ca <_vfiprintf_r+0x1ee>
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d0c5      	beq.n	8014852 <_vfiprintf_r+0x176>
 80148c6:	9105      	str	r1, [sp, #20]
 80148c8:	e7c3      	b.n	8014852 <_vfiprintf_r+0x176>
 80148ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80148ce:	4604      	mov	r4, r0
 80148d0:	2301      	movs	r3, #1
 80148d2:	e7f0      	b.n	80148b6 <_vfiprintf_r+0x1da>
 80148d4:	ab03      	add	r3, sp, #12
 80148d6:	9300      	str	r3, [sp, #0]
 80148d8:	462a      	mov	r2, r5
 80148da:	4b16      	ldr	r3, [pc, #88]	; (8014934 <_vfiprintf_r+0x258>)
 80148dc:	a904      	add	r1, sp, #16
 80148de:	4630      	mov	r0, r6
 80148e0:	f7fc f85c 	bl	801099c <_printf_float>
 80148e4:	4607      	mov	r7, r0
 80148e6:	1c78      	adds	r0, r7, #1
 80148e8:	d1d6      	bne.n	8014898 <_vfiprintf_r+0x1bc>
 80148ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148ec:	07d9      	lsls	r1, r3, #31
 80148ee:	d405      	bmi.n	80148fc <_vfiprintf_r+0x220>
 80148f0:	89ab      	ldrh	r3, [r5, #12]
 80148f2:	059a      	lsls	r2, r3, #22
 80148f4:	d402      	bmi.n	80148fc <_vfiprintf_r+0x220>
 80148f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148f8:	f000 faa1 	bl	8014e3e <__retarget_lock_release_recursive>
 80148fc:	89ab      	ldrh	r3, [r5, #12]
 80148fe:	065b      	lsls	r3, r3, #25
 8014900:	f53f af12 	bmi.w	8014728 <_vfiprintf_r+0x4c>
 8014904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014906:	e711      	b.n	801472c <_vfiprintf_r+0x50>
 8014908:	ab03      	add	r3, sp, #12
 801490a:	9300      	str	r3, [sp, #0]
 801490c:	462a      	mov	r2, r5
 801490e:	4b09      	ldr	r3, [pc, #36]	; (8014934 <_vfiprintf_r+0x258>)
 8014910:	a904      	add	r1, sp, #16
 8014912:	4630      	mov	r0, r6
 8014914:	f7fc fae6 	bl	8010ee4 <_printf_i>
 8014918:	e7e4      	b.n	80148e4 <_vfiprintf_r+0x208>
 801491a:	bf00      	nop
 801491c:	080158d4 	.word	0x080158d4
 8014920:	080158f4 	.word	0x080158f4
 8014924:	080158b4 	.word	0x080158b4
 8014928:	08015864 	.word	0x08015864
 801492c:	0801586e 	.word	0x0801586e
 8014930:	0801099d 	.word	0x0801099d
 8014934:	080146b7 	.word	0x080146b7
 8014938:	0801586a 	.word	0x0801586a

0801493c <__swbuf_r>:
 801493c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801493e:	460e      	mov	r6, r1
 8014940:	4614      	mov	r4, r2
 8014942:	4605      	mov	r5, r0
 8014944:	b118      	cbz	r0, 801494e <__swbuf_r+0x12>
 8014946:	6983      	ldr	r3, [r0, #24]
 8014948:	b90b      	cbnz	r3, 801494e <__swbuf_r+0x12>
 801494a:	f000 f9d9 	bl	8014d00 <__sinit>
 801494e:	4b21      	ldr	r3, [pc, #132]	; (80149d4 <__swbuf_r+0x98>)
 8014950:	429c      	cmp	r4, r3
 8014952:	d12b      	bne.n	80149ac <__swbuf_r+0x70>
 8014954:	686c      	ldr	r4, [r5, #4]
 8014956:	69a3      	ldr	r3, [r4, #24]
 8014958:	60a3      	str	r3, [r4, #8]
 801495a:	89a3      	ldrh	r3, [r4, #12]
 801495c:	071a      	lsls	r2, r3, #28
 801495e:	d52f      	bpl.n	80149c0 <__swbuf_r+0x84>
 8014960:	6923      	ldr	r3, [r4, #16]
 8014962:	b36b      	cbz	r3, 80149c0 <__swbuf_r+0x84>
 8014964:	6923      	ldr	r3, [r4, #16]
 8014966:	6820      	ldr	r0, [r4, #0]
 8014968:	1ac0      	subs	r0, r0, r3
 801496a:	6963      	ldr	r3, [r4, #20]
 801496c:	b2f6      	uxtb	r6, r6
 801496e:	4283      	cmp	r3, r0
 8014970:	4637      	mov	r7, r6
 8014972:	dc04      	bgt.n	801497e <__swbuf_r+0x42>
 8014974:	4621      	mov	r1, r4
 8014976:	4628      	mov	r0, r5
 8014978:	f000 f92e 	bl	8014bd8 <_fflush_r>
 801497c:	bb30      	cbnz	r0, 80149cc <__swbuf_r+0x90>
 801497e:	68a3      	ldr	r3, [r4, #8]
 8014980:	3b01      	subs	r3, #1
 8014982:	60a3      	str	r3, [r4, #8]
 8014984:	6823      	ldr	r3, [r4, #0]
 8014986:	1c5a      	adds	r2, r3, #1
 8014988:	6022      	str	r2, [r4, #0]
 801498a:	701e      	strb	r6, [r3, #0]
 801498c:	6963      	ldr	r3, [r4, #20]
 801498e:	3001      	adds	r0, #1
 8014990:	4283      	cmp	r3, r0
 8014992:	d004      	beq.n	801499e <__swbuf_r+0x62>
 8014994:	89a3      	ldrh	r3, [r4, #12]
 8014996:	07db      	lsls	r3, r3, #31
 8014998:	d506      	bpl.n	80149a8 <__swbuf_r+0x6c>
 801499a:	2e0a      	cmp	r6, #10
 801499c:	d104      	bne.n	80149a8 <__swbuf_r+0x6c>
 801499e:	4621      	mov	r1, r4
 80149a0:	4628      	mov	r0, r5
 80149a2:	f000 f919 	bl	8014bd8 <_fflush_r>
 80149a6:	b988      	cbnz	r0, 80149cc <__swbuf_r+0x90>
 80149a8:	4638      	mov	r0, r7
 80149aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149ac:	4b0a      	ldr	r3, [pc, #40]	; (80149d8 <__swbuf_r+0x9c>)
 80149ae:	429c      	cmp	r4, r3
 80149b0:	d101      	bne.n	80149b6 <__swbuf_r+0x7a>
 80149b2:	68ac      	ldr	r4, [r5, #8]
 80149b4:	e7cf      	b.n	8014956 <__swbuf_r+0x1a>
 80149b6:	4b09      	ldr	r3, [pc, #36]	; (80149dc <__swbuf_r+0xa0>)
 80149b8:	429c      	cmp	r4, r3
 80149ba:	bf08      	it	eq
 80149bc:	68ec      	ldreq	r4, [r5, #12]
 80149be:	e7ca      	b.n	8014956 <__swbuf_r+0x1a>
 80149c0:	4621      	mov	r1, r4
 80149c2:	4628      	mov	r0, r5
 80149c4:	f000 f80c 	bl	80149e0 <__swsetup_r>
 80149c8:	2800      	cmp	r0, #0
 80149ca:	d0cb      	beq.n	8014964 <__swbuf_r+0x28>
 80149cc:	f04f 37ff 	mov.w	r7, #4294967295
 80149d0:	e7ea      	b.n	80149a8 <__swbuf_r+0x6c>
 80149d2:	bf00      	nop
 80149d4:	080158d4 	.word	0x080158d4
 80149d8:	080158f4 	.word	0x080158f4
 80149dc:	080158b4 	.word	0x080158b4

080149e0 <__swsetup_r>:
 80149e0:	4b32      	ldr	r3, [pc, #200]	; (8014aac <__swsetup_r+0xcc>)
 80149e2:	b570      	push	{r4, r5, r6, lr}
 80149e4:	681d      	ldr	r5, [r3, #0]
 80149e6:	4606      	mov	r6, r0
 80149e8:	460c      	mov	r4, r1
 80149ea:	b125      	cbz	r5, 80149f6 <__swsetup_r+0x16>
 80149ec:	69ab      	ldr	r3, [r5, #24]
 80149ee:	b913      	cbnz	r3, 80149f6 <__swsetup_r+0x16>
 80149f0:	4628      	mov	r0, r5
 80149f2:	f000 f985 	bl	8014d00 <__sinit>
 80149f6:	4b2e      	ldr	r3, [pc, #184]	; (8014ab0 <__swsetup_r+0xd0>)
 80149f8:	429c      	cmp	r4, r3
 80149fa:	d10f      	bne.n	8014a1c <__swsetup_r+0x3c>
 80149fc:	686c      	ldr	r4, [r5, #4]
 80149fe:	89a3      	ldrh	r3, [r4, #12]
 8014a00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a04:	0719      	lsls	r1, r3, #28
 8014a06:	d42c      	bmi.n	8014a62 <__swsetup_r+0x82>
 8014a08:	06dd      	lsls	r5, r3, #27
 8014a0a:	d411      	bmi.n	8014a30 <__swsetup_r+0x50>
 8014a0c:	2309      	movs	r3, #9
 8014a0e:	6033      	str	r3, [r6, #0]
 8014a10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014a14:	81a3      	strh	r3, [r4, #12]
 8014a16:	f04f 30ff 	mov.w	r0, #4294967295
 8014a1a:	e03e      	b.n	8014a9a <__swsetup_r+0xba>
 8014a1c:	4b25      	ldr	r3, [pc, #148]	; (8014ab4 <__swsetup_r+0xd4>)
 8014a1e:	429c      	cmp	r4, r3
 8014a20:	d101      	bne.n	8014a26 <__swsetup_r+0x46>
 8014a22:	68ac      	ldr	r4, [r5, #8]
 8014a24:	e7eb      	b.n	80149fe <__swsetup_r+0x1e>
 8014a26:	4b24      	ldr	r3, [pc, #144]	; (8014ab8 <__swsetup_r+0xd8>)
 8014a28:	429c      	cmp	r4, r3
 8014a2a:	bf08      	it	eq
 8014a2c:	68ec      	ldreq	r4, [r5, #12]
 8014a2e:	e7e6      	b.n	80149fe <__swsetup_r+0x1e>
 8014a30:	0758      	lsls	r0, r3, #29
 8014a32:	d512      	bpl.n	8014a5a <__swsetup_r+0x7a>
 8014a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a36:	b141      	cbz	r1, 8014a4a <__swsetup_r+0x6a>
 8014a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a3c:	4299      	cmp	r1, r3
 8014a3e:	d002      	beq.n	8014a46 <__swsetup_r+0x66>
 8014a40:	4630      	mov	r0, r6
 8014a42:	f7ff fb65 	bl	8014110 <_free_r>
 8014a46:	2300      	movs	r3, #0
 8014a48:	6363      	str	r3, [r4, #52]	; 0x34
 8014a4a:	89a3      	ldrh	r3, [r4, #12]
 8014a4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014a50:	81a3      	strh	r3, [r4, #12]
 8014a52:	2300      	movs	r3, #0
 8014a54:	6063      	str	r3, [r4, #4]
 8014a56:	6923      	ldr	r3, [r4, #16]
 8014a58:	6023      	str	r3, [r4, #0]
 8014a5a:	89a3      	ldrh	r3, [r4, #12]
 8014a5c:	f043 0308 	orr.w	r3, r3, #8
 8014a60:	81a3      	strh	r3, [r4, #12]
 8014a62:	6923      	ldr	r3, [r4, #16]
 8014a64:	b94b      	cbnz	r3, 8014a7a <__swsetup_r+0x9a>
 8014a66:	89a3      	ldrh	r3, [r4, #12]
 8014a68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a70:	d003      	beq.n	8014a7a <__swsetup_r+0x9a>
 8014a72:	4621      	mov	r1, r4
 8014a74:	4630      	mov	r0, r6
 8014a76:	f000 fa07 	bl	8014e88 <__smakebuf_r>
 8014a7a:	89a0      	ldrh	r0, [r4, #12]
 8014a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a80:	f010 0301 	ands.w	r3, r0, #1
 8014a84:	d00a      	beq.n	8014a9c <__swsetup_r+0xbc>
 8014a86:	2300      	movs	r3, #0
 8014a88:	60a3      	str	r3, [r4, #8]
 8014a8a:	6963      	ldr	r3, [r4, #20]
 8014a8c:	425b      	negs	r3, r3
 8014a8e:	61a3      	str	r3, [r4, #24]
 8014a90:	6923      	ldr	r3, [r4, #16]
 8014a92:	b943      	cbnz	r3, 8014aa6 <__swsetup_r+0xc6>
 8014a94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014a98:	d1ba      	bne.n	8014a10 <__swsetup_r+0x30>
 8014a9a:	bd70      	pop	{r4, r5, r6, pc}
 8014a9c:	0781      	lsls	r1, r0, #30
 8014a9e:	bf58      	it	pl
 8014aa0:	6963      	ldrpl	r3, [r4, #20]
 8014aa2:	60a3      	str	r3, [r4, #8]
 8014aa4:	e7f4      	b.n	8014a90 <__swsetup_r+0xb0>
 8014aa6:	2000      	movs	r0, #0
 8014aa8:	e7f7      	b.n	8014a9a <__swsetup_r+0xba>
 8014aaa:	bf00      	nop
 8014aac:	20000198 	.word	0x20000198
 8014ab0:	080158d4 	.word	0x080158d4
 8014ab4:	080158f4 	.word	0x080158f4
 8014ab8:	080158b4 	.word	0x080158b4

08014abc <abort>:
 8014abc:	b508      	push	{r3, lr}
 8014abe:	2006      	movs	r0, #6
 8014ac0:	f000 fa52 	bl	8014f68 <raise>
 8014ac4:	2001      	movs	r0, #1
 8014ac6:	f7ef fc25 	bl	8004314 <_exit>
	...

08014acc <__sflush_r>:
 8014acc:	898a      	ldrh	r2, [r1, #12]
 8014ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ad2:	4605      	mov	r5, r0
 8014ad4:	0710      	lsls	r0, r2, #28
 8014ad6:	460c      	mov	r4, r1
 8014ad8:	d458      	bmi.n	8014b8c <__sflush_r+0xc0>
 8014ada:	684b      	ldr	r3, [r1, #4]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	dc05      	bgt.n	8014aec <__sflush_r+0x20>
 8014ae0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	dc02      	bgt.n	8014aec <__sflush_r+0x20>
 8014ae6:	2000      	movs	r0, #0
 8014ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014aee:	2e00      	cmp	r6, #0
 8014af0:	d0f9      	beq.n	8014ae6 <__sflush_r+0x1a>
 8014af2:	2300      	movs	r3, #0
 8014af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014af8:	682f      	ldr	r7, [r5, #0]
 8014afa:	602b      	str	r3, [r5, #0]
 8014afc:	d032      	beq.n	8014b64 <__sflush_r+0x98>
 8014afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014b00:	89a3      	ldrh	r3, [r4, #12]
 8014b02:	075a      	lsls	r2, r3, #29
 8014b04:	d505      	bpl.n	8014b12 <__sflush_r+0x46>
 8014b06:	6863      	ldr	r3, [r4, #4]
 8014b08:	1ac0      	subs	r0, r0, r3
 8014b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014b0c:	b10b      	cbz	r3, 8014b12 <__sflush_r+0x46>
 8014b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014b10:	1ac0      	subs	r0, r0, r3
 8014b12:	2300      	movs	r3, #0
 8014b14:	4602      	mov	r2, r0
 8014b16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b18:	6a21      	ldr	r1, [r4, #32]
 8014b1a:	4628      	mov	r0, r5
 8014b1c:	47b0      	blx	r6
 8014b1e:	1c43      	adds	r3, r0, #1
 8014b20:	89a3      	ldrh	r3, [r4, #12]
 8014b22:	d106      	bne.n	8014b32 <__sflush_r+0x66>
 8014b24:	6829      	ldr	r1, [r5, #0]
 8014b26:	291d      	cmp	r1, #29
 8014b28:	d82c      	bhi.n	8014b84 <__sflush_r+0xb8>
 8014b2a:	4a2a      	ldr	r2, [pc, #168]	; (8014bd4 <__sflush_r+0x108>)
 8014b2c:	40ca      	lsrs	r2, r1
 8014b2e:	07d6      	lsls	r6, r2, #31
 8014b30:	d528      	bpl.n	8014b84 <__sflush_r+0xb8>
 8014b32:	2200      	movs	r2, #0
 8014b34:	6062      	str	r2, [r4, #4]
 8014b36:	04d9      	lsls	r1, r3, #19
 8014b38:	6922      	ldr	r2, [r4, #16]
 8014b3a:	6022      	str	r2, [r4, #0]
 8014b3c:	d504      	bpl.n	8014b48 <__sflush_r+0x7c>
 8014b3e:	1c42      	adds	r2, r0, #1
 8014b40:	d101      	bne.n	8014b46 <__sflush_r+0x7a>
 8014b42:	682b      	ldr	r3, [r5, #0]
 8014b44:	b903      	cbnz	r3, 8014b48 <__sflush_r+0x7c>
 8014b46:	6560      	str	r0, [r4, #84]	; 0x54
 8014b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b4a:	602f      	str	r7, [r5, #0]
 8014b4c:	2900      	cmp	r1, #0
 8014b4e:	d0ca      	beq.n	8014ae6 <__sflush_r+0x1a>
 8014b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b54:	4299      	cmp	r1, r3
 8014b56:	d002      	beq.n	8014b5e <__sflush_r+0x92>
 8014b58:	4628      	mov	r0, r5
 8014b5a:	f7ff fad9 	bl	8014110 <_free_r>
 8014b5e:	2000      	movs	r0, #0
 8014b60:	6360      	str	r0, [r4, #52]	; 0x34
 8014b62:	e7c1      	b.n	8014ae8 <__sflush_r+0x1c>
 8014b64:	6a21      	ldr	r1, [r4, #32]
 8014b66:	2301      	movs	r3, #1
 8014b68:	4628      	mov	r0, r5
 8014b6a:	47b0      	blx	r6
 8014b6c:	1c41      	adds	r1, r0, #1
 8014b6e:	d1c7      	bne.n	8014b00 <__sflush_r+0x34>
 8014b70:	682b      	ldr	r3, [r5, #0]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d0c4      	beq.n	8014b00 <__sflush_r+0x34>
 8014b76:	2b1d      	cmp	r3, #29
 8014b78:	d001      	beq.n	8014b7e <__sflush_r+0xb2>
 8014b7a:	2b16      	cmp	r3, #22
 8014b7c:	d101      	bne.n	8014b82 <__sflush_r+0xb6>
 8014b7e:	602f      	str	r7, [r5, #0]
 8014b80:	e7b1      	b.n	8014ae6 <__sflush_r+0x1a>
 8014b82:	89a3      	ldrh	r3, [r4, #12]
 8014b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b88:	81a3      	strh	r3, [r4, #12]
 8014b8a:	e7ad      	b.n	8014ae8 <__sflush_r+0x1c>
 8014b8c:	690f      	ldr	r7, [r1, #16]
 8014b8e:	2f00      	cmp	r7, #0
 8014b90:	d0a9      	beq.n	8014ae6 <__sflush_r+0x1a>
 8014b92:	0793      	lsls	r3, r2, #30
 8014b94:	680e      	ldr	r6, [r1, #0]
 8014b96:	bf08      	it	eq
 8014b98:	694b      	ldreq	r3, [r1, #20]
 8014b9a:	600f      	str	r7, [r1, #0]
 8014b9c:	bf18      	it	ne
 8014b9e:	2300      	movne	r3, #0
 8014ba0:	eba6 0807 	sub.w	r8, r6, r7
 8014ba4:	608b      	str	r3, [r1, #8]
 8014ba6:	f1b8 0f00 	cmp.w	r8, #0
 8014baa:	dd9c      	ble.n	8014ae6 <__sflush_r+0x1a>
 8014bac:	6a21      	ldr	r1, [r4, #32]
 8014bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014bb0:	4643      	mov	r3, r8
 8014bb2:	463a      	mov	r2, r7
 8014bb4:	4628      	mov	r0, r5
 8014bb6:	47b0      	blx	r6
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	dc06      	bgt.n	8014bca <__sflush_r+0xfe>
 8014bbc:	89a3      	ldrh	r3, [r4, #12]
 8014bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014bc2:	81a3      	strh	r3, [r4, #12]
 8014bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8014bc8:	e78e      	b.n	8014ae8 <__sflush_r+0x1c>
 8014bca:	4407      	add	r7, r0
 8014bcc:	eba8 0800 	sub.w	r8, r8, r0
 8014bd0:	e7e9      	b.n	8014ba6 <__sflush_r+0xda>
 8014bd2:	bf00      	nop
 8014bd4:	20400001 	.word	0x20400001

08014bd8 <_fflush_r>:
 8014bd8:	b538      	push	{r3, r4, r5, lr}
 8014bda:	690b      	ldr	r3, [r1, #16]
 8014bdc:	4605      	mov	r5, r0
 8014bde:	460c      	mov	r4, r1
 8014be0:	b913      	cbnz	r3, 8014be8 <_fflush_r+0x10>
 8014be2:	2500      	movs	r5, #0
 8014be4:	4628      	mov	r0, r5
 8014be6:	bd38      	pop	{r3, r4, r5, pc}
 8014be8:	b118      	cbz	r0, 8014bf2 <_fflush_r+0x1a>
 8014bea:	6983      	ldr	r3, [r0, #24]
 8014bec:	b90b      	cbnz	r3, 8014bf2 <_fflush_r+0x1a>
 8014bee:	f000 f887 	bl	8014d00 <__sinit>
 8014bf2:	4b14      	ldr	r3, [pc, #80]	; (8014c44 <_fflush_r+0x6c>)
 8014bf4:	429c      	cmp	r4, r3
 8014bf6:	d11b      	bne.n	8014c30 <_fflush_r+0x58>
 8014bf8:	686c      	ldr	r4, [r5, #4]
 8014bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d0ef      	beq.n	8014be2 <_fflush_r+0xa>
 8014c02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014c04:	07d0      	lsls	r0, r2, #31
 8014c06:	d404      	bmi.n	8014c12 <_fflush_r+0x3a>
 8014c08:	0599      	lsls	r1, r3, #22
 8014c0a:	d402      	bmi.n	8014c12 <_fflush_r+0x3a>
 8014c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c0e:	f000 f915 	bl	8014e3c <__retarget_lock_acquire_recursive>
 8014c12:	4628      	mov	r0, r5
 8014c14:	4621      	mov	r1, r4
 8014c16:	f7ff ff59 	bl	8014acc <__sflush_r>
 8014c1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c1c:	07da      	lsls	r2, r3, #31
 8014c1e:	4605      	mov	r5, r0
 8014c20:	d4e0      	bmi.n	8014be4 <_fflush_r+0xc>
 8014c22:	89a3      	ldrh	r3, [r4, #12]
 8014c24:	059b      	lsls	r3, r3, #22
 8014c26:	d4dd      	bmi.n	8014be4 <_fflush_r+0xc>
 8014c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c2a:	f000 f908 	bl	8014e3e <__retarget_lock_release_recursive>
 8014c2e:	e7d9      	b.n	8014be4 <_fflush_r+0xc>
 8014c30:	4b05      	ldr	r3, [pc, #20]	; (8014c48 <_fflush_r+0x70>)
 8014c32:	429c      	cmp	r4, r3
 8014c34:	d101      	bne.n	8014c3a <_fflush_r+0x62>
 8014c36:	68ac      	ldr	r4, [r5, #8]
 8014c38:	e7df      	b.n	8014bfa <_fflush_r+0x22>
 8014c3a:	4b04      	ldr	r3, [pc, #16]	; (8014c4c <_fflush_r+0x74>)
 8014c3c:	429c      	cmp	r4, r3
 8014c3e:	bf08      	it	eq
 8014c40:	68ec      	ldreq	r4, [r5, #12]
 8014c42:	e7da      	b.n	8014bfa <_fflush_r+0x22>
 8014c44:	080158d4 	.word	0x080158d4
 8014c48:	080158f4 	.word	0x080158f4
 8014c4c:	080158b4 	.word	0x080158b4

08014c50 <std>:
 8014c50:	2300      	movs	r3, #0
 8014c52:	b510      	push	{r4, lr}
 8014c54:	4604      	mov	r4, r0
 8014c56:	e9c0 3300 	strd	r3, r3, [r0]
 8014c5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014c5e:	6083      	str	r3, [r0, #8]
 8014c60:	8181      	strh	r1, [r0, #12]
 8014c62:	6643      	str	r3, [r0, #100]	; 0x64
 8014c64:	81c2      	strh	r2, [r0, #14]
 8014c66:	6183      	str	r3, [r0, #24]
 8014c68:	4619      	mov	r1, r3
 8014c6a:	2208      	movs	r2, #8
 8014c6c:	305c      	adds	r0, #92	; 0x5c
 8014c6e:	f7fb fded 	bl	801084c <memset>
 8014c72:	4b05      	ldr	r3, [pc, #20]	; (8014c88 <std+0x38>)
 8014c74:	6263      	str	r3, [r4, #36]	; 0x24
 8014c76:	4b05      	ldr	r3, [pc, #20]	; (8014c8c <std+0x3c>)
 8014c78:	62a3      	str	r3, [r4, #40]	; 0x28
 8014c7a:	4b05      	ldr	r3, [pc, #20]	; (8014c90 <std+0x40>)
 8014c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014c7e:	4b05      	ldr	r3, [pc, #20]	; (8014c94 <std+0x44>)
 8014c80:	6224      	str	r4, [r4, #32]
 8014c82:	6323      	str	r3, [r4, #48]	; 0x30
 8014c84:	bd10      	pop	{r4, pc}
 8014c86:	bf00      	nop
 8014c88:	08014fa1 	.word	0x08014fa1
 8014c8c:	08014fc3 	.word	0x08014fc3
 8014c90:	08014ffb 	.word	0x08014ffb
 8014c94:	0801501f 	.word	0x0801501f

08014c98 <_cleanup_r>:
 8014c98:	4901      	ldr	r1, [pc, #4]	; (8014ca0 <_cleanup_r+0x8>)
 8014c9a:	f000 b8af 	b.w	8014dfc <_fwalk_reent>
 8014c9e:	bf00      	nop
 8014ca0:	08014bd9 	.word	0x08014bd9

08014ca4 <__sfmoreglue>:
 8014ca4:	b570      	push	{r4, r5, r6, lr}
 8014ca6:	1e4a      	subs	r2, r1, #1
 8014ca8:	2568      	movs	r5, #104	; 0x68
 8014caa:	4355      	muls	r5, r2
 8014cac:	460e      	mov	r6, r1
 8014cae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014cb2:	f7ff fa7d 	bl	80141b0 <_malloc_r>
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	b140      	cbz	r0, 8014ccc <__sfmoreglue+0x28>
 8014cba:	2100      	movs	r1, #0
 8014cbc:	e9c0 1600 	strd	r1, r6, [r0]
 8014cc0:	300c      	adds	r0, #12
 8014cc2:	60a0      	str	r0, [r4, #8]
 8014cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014cc8:	f7fb fdc0 	bl	801084c <memset>
 8014ccc:	4620      	mov	r0, r4
 8014cce:	bd70      	pop	{r4, r5, r6, pc}

08014cd0 <__sfp_lock_acquire>:
 8014cd0:	4801      	ldr	r0, [pc, #4]	; (8014cd8 <__sfp_lock_acquire+0x8>)
 8014cd2:	f000 b8b3 	b.w	8014e3c <__retarget_lock_acquire_recursive>
 8014cd6:	bf00      	nop
 8014cd8:	2000aa78 	.word	0x2000aa78

08014cdc <__sfp_lock_release>:
 8014cdc:	4801      	ldr	r0, [pc, #4]	; (8014ce4 <__sfp_lock_release+0x8>)
 8014cde:	f000 b8ae 	b.w	8014e3e <__retarget_lock_release_recursive>
 8014ce2:	bf00      	nop
 8014ce4:	2000aa78 	.word	0x2000aa78

08014ce8 <__sinit_lock_acquire>:
 8014ce8:	4801      	ldr	r0, [pc, #4]	; (8014cf0 <__sinit_lock_acquire+0x8>)
 8014cea:	f000 b8a7 	b.w	8014e3c <__retarget_lock_acquire_recursive>
 8014cee:	bf00      	nop
 8014cf0:	2000aa73 	.word	0x2000aa73

08014cf4 <__sinit_lock_release>:
 8014cf4:	4801      	ldr	r0, [pc, #4]	; (8014cfc <__sinit_lock_release+0x8>)
 8014cf6:	f000 b8a2 	b.w	8014e3e <__retarget_lock_release_recursive>
 8014cfa:	bf00      	nop
 8014cfc:	2000aa73 	.word	0x2000aa73

08014d00 <__sinit>:
 8014d00:	b510      	push	{r4, lr}
 8014d02:	4604      	mov	r4, r0
 8014d04:	f7ff fff0 	bl	8014ce8 <__sinit_lock_acquire>
 8014d08:	69a3      	ldr	r3, [r4, #24]
 8014d0a:	b11b      	cbz	r3, 8014d14 <__sinit+0x14>
 8014d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d10:	f7ff bff0 	b.w	8014cf4 <__sinit_lock_release>
 8014d14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014d18:	6523      	str	r3, [r4, #80]	; 0x50
 8014d1a:	4b13      	ldr	r3, [pc, #76]	; (8014d68 <__sinit+0x68>)
 8014d1c:	4a13      	ldr	r2, [pc, #76]	; (8014d6c <__sinit+0x6c>)
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	62a2      	str	r2, [r4, #40]	; 0x28
 8014d22:	42a3      	cmp	r3, r4
 8014d24:	bf04      	itt	eq
 8014d26:	2301      	moveq	r3, #1
 8014d28:	61a3      	streq	r3, [r4, #24]
 8014d2a:	4620      	mov	r0, r4
 8014d2c:	f000 f820 	bl	8014d70 <__sfp>
 8014d30:	6060      	str	r0, [r4, #4]
 8014d32:	4620      	mov	r0, r4
 8014d34:	f000 f81c 	bl	8014d70 <__sfp>
 8014d38:	60a0      	str	r0, [r4, #8]
 8014d3a:	4620      	mov	r0, r4
 8014d3c:	f000 f818 	bl	8014d70 <__sfp>
 8014d40:	2200      	movs	r2, #0
 8014d42:	60e0      	str	r0, [r4, #12]
 8014d44:	2104      	movs	r1, #4
 8014d46:	6860      	ldr	r0, [r4, #4]
 8014d48:	f7ff ff82 	bl	8014c50 <std>
 8014d4c:	68a0      	ldr	r0, [r4, #8]
 8014d4e:	2201      	movs	r2, #1
 8014d50:	2109      	movs	r1, #9
 8014d52:	f7ff ff7d 	bl	8014c50 <std>
 8014d56:	68e0      	ldr	r0, [r4, #12]
 8014d58:	2202      	movs	r2, #2
 8014d5a:	2112      	movs	r1, #18
 8014d5c:	f7ff ff78 	bl	8014c50 <std>
 8014d60:	2301      	movs	r3, #1
 8014d62:	61a3      	str	r3, [r4, #24]
 8014d64:	e7d2      	b.n	8014d0c <__sinit+0xc>
 8014d66:	bf00      	nop
 8014d68:	0801545c 	.word	0x0801545c
 8014d6c:	08014c99 	.word	0x08014c99

08014d70 <__sfp>:
 8014d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d72:	4607      	mov	r7, r0
 8014d74:	f7ff ffac 	bl	8014cd0 <__sfp_lock_acquire>
 8014d78:	4b1e      	ldr	r3, [pc, #120]	; (8014df4 <__sfp+0x84>)
 8014d7a:	681e      	ldr	r6, [r3, #0]
 8014d7c:	69b3      	ldr	r3, [r6, #24]
 8014d7e:	b913      	cbnz	r3, 8014d86 <__sfp+0x16>
 8014d80:	4630      	mov	r0, r6
 8014d82:	f7ff ffbd 	bl	8014d00 <__sinit>
 8014d86:	3648      	adds	r6, #72	; 0x48
 8014d88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014d8c:	3b01      	subs	r3, #1
 8014d8e:	d503      	bpl.n	8014d98 <__sfp+0x28>
 8014d90:	6833      	ldr	r3, [r6, #0]
 8014d92:	b30b      	cbz	r3, 8014dd8 <__sfp+0x68>
 8014d94:	6836      	ldr	r6, [r6, #0]
 8014d96:	e7f7      	b.n	8014d88 <__sfp+0x18>
 8014d98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014d9c:	b9d5      	cbnz	r5, 8014dd4 <__sfp+0x64>
 8014d9e:	4b16      	ldr	r3, [pc, #88]	; (8014df8 <__sfp+0x88>)
 8014da0:	60e3      	str	r3, [r4, #12]
 8014da2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014da6:	6665      	str	r5, [r4, #100]	; 0x64
 8014da8:	f000 f847 	bl	8014e3a <__retarget_lock_init_recursive>
 8014dac:	f7ff ff96 	bl	8014cdc <__sfp_lock_release>
 8014db0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014db4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014db8:	6025      	str	r5, [r4, #0]
 8014dba:	61a5      	str	r5, [r4, #24]
 8014dbc:	2208      	movs	r2, #8
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014dc4:	f7fb fd42 	bl	801084c <memset>
 8014dc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014dcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dd4:	3468      	adds	r4, #104	; 0x68
 8014dd6:	e7d9      	b.n	8014d8c <__sfp+0x1c>
 8014dd8:	2104      	movs	r1, #4
 8014dda:	4638      	mov	r0, r7
 8014ddc:	f7ff ff62 	bl	8014ca4 <__sfmoreglue>
 8014de0:	4604      	mov	r4, r0
 8014de2:	6030      	str	r0, [r6, #0]
 8014de4:	2800      	cmp	r0, #0
 8014de6:	d1d5      	bne.n	8014d94 <__sfp+0x24>
 8014de8:	f7ff ff78 	bl	8014cdc <__sfp_lock_release>
 8014dec:	230c      	movs	r3, #12
 8014dee:	603b      	str	r3, [r7, #0]
 8014df0:	e7ee      	b.n	8014dd0 <__sfp+0x60>
 8014df2:	bf00      	nop
 8014df4:	0801545c 	.word	0x0801545c
 8014df8:	ffff0001 	.word	0xffff0001

08014dfc <_fwalk_reent>:
 8014dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e00:	4606      	mov	r6, r0
 8014e02:	4688      	mov	r8, r1
 8014e04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014e08:	2700      	movs	r7, #0
 8014e0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014e0e:	f1b9 0901 	subs.w	r9, r9, #1
 8014e12:	d505      	bpl.n	8014e20 <_fwalk_reent+0x24>
 8014e14:	6824      	ldr	r4, [r4, #0]
 8014e16:	2c00      	cmp	r4, #0
 8014e18:	d1f7      	bne.n	8014e0a <_fwalk_reent+0xe>
 8014e1a:	4638      	mov	r0, r7
 8014e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e20:	89ab      	ldrh	r3, [r5, #12]
 8014e22:	2b01      	cmp	r3, #1
 8014e24:	d907      	bls.n	8014e36 <_fwalk_reent+0x3a>
 8014e26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014e2a:	3301      	adds	r3, #1
 8014e2c:	d003      	beq.n	8014e36 <_fwalk_reent+0x3a>
 8014e2e:	4629      	mov	r1, r5
 8014e30:	4630      	mov	r0, r6
 8014e32:	47c0      	blx	r8
 8014e34:	4307      	orrs	r7, r0
 8014e36:	3568      	adds	r5, #104	; 0x68
 8014e38:	e7e9      	b.n	8014e0e <_fwalk_reent+0x12>

08014e3a <__retarget_lock_init_recursive>:
 8014e3a:	4770      	bx	lr

08014e3c <__retarget_lock_acquire_recursive>:
 8014e3c:	4770      	bx	lr

08014e3e <__retarget_lock_release_recursive>:
 8014e3e:	4770      	bx	lr

08014e40 <__swhatbuf_r>:
 8014e40:	b570      	push	{r4, r5, r6, lr}
 8014e42:	460e      	mov	r6, r1
 8014e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e48:	2900      	cmp	r1, #0
 8014e4a:	b096      	sub	sp, #88	; 0x58
 8014e4c:	4614      	mov	r4, r2
 8014e4e:	461d      	mov	r5, r3
 8014e50:	da07      	bge.n	8014e62 <__swhatbuf_r+0x22>
 8014e52:	2300      	movs	r3, #0
 8014e54:	602b      	str	r3, [r5, #0]
 8014e56:	89b3      	ldrh	r3, [r6, #12]
 8014e58:	061a      	lsls	r2, r3, #24
 8014e5a:	d410      	bmi.n	8014e7e <__swhatbuf_r+0x3e>
 8014e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e60:	e00e      	b.n	8014e80 <__swhatbuf_r+0x40>
 8014e62:	466a      	mov	r2, sp
 8014e64:	f000 f902 	bl	801506c <_fstat_r>
 8014e68:	2800      	cmp	r0, #0
 8014e6a:	dbf2      	blt.n	8014e52 <__swhatbuf_r+0x12>
 8014e6c:	9a01      	ldr	r2, [sp, #4]
 8014e6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014e72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014e76:	425a      	negs	r2, r3
 8014e78:	415a      	adcs	r2, r3
 8014e7a:	602a      	str	r2, [r5, #0]
 8014e7c:	e7ee      	b.n	8014e5c <__swhatbuf_r+0x1c>
 8014e7e:	2340      	movs	r3, #64	; 0x40
 8014e80:	2000      	movs	r0, #0
 8014e82:	6023      	str	r3, [r4, #0]
 8014e84:	b016      	add	sp, #88	; 0x58
 8014e86:	bd70      	pop	{r4, r5, r6, pc}

08014e88 <__smakebuf_r>:
 8014e88:	898b      	ldrh	r3, [r1, #12]
 8014e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014e8c:	079d      	lsls	r5, r3, #30
 8014e8e:	4606      	mov	r6, r0
 8014e90:	460c      	mov	r4, r1
 8014e92:	d507      	bpl.n	8014ea4 <__smakebuf_r+0x1c>
 8014e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014e98:	6023      	str	r3, [r4, #0]
 8014e9a:	6123      	str	r3, [r4, #16]
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	6163      	str	r3, [r4, #20]
 8014ea0:	b002      	add	sp, #8
 8014ea2:	bd70      	pop	{r4, r5, r6, pc}
 8014ea4:	ab01      	add	r3, sp, #4
 8014ea6:	466a      	mov	r2, sp
 8014ea8:	f7ff ffca 	bl	8014e40 <__swhatbuf_r>
 8014eac:	9900      	ldr	r1, [sp, #0]
 8014eae:	4605      	mov	r5, r0
 8014eb0:	4630      	mov	r0, r6
 8014eb2:	f7ff f97d 	bl	80141b0 <_malloc_r>
 8014eb6:	b948      	cbnz	r0, 8014ecc <__smakebuf_r+0x44>
 8014eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ebc:	059a      	lsls	r2, r3, #22
 8014ebe:	d4ef      	bmi.n	8014ea0 <__smakebuf_r+0x18>
 8014ec0:	f023 0303 	bic.w	r3, r3, #3
 8014ec4:	f043 0302 	orr.w	r3, r3, #2
 8014ec8:	81a3      	strh	r3, [r4, #12]
 8014eca:	e7e3      	b.n	8014e94 <__smakebuf_r+0xc>
 8014ecc:	4b0d      	ldr	r3, [pc, #52]	; (8014f04 <__smakebuf_r+0x7c>)
 8014ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8014ed0:	89a3      	ldrh	r3, [r4, #12]
 8014ed2:	6020      	str	r0, [r4, #0]
 8014ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ed8:	81a3      	strh	r3, [r4, #12]
 8014eda:	9b00      	ldr	r3, [sp, #0]
 8014edc:	6163      	str	r3, [r4, #20]
 8014ede:	9b01      	ldr	r3, [sp, #4]
 8014ee0:	6120      	str	r0, [r4, #16]
 8014ee2:	b15b      	cbz	r3, 8014efc <__smakebuf_r+0x74>
 8014ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ee8:	4630      	mov	r0, r6
 8014eea:	f000 f8d1 	bl	8015090 <_isatty_r>
 8014eee:	b128      	cbz	r0, 8014efc <__smakebuf_r+0x74>
 8014ef0:	89a3      	ldrh	r3, [r4, #12]
 8014ef2:	f023 0303 	bic.w	r3, r3, #3
 8014ef6:	f043 0301 	orr.w	r3, r3, #1
 8014efa:	81a3      	strh	r3, [r4, #12]
 8014efc:	89a0      	ldrh	r0, [r4, #12]
 8014efe:	4305      	orrs	r5, r0
 8014f00:	81a5      	strh	r5, [r4, #12]
 8014f02:	e7cd      	b.n	8014ea0 <__smakebuf_r+0x18>
 8014f04:	08014c99 	.word	0x08014c99

08014f08 <_malloc_usable_size_r>:
 8014f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f0c:	1f18      	subs	r0, r3, #4
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	bfbc      	itt	lt
 8014f12:	580b      	ldrlt	r3, [r1, r0]
 8014f14:	18c0      	addlt	r0, r0, r3
 8014f16:	4770      	bx	lr

08014f18 <_raise_r>:
 8014f18:	291f      	cmp	r1, #31
 8014f1a:	b538      	push	{r3, r4, r5, lr}
 8014f1c:	4604      	mov	r4, r0
 8014f1e:	460d      	mov	r5, r1
 8014f20:	d904      	bls.n	8014f2c <_raise_r+0x14>
 8014f22:	2316      	movs	r3, #22
 8014f24:	6003      	str	r3, [r0, #0]
 8014f26:	f04f 30ff 	mov.w	r0, #4294967295
 8014f2a:	bd38      	pop	{r3, r4, r5, pc}
 8014f2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014f2e:	b112      	cbz	r2, 8014f36 <_raise_r+0x1e>
 8014f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f34:	b94b      	cbnz	r3, 8014f4a <_raise_r+0x32>
 8014f36:	4620      	mov	r0, r4
 8014f38:	f000 f830 	bl	8014f9c <_getpid_r>
 8014f3c:	462a      	mov	r2, r5
 8014f3e:	4601      	mov	r1, r0
 8014f40:	4620      	mov	r0, r4
 8014f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f46:	f000 b817 	b.w	8014f78 <_kill_r>
 8014f4a:	2b01      	cmp	r3, #1
 8014f4c:	d00a      	beq.n	8014f64 <_raise_r+0x4c>
 8014f4e:	1c59      	adds	r1, r3, #1
 8014f50:	d103      	bne.n	8014f5a <_raise_r+0x42>
 8014f52:	2316      	movs	r3, #22
 8014f54:	6003      	str	r3, [r0, #0]
 8014f56:	2001      	movs	r0, #1
 8014f58:	e7e7      	b.n	8014f2a <_raise_r+0x12>
 8014f5a:	2400      	movs	r4, #0
 8014f5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014f60:	4628      	mov	r0, r5
 8014f62:	4798      	blx	r3
 8014f64:	2000      	movs	r0, #0
 8014f66:	e7e0      	b.n	8014f2a <_raise_r+0x12>

08014f68 <raise>:
 8014f68:	4b02      	ldr	r3, [pc, #8]	; (8014f74 <raise+0xc>)
 8014f6a:	4601      	mov	r1, r0
 8014f6c:	6818      	ldr	r0, [r3, #0]
 8014f6e:	f7ff bfd3 	b.w	8014f18 <_raise_r>
 8014f72:	bf00      	nop
 8014f74:	20000198 	.word	0x20000198

08014f78 <_kill_r>:
 8014f78:	b538      	push	{r3, r4, r5, lr}
 8014f7a:	4d07      	ldr	r5, [pc, #28]	; (8014f98 <_kill_r+0x20>)
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	4604      	mov	r4, r0
 8014f80:	4608      	mov	r0, r1
 8014f82:	4611      	mov	r1, r2
 8014f84:	602b      	str	r3, [r5, #0]
 8014f86:	f7ef f9b5 	bl	80042f4 <_kill>
 8014f8a:	1c43      	adds	r3, r0, #1
 8014f8c:	d102      	bne.n	8014f94 <_kill_r+0x1c>
 8014f8e:	682b      	ldr	r3, [r5, #0]
 8014f90:	b103      	cbz	r3, 8014f94 <_kill_r+0x1c>
 8014f92:	6023      	str	r3, [r4, #0]
 8014f94:	bd38      	pop	{r3, r4, r5, pc}
 8014f96:	bf00      	nop
 8014f98:	2000aa6c 	.word	0x2000aa6c

08014f9c <_getpid_r>:
 8014f9c:	f7ef b9a2 	b.w	80042e4 <_getpid>

08014fa0 <__sread>:
 8014fa0:	b510      	push	{r4, lr}
 8014fa2:	460c      	mov	r4, r1
 8014fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fa8:	f000 f894 	bl	80150d4 <_read_r>
 8014fac:	2800      	cmp	r0, #0
 8014fae:	bfab      	itete	ge
 8014fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8014fb4:	181b      	addge	r3, r3, r0
 8014fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014fba:	bfac      	ite	ge
 8014fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8014fbe:	81a3      	strhlt	r3, [r4, #12]
 8014fc0:	bd10      	pop	{r4, pc}

08014fc2 <__swrite>:
 8014fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fc6:	461f      	mov	r7, r3
 8014fc8:	898b      	ldrh	r3, [r1, #12]
 8014fca:	05db      	lsls	r3, r3, #23
 8014fcc:	4605      	mov	r5, r0
 8014fce:	460c      	mov	r4, r1
 8014fd0:	4616      	mov	r6, r2
 8014fd2:	d505      	bpl.n	8014fe0 <__swrite+0x1e>
 8014fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fd8:	2302      	movs	r3, #2
 8014fda:	2200      	movs	r2, #0
 8014fdc:	f000 f868 	bl	80150b0 <_lseek_r>
 8014fe0:	89a3      	ldrh	r3, [r4, #12]
 8014fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014fea:	81a3      	strh	r3, [r4, #12]
 8014fec:	4632      	mov	r2, r6
 8014fee:	463b      	mov	r3, r7
 8014ff0:	4628      	mov	r0, r5
 8014ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014ff6:	f000 b817 	b.w	8015028 <_write_r>

08014ffa <__sseek>:
 8014ffa:	b510      	push	{r4, lr}
 8014ffc:	460c      	mov	r4, r1
 8014ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015002:	f000 f855 	bl	80150b0 <_lseek_r>
 8015006:	1c43      	adds	r3, r0, #1
 8015008:	89a3      	ldrh	r3, [r4, #12]
 801500a:	bf15      	itete	ne
 801500c:	6560      	strne	r0, [r4, #84]	; 0x54
 801500e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015016:	81a3      	strheq	r3, [r4, #12]
 8015018:	bf18      	it	ne
 801501a:	81a3      	strhne	r3, [r4, #12]
 801501c:	bd10      	pop	{r4, pc}

0801501e <__sclose>:
 801501e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015022:	f000 b813 	b.w	801504c <_close_r>
	...

08015028 <_write_r>:
 8015028:	b538      	push	{r3, r4, r5, lr}
 801502a:	4d07      	ldr	r5, [pc, #28]	; (8015048 <_write_r+0x20>)
 801502c:	4604      	mov	r4, r0
 801502e:	4608      	mov	r0, r1
 8015030:	4611      	mov	r1, r2
 8015032:	2200      	movs	r2, #0
 8015034:	602a      	str	r2, [r5, #0]
 8015036:	461a      	mov	r2, r3
 8015038:	f7ef f993 	bl	8004362 <_write>
 801503c:	1c43      	adds	r3, r0, #1
 801503e:	d102      	bne.n	8015046 <_write_r+0x1e>
 8015040:	682b      	ldr	r3, [r5, #0]
 8015042:	b103      	cbz	r3, 8015046 <_write_r+0x1e>
 8015044:	6023      	str	r3, [r4, #0]
 8015046:	bd38      	pop	{r3, r4, r5, pc}
 8015048:	2000aa6c 	.word	0x2000aa6c

0801504c <_close_r>:
 801504c:	b538      	push	{r3, r4, r5, lr}
 801504e:	4d06      	ldr	r5, [pc, #24]	; (8015068 <_close_r+0x1c>)
 8015050:	2300      	movs	r3, #0
 8015052:	4604      	mov	r4, r0
 8015054:	4608      	mov	r0, r1
 8015056:	602b      	str	r3, [r5, #0]
 8015058:	f7ef f99f 	bl	800439a <_close>
 801505c:	1c43      	adds	r3, r0, #1
 801505e:	d102      	bne.n	8015066 <_close_r+0x1a>
 8015060:	682b      	ldr	r3, [r5, #0]
 8015062:	b103      	cbz	r3, 8015066 <_close_r+0x1a>
 8015064:	6023      	str	r3, [r4, #0]
 8015066:	bd38      	pop	{r3, r4, r5, pc}
 8015068:	2000aa6c 	.word	0x2000aa6c

0801506c <_fstat_r>:
 801506c:	b538      	push	{r3, r4, r5, lr}
 801506e:	4d07      	ldr	r5, [pc, #28]	; (801508c <_fstat_r+0x20>)
 8015070:	2300      	movs	r3, #0
 8015072:	4604      	mov	r4, r0
 8015074:	4608      	mov	r0, r1
 8015076:	4611      	mov	r1, r2
 8015078:	602b      	str	r3, [r5, #0]
 801507a:	f7ef f99a 	bl	80043b2 <_fstat>
 801507e:	1c43      	adds	r3, r0, #1
 8015080:	d102      	bne.n	8015088 <_fstat_r+0x1c>
 8015082:	682b      	ldr	r3, [r5, #0]
 8015084:	b103      	cbz	r3, 8015088 <_fstat_r+0x1c>
 8015086:	6023      	str	r3, [r4, #0]
 8015088:	bd38      	pop	{r3, r4, r5, pc}
 801508a:	bf00      	nop
 801508c:	2000aa6c 	.word	0x2000aa6c

08015090 <_isatty_r>:
 8015090:	b538      	push	{r3, r4, r5, lr}
 8015092:	4d06      	ldr	r5, [pc, #24]	; (80150ac <_isatty_r+0x1c>)
 8015094:	2300      	movs	r3, #0
 8015096:	4604      	mov	r4, r0
 8015098:	4608      	mov	r0, r1
 801509a:	602b      	str	r3, [r5, #0]
 801509c:	f7ef f999 	bl	80043d2 <_isatty>
 80150a0:	1c43      	adds	r3, r0, #1
 80150a2:	d102      	bne.n	80150aa <_isatty_r+0x1a>
 80150a4:	682b      	ldr	r3, [r5, #0]
 80150a6:	b103      	cbz	r3, 80150aa <_isatty_r+0x1a>
 80150a8:	6023      	str	r3, [r4, #0]
 80150aa:	bd38      	pop	{r3, r4, r5, pc}
 80150ac:	2000aa6c 	.word	0x2000aa6c

080150b0 <_lseek_r>:
 80150b0:	b538      	push	{r3, r4, r5, lr}
 80150b2:	4d07      	ldr	r5, [pc, #28]	; (80150d0 <_lseek_r+0x20>)
 80150b4:	4604      	mov	r4, r0
 80150b6:	4608      	mov	r0, r1
 80150b8:	4611      	mov	r1, r2
 80150ba:	2200      	movs	r2, #0
 80150bc:	602a      	str	r2, [r5, #0]
 80150be:	461a      	mov	r2, r3
 80150c0:	f7ef f992 	bl	80043e8 <_lseek>
 80150c4:	1c43      	adds	r3, r0, #1
 80150c6:	d102      	bne.n	80150ce <_lseek_r+0x1e>
 80150c8:	682b      	ldr	r3, [r5, #0]
 80150ca:	b103      	cbz	r3, 80150ce <_lseek_r+0x1e>
 80150cc:	6023      	str	r3, [r4, #0]
 80150ce:	bd38      	pop	{r3, r4, r5, pc}
 80150d0:	2000aa6c 	.word	0x2000aa6c

080150d4 <_read_r>:
 80150d4:	b538      	push	{r3, r4, r5, lr}
 80150d6:	4d07      	ldr	r5, [pc, #28]	; (80150f4 <_read_r+0x20>)
 80150d8:	4604      	mov	r4, r0
 80150da:	4608      	mov	r0, r1
 80150dc:	4611      	mov	r1, r2
 80150de:	2200      	movs	r2, #0
 80150e0:	602a      	str	r2, [r5, #0]
 80150e2:	461a      	mov	r2, r3
 80150e4:	f7ef f920 	bl	8004328 <_read>
 80150e8:	1c43      	adds	r3, r0, #1
 80150ea:	d102      	bne.n	80150f2 <_read_r+0x1e>
 80150ec:	682b      	ldr	r3, [r5, #0]
 80150ee:	b103      	cbz	r3, 80150f2 <_read_r+0x1e>
 80150f0:	6023      	str	r3, [r4, #0]
 80150f2:	bd38      	pop	{r3, r4, r5, pc}
 80150f4:	2000aa6c 	.word	0x2000aa6c

080150f8 <_init>:
 80150f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150fa:	bf00      	nop
 80150fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80150fe:	bc08      	pop	{r3}
 8015100:	469e      	mov	lr, r3
 8015102:	4770      	bx	lr

08015104 <_fini>:
 8015104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015106:	bf00      	nop
 8015108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801510a:	bc08      	pop	{r3}
 801510c:	469e      	mov	lr, r3
 801510e:	4770      	bx	lr
